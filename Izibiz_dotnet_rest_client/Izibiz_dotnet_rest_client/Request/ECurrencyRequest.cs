using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Izibiz.Request
{

    public class ECurrencyRequest
    {
        public string documentAction = "SEND";
        public Content content = new Content();
    }

    public class Content
    {
        public string profile = "EDOVIZBELGE";
        public string documentTypeCode = "DOVIZALIMBELGESI";
        public string documentNo = "XXX2022000030023";
        public string uuid = Guid.NewGuid().ToString();
        public string issueDate = "2021-12-23";
        public string issueTime = "11:23:09";
        public object[] notes { get; set; }
        public string currencyCode = "EUR";
        public Additionalreference[] additionalReferences = new Additionalreference[] {
            new Additionalreference
            {
                documentType = "XSLT",
        id = Guid.NewGuid().ToString(),
        issueDate = "2021-12-23",
        attachment = new Attachment(),
    },
      new Additionalreference
      {

        id = "XXX2022000030023",
        issueDate = "2021-12-23",
       documentType="FATURANO"
      } ,
      new Additionalreference
      {

        id = "A123",
        issueDate = "2021-12-23",
       documentType="ISTATISTIKNO"
      },
       new Additionalreference
      {

        id = "",
        issueDate = "2021-12-23",
       documentType="GELDIGIULKE",
       issuerParty=new Issuerparty(),
      },
       new Additionalreference
      {

        id = "Yabancı Sermaye",
       documentTypeCode="GELISNEDENI",
       issueDate = "2021-12-23",
      },new Additionalreference
      {
          id= "",
                documentTypeCode= "GBTARIHI",
                issueDate= "2021-12-23"
      },new Additionalreference
      {
          id="123456",
          documentTypeCode= "GBNO",
          issueDate="2021-12-23"
      },new Additionalreference{
      id="",
      documentTypeCode="DBTTARIH",
      issueDate="2021-12-23"
},new Additionalreference
{
    documentTypeCode= "GMTYTARIH",
    id= "987654",
    issueDate= "2021-12-23" ,
}
,new Additionalreference
{
    documentTypeCode= "GMTYSAYI",
    id= "987654",
    issueDate= "2021-12-23" ,
}

        };
        public Accountingsupplierparty accountingSupplierParty = new Accountingsupplierparty();
        public Accountingcustomerparty accountingCustomerParty = new Accountingcustomerparty();
        public Paymentmean[] paymentMeans = new Paymentmean[] {
            new Paymentmean {
                paymentCodeListId = "UN/4461" ,
                paymentCode="ZZZ",
                instructionNote="AÇIKLAMA",
                payeeFinancialAccount=new Payeefinancialaccount
                {
                    financialInstitutionBranch =new Financialinstitutionbranch
                {
                    financialInstitution=new Financialinstitution
                    {
                        id="1304-15"
                    }
                },
                },payerFinancialAccount=new Payerfinancialaccount
                {
                    financialInstitutionBranch=new Financialinstitutionbranch1
                    {
                        financialInstitution=new Financialinstitution1
                        {
                            id="B2560",
                        }
                    }
                }
        } };
        public Pricingexchangerate pricingExchangeRate = new Pricingexchangerate();
        public Paymentexchangerate paymentExchangeRate = new Paymentexchangerate();
        public Taxtotal taxTotal = new Taxtotal();
        public Legalmonetarytotal legalMonetaryTotal = new Legalmonetarytotal();
        public object[] lines { get; set; }
    }

    public class Accountingsupplierparty
    {
        public string schemeId = "VKN";
        //public string identifier = "4840847211";
        public string identifier = "2710788108";
        public string name = "IZIBIZ BILISIM TEKNOLOJILERI";
        public string centralRegistrationNo = "0271078810800013";
        public string taxOffice = "YAKACIK";
        public string taxRegisterNo = "915677-0";
        public string headOffice = "ISTANBUL";
        public Address address = new Address();
    }

    public class Address
    {
        public string buildingName = "";
        public string buildingNumber = "";
        public string streetName = "Altayçeşme Mah. Çamlı Sok. No:16 DAP Royal Center A Blok Kat: 15 Daire: 67";
        public string postalCode = "32323";
        public string subCity = "KADIKÖY";
        public string city = "ISTANBUL";
        public string country = "TR";
        public string email = "yazilim@izibiz.com.tr";
        public string telephone = "0850 811 11 99";
        public string website = "www.izibiz.com.tr";
    }

    public class Accountingcustomerparty
    {
        public string schemeId = "TCKN";
        public string identifier = "28166223001";
        public string customerType = "GERCEKKISI";
        public string firstName = "Abdulkerim";
        public string lastName = "Atik";
        public string taxOffice = "";
        public Address1 address = new Address1();
    }

    public class Address1
    {
        public string buildingName = "";
        public string buildingNumber = "B1 Blok";
        public string streetName = "Inistanbul Sitesi B1 Blok no 11";
        public string postalCode = "34100";
        public string subCity = "ZEYTİNBURNU";
        public string city = "İSTANBUL";
        public string country = "TÜRKİYE";
        public string email = "abdulkerimatik@gmail.com";
        public string telephone = "0 542 327 27 32";
        public string website = "edovizalici.com";
        public string nationalityId = "TR";
    }

    public class Pricingexchangerate
    {
        public float calculationRate = 1.1283F;
        public string sourceCurrencyCode = "EUR";
        public string targetCurrencyCode = "USD";
    }

    public class Paymentexchangerate
    {
        public float calculationRate = 11.34f;
        public string sourceCurrencyCode = "USD";
        public string targetCurrencyCode = "TRY";
    }

    public class Taxtotal
    {
        public float taxAmount = 0.00F;
        public Taxsubtotal[] taxSubTotal = new Taxsubtotal[]
        {new Taxsubtotal{
           calculationSequenceNumeric = 1,
        taxableAmount = 1134.00F,
        percent = 0.00F,
        taxAmount = 0.0F,
        taxScheme = new Taxscheme(){
            name="BSMV",
            typeCode = "0021"
    }, }
    };
    }

    public class Taxsubtotal
    {
        public int calculationSequenceNumeric { get; set; }
        public float taxableAmount { get; set; }
        public float percent { get; set; }
        public float taxAmount { get; set; }
        public Taxscheme taxScheme { get; set; }
    }

    public class Taxscheme
    {
        public string name { get; set; }
        public string typeCode { get; set; }
    }

    public class Legalmonetarytotal
    {
        public float lineExtensionAmount = 1134.00F;
        public float taxExclusiveAmount = 1134.00F;
        public float taxInclusiveAmount = 1134.00F;
        public float payableAmount = 1134.00F;
    }

    public class Additionalreference
    {

        public string documentType { get; set; }
        public string id { get; set; }
        public string issueDate { get; set; }
        public Attachment attachment { get; set; }
        public string documentTypeCode { get; set; }
        public Issuerparty issuerParty { get; set; }


        //public string documentType = "XSLT";
        //public string id = Guid.NewGuid().ToString();
        //public string issueDate = "2021-12-23";
        //public Attachment attachment = new Attachment();
        //public string documentTypeCode = "GELDIGIULKE";
        //public Issuerparty issuerParty = new Issuerparty();
    }

    public class Attachment
    {
        public string characterSetCode = "UTF-8";
        public string encodingCode = "Base64";
        public string filename = "XXX2022000030023.xslt";
        public string mimeCode = "application/xml";
        public string content = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHhzbDpzdHlsZXNoZWV0IHZlcnNpb249IjIuMCIgeG1sbnM6eHNsPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L1hTTC9UcmFuc2Zvcm0iCiAgeG1sbnM6Y2FjPSJ1cm46b2FzaXM6bmFtZXM6c3BlY2lmaWNhdGlvbjp1Ymw6c2NoZW1hOnhzZDpDb21tb25BZ2dyZWdhdGVDb21wb25lbnRzLTIiCiAgeG1sbnM6Y2JjPSJ1cm46b2FzaXM6bmFtZXM6c3BlY2lmaWNhdGlvbjp1Ymw6c2NoZW1hOnhzZDpDb21tb25CYXNpY0NvbXBvbmVudHMtMiIKICB4bWxuczpjY3RzPSJ1cm46dW46dW5lY2U6dW5jZWZhY3Q6ZG9jdW1lbnRhdGlvbjoyIgogIHhtbG5zOmNsbTU0MjE3PSJ1cm46dW46dW5lY2U6dW5jZWZhY3Q6Y29kZWxpc3Q6c3BlY2lmaWNhdGlvbjo1NDIxNzoyMDAxIgogIHhtbG5zOmNsbTU2Mzk9InVybjp1bjp1bmVjZTp1bmNlZmFjdDpjb2RlbGlzdDpzcGVjaWZpY2F0aW9uOjU2Mzk6MTk4OCIKICB4bWxuczpjbG02NjQxMT0idXJuOnVuOnVuZWNlOnVuY2VmYWN0OmNvZGVsaXN0OnNwZWNpZmljYXRpb246NjY0MTE6MjAwMSIKICB4bWxuczpjbG1JQU5BTUlNRU1lZGlhVHlwZT0idXJuOnVuOnVuZWNlOnVuY2VmYWN0OmNvZGVsaXN0OnNwZWNpZmljYXRpb246SUFOQU1JTUVNZWRpYVR5cGU6MjAwMyIKICB4bWxuczpmbj0iaHR0cDovL3d3dy53My5vcmcvMjAwNS94cGF0aC1mdW5jdGlvbnMiIHhtbG5zOmxpbms9Imh0dHA6Ly93d3cueGJybC5vcmcvMjAwMy9saW5rYmFzZSIKICB4bWxuczpuMT0idXJuOm9hc2lzOm5hbWVzOnNwZWNpZmljYXRpb246dWJsOnNjaGVtYTp4c2Q6Q3JlZGl0Tm90ZS0yIgogIHhtbG5zOnFkdD0idXJuOm9hc2lzOm5hbWVzOnNwZWNpZmljYXRpb246dWJsOnNjaGVtYTp4c2Q6UXVhbGlmaWVkRGF0YXR5cGVzLTIiCiAgeG1sbnM6dWR0PSJ1cm46dW46dW5lY2U6dW5jZWZhY3Q6ZGF0YTpzcGVjaWZpY2F0aW9uOlVucXVhbGlmaWVkRGF0YVR5cGVzU2NoZW1hTW9kdWxlOjIiCiAgeG1sbnM6eGJybGRpPSJodHRwOi8veGJybC5vcmcvMjAwNi94YnJsZGkiIHhtbG5zOnhicmxpPSJodHRwOi8vd3d3Lnhicmwub3JnLzIwMDMvaW5zdGFuY2UiCiAgeG1sbnM6eGR0PSJodHRwOi8vd3d3LnczLm9yZy8yMDA1L3hwYXRoLWRhdGF0eXBlcyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiCiAgeG1sbnM6eHM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIiB4bWxuczp4c2Q9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hIgogIHhtbG5zOmxjbD0iaHR0cDovL3d3dy5lZmF0dXJhLmdvdi50ci9sb2NhbCIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIKICBleGNsdWRlLXJlc3VsdC1wcmVmaXhlcz0iY2FjIGNiYyBjY3RzIGNsbTU0MjE3IGNsbTU2MzkgY2xtNjY0MTEgY2xtSUFOQU1JTUVNZWRpYVR5cGUgZm4gbGluayBuMSBxZHQgdWR0IHhicmxkaSB4YnJsaSB4ZHQgeGxpbmsgeHMgeHNkIHhzaSBsY2wiPgogIDx4c2w6Y2hhcmFjdGVyLW1hcCBuYW1lPSJhIj4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTI4OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTI5OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTMwOyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTMxOyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTMyOyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTMzOyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTM0OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTM1OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTM2OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTM3OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTM4OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTM5OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTQwOyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTQxOyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTQyOyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTQzOyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTQ0OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTQ1OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTQ2OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTQ3OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTQ4OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTQ5OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTUwOyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTUxOyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTUyOyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTUzOyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTU0OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTU1OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTU2OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTU3OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTU4OyIgc3RyaW5nPSIiLz4KICAgIDx4c2w6b3V0cHV0LWNoYXJhY3RlciBjaGFyYWN0ZXI9IiYjMTU5OyIgc3RyaW5nPSIiLz4KICA8L3hzbDpjaGFyYWN0ZXItbWFwPgogIDx4c2w6ZGVjaW1hbC1mb3JtYXQgbmFtZT0iZXVyb3BlYW4iIGRlY2ltYWwtc2VwYXJhdG9yPSIsIiBncm91cGluZy1zZXBhcmF0b3I9Ii4iIE5hTj0iIi8+CiAgPHhzbDpvdXRwdXQgdmVyc2lvbj0iNC4wIiBtZXRob2Q9Imh0bWwiIGluZGVudD0ibm8iIGVuY29kaW5nPSJVVEYtOCIKICAgIGRvY3R5cGUtcHVibGljPSItLy9XM0MvL0RURCBIVE1MIDQuMDEgVHJhbnNpdGlvbmFsLy9FTiIKICAgIGRvY3R5cGUtc3lzdGVtPSJodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNC9sb29zZS5kdGQiIHVzZS1jaGFyYWN0ZXItbWFwcz0iYSIvPgogIDx4c2w6cGFyYW0gbmFtZT0iU1ZfT3V0cHV0Rm9ybWF0IiBzZWxlY3Q9IidIVE1MJyIvPgogIDx4c2w6dmFyaWFibGUgbmFtZT0iWE1MIiBzZWxlY3Q9Ii8iLz4KICA8eHNsOnZhcmlhYmxlIG5hbWU9ImltZ1NpZ24iCiAgICBzZWxlY3Q9IidkYXRhOmltYWdlL0B3ZXRzaWduYXR1cmVpbWFnZWZvcm1hdEA7YmFzZTY0LEB3ZXRzaWduYXR1cmVpbWFnZWNvbnRlbnRAJyIvPgogIDx4c2w6dmFyaWFibGUgbmFtZT0ic2hvd1dhdGVybWFyayIgc2VsZWN0PSJmYWxzZSgpIi8+CiAgPHhzbDp2YXJpYWJsZSBuYW1lPSJzaG93Q2FuY2VsV2F0ZXJtYXJrIiBzZWxlY3Q9ImZhbHNlKCkiLz4KICA8eHNsOnZhcmlhYmxlIG5hbWU9ImRvdml6bGlGYXR1cmEiIHNlbGVjdD0iZmFsc2UoKSIvPgoKICA8eHNsOnZhcmlhYmxlIG5hbWU9IlNlbGxlcnNJdGVtSWRlbnRpZmljYXRpb25EYXRhVHlwZSIgc2VsZWN0PSJmYWxzZSgpIi8+CiAgPHhzbDp2YXJpYWJsZSBuYW1lPSJCdXllcnNJdGVtSWRlbnRpZmljYXRpb25EYXRhVHlwZSIgc2VsZWN0PSJmYWxzZSgpIi8+CiAgPHhzbDp2YXJpYWJsZSBuYW1lPSJNYW51ZmFjdHVyZXJzSXRlbUlkZW50aWZpY2F0aW9uRGF0YVR5cGUiIHNlbGVjdD0iZmFsc2UoKSIvPgogIDx4c2w6dmFyaWFibGUgbmFtZT0iTmFtZURhdGFUeXBlIiBzZWxlY3Q9ImZhbHNlKCkiLz4KICA8eHNsOnZhcmlhYmxlIG5hbWU9IkJyYW5kTmFtZURhdGFUeXBlIiBzZWxlY3Q9ImZhbHNlKCkiLz4KICA8eHNsOnZhcmlhYmxlIG5hbWU9Ik1vZGVsTmFtZURhdGFUeXBlIiBzZWxlY3Q9ImZhbHNlKCkiLz4KICA8eHNsOnZhcmlhYmxlIG5hbWU9IkRlc2NyaXB0aW9uRGF0YVR5cGUiIHNlbGVjdD0iZmFsc2UoKSIvPgogIDx4c2w6dmFyaWFibGUgbmFtZT0iSXRlbUNvbW1vZGl0eUNsYXNzaWZpY2F0aW9uRGF0YVR5cGUiIHNlbGVjdD0iZmFsc2UoKSIvPgogIDx4c2w6dmFyaWFibGUgbmFtZT0iaW1nQ2FuY2VsV2F0ZXJtYXJrQ29udGVudCIKICAgIHNlbGVjdD0iJy85ai80QUFRU2taSlJnQUJBUUVBWUFCZ0FBRC80UUJtUlhocFpnQUFUVTBBS2dBQUFBZ0FCQUVhQUFVQUFBQUJBQUFBUGdFYkFBVUFBQUFCQUFBQVJnRW9BQU1BQUFBQkFBSUFBQUV4QUFJQUFBQVFBQUFBVGdBQUFBQUFBQUJnQUFBQUFRQUFBR0FBQUFBQmNHRnBiblF1Ym1WMElEUXVNUzQwQVAvYkFFTUFCd1VGQmdVRUJ3WUZCZ2dIQndnS0VRc0tDUWtLRlE4UURCRVlGUm9aR0JVWUZ4c2VKeUViSFNVZEZ4Z2lMaUlsS0NrckxDc2FJQzh6THlveUp5b3JLdi9iQUVNQkJ3Z0lDZ2tLRkFzTEZDb2NHQndxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUt2L0FBQkVJQVk0Qmp3TUJJZ0FDRVFFREVRSC94QUFmQUFBQkJRRUJBUUVCQVFBQUFBQUFBQUFBQVFJREJBVUdCd2dKQ2d2L3hBQzFFQUFDQVFNREFnUURCUVVFQkFBQUFYMEJBZ01BQkJFRkVpRXhRUVlUVVdFSEluRVVNb0dSb1FnalFySEJGVkxSOENRelluS0NDUW9XRnhnWkdpVW1KeWdwS2pRMU5qYzRPVHBEUkVWR1IwaEpTbE5VVlZaWFdGbGFZMlJsWm1kb2FXcHpkSFYyZDNoNWVvT0VoWWFIaUltS2twT1VsWmFYbUptYW9xT2twYWFucUttcXNyTzB0YmEzdUxtNndzUEV4Y2JIeU1uSzB0UFUxZGJYMk5uYTRlTGo1T1htNStqcDZ2SHk4L1QxOXZmNCtmci94QUFmQVFBREFRRUJBUUVCQVFFQkFBQUFBQUFBQVFJREJBVUdCd2dKQ2d2L3hBQzFFUUFDQVFJRUJBTUVCd1VFQkFBQkFuY0FBUUlERVFRRklURUdFa0ZSQjJGeEV5SXlnUWdVUXBHaHNjRUpJek5TOEJWaWN0RUtGaVEwNFNYeEZ4Z1pHaVluS0NrcU5UWTNPRGs2UTBSRlJrZElTVXBUVkZWV1YxaFpXbU5rWldabmFHbHFjM1IxZG5kNGVYcUNnNFNGaG9lSWlZcVNrNVNWbHBlWW1acWlvNlNscHFlb3FhcXlzN1MxdHJlNHVickN3OFRGeHNmSXljclMwOVRWMXRmWTJkcmk0K1RsNXVmbzZlcnk4L1QxOXZmNCtmci8yZ0FNQXdFQUFoRURFUUEvQVBwR2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vcmhmSG5pMlhUaWRMc01wTTY1a2wvdWc5aDcxblVxS25IbVoxWVRDMU1YVlZLbnVYUEVIait5MGljMjFwSDlyblUvUGhzS3Z0bjFxdG9IeEdoMUc5UzExSzNXMWFRNFNSV3l1ZlE1NlZROEVlRXROMUhULzdRMUJsdTNZa2VWdTRUNis5WVBqYlJMWFJOZVNLd08yT1ZBK3duT3c1cmlsVXJKS3IwN0gwOUhCNWJVcVN3U1Q1MHZpOC82OGoyU2lxT2wzY1UxakFndVlwWlZpVVB0Y0U1d00xZXIwRTdxNThqT0xoSnhZVVVVVXlBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaXVMOFJlUDQ5TTFKTFRUb2x1bVJ2M3h6eDlCNzFFNmtZSzhqcHcyRnJZcWZKU1YyVzlSOGVhZHArdUxwN0t6cXJiWlpRZUl6OU85VCtKUERkcDRuMDVaWUdRWEFYTU15OUdIb2Zhc0h4YjRSR3FXZzFuU1lXam1kQkpMQVJndHhucDYxamVEdkdNbWl6aXgxRXMxbXpZNTZ4SC9EMnJrbFVhazRWZG5zZlFVc0hHVkNPSndEZnRJYnJyL1g1bVhwK3BhcDRPMWlSZHBWMU8yU0YvdXZWelR0QzFieHZkM0dvU3p4cjgyR2QrZ1BaUUIycnY4QXhKNGJ0UEUrbkxMQXlDNEM1aG1Yb3c5RDdWNXRwbXA2ajRPMXRra1JsMnR0bGhibzRybm5UOW5KUm5yRTlYRDR0WXlsS3BoMG8xN1dkLzYvcnFTNmg0UjE3UVg4K05HZFY1ODYyWW5IOVJYUWVDL0VQaUxVTHMyckt0MUJHRHZsbUJHempnWkg4cTduU3RVdGRaMDlMdXpiY2pqa2QxUG9hdHBGSEZ1OHRGVGNkeDJqR1Q2MTFRdzZqSlNoTFE4TEU1dk9yU2xSeE5KT2EwdjIvcjFIVVVVVjJIendVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGQk9PdFllcDZsYWFuRGNhVHAycVJSWDhpRUp0Yk9ENlZNcEtLTmFWS1ZTVmx0MWZaZDJjNTQxOGErUUgwM1NaTXk5SlpsUDNmWWU5Yzk0RE9sTnI0T3JITTNXRGY5M2Q3KzlkTDRXOEFpMmtlNjErTkpwY2tMQ1R1WDZuMXJuL0dIZzZYUTV6ZTZlR2V5WnNqSFdJK2g5dlExNTAxVnVxc2w4ajdQQzFNQnl5d0ZHVm0xOFhkbnJkY0o0MThGQzdWOVMwbU1DY0RNc1MveCs0OTZiNEo4YWk0Vk5NMWFURW9HSXBtUDN2WTEzdGRmdVlpQjg3L3RPVTRuei9CbzhtOEhlTVpORm5GanFKWnJObXh6MWlQK0h0WGRhOTRhc1BGRnJGTDVnU1RBS1hFWXpsZjYxbWVJL0FFR3I2Z2wxWlNMYXM3ZnZ4amdqMUE5YTZuVHJDSFROUGhzN1lFUnhMdEdUa24zTlJTcHpTZE9wcWpxeDJNdzhwUXhXRmJqVWU2L3IrbU4wdlRMYlI5UGpzN0pOa1NmbXg3aytwcTNSUlhVa2tySThHVXBUazVTZDJ3b29vcGtoUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlIwck50UEVHbTN1cVM2ZmIzS3ZjeGpKWDE5Y0h2aWsybHVYR25PYWJpcjIzT1QrSW5pT2ExWk5Jc1hLUElvYVpsNE9EMFduK0d2aDlGYnJCZmFySzdYSEVnampiQVU5ZVQzTlpIeEowbWVEV2wxSkF4aG1VQXNCOTFoVk52aUxyWnNrZ1JvVVpRQjVvVExIODY4MlU0cXEzVjZiSDJWSERWNTRDbkhBdExtK0o5Ym5yMlFPcHBrc1VjOExSVElyeHVNTXJESUlyeEIzOFFha0d1bU45T29HNHlEY1FPK2E2dndENHJ1cGI5ZEsxR1ZwVmtCOGwzT1NDTzJhM2hpb3lseXRXdWVaaU1qcTBLVHF3bXBPTzZYUXpQR0hnNlhSSmpmYWNHYXpaczhkWWo2ZlQzcnAvaC80anU5V3RwTE84amFRMnlqRnhqZ2pzRDcxMk1zU1RSTkZNZ2RIR0dWaGtFVkJZYWRhYVpiQ0N4Z1dHTUhPRkhVK3BxbzBPU3B6UmVuWXdyWm9zUmcvWTE0M210bVdhS0tLNmp4QW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLNVA0Z2F4ZDZWb3NhMldVTnc1UnBSL0NNZnpOUk9haEZ5WjBZYWhMRTFvMG83czZRVDIxOUhORERPa21NbzRqY0VyK1hTdkkvRW5oMjk4TGFvdDFiU1NHQXZ1aG5VOHFmUW4xL25XYnBPclgyZzMwZDliTWNQOEFlVW41WkJua0d2WE5QMURUZkYyaU44cXlJNDJ5d3QxUStuLzE2NHVhT0pWdHBJK2w5ald5V3B6cjM2VXRHWnZoYnhUYStKN1A3RnFTUi9iRlg1NDJBMnpBZnhBZnpGYTBQaGJSSUp2TmkweTNEOWlWeml2TVBFZmh5ODhLNmtsemFPLzJmZnVoblU4b2ZRKzlkNTRTOFhSZUliVTJ0MHdoMUJWNUE0OHdmM2w5L1VmNUYwcWwzeVZWcWpueDJEZE9uOWF3VW43T1c2VDIvd0NCK1J0NmxxZG5vdGcwOTA2eFJxUGxVY2J2WUN2TWZCVm5KcWZqVDdaREhzZ2hkcG13T0Z6bkMvcldwZGZEN1dOUTFoamU2bDV0dHUrV2FSaXo3ZlRIclhjYU5vbHBvZGtMZXlUQTZzeDZzZmVueXpxelRrckpFcXRoc0JocHdwVDU1eld2WkwvTTBLS0tLN0Q1d0tLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpdUc4YytNSmRNa09tYWF4UzQyZ3lTaitBSDA5NnpxVkkwNDh6T3JDWVdwaTZxcFU5enVheWZFMmtMcldnWEZxUis4Mjc0ajZNT2xlWTZYNHoxelNHVnBaR3VZSE9kcytTRDlEWGQ2TDQrMHJWQXNkdzMyT2M4YlpEOHBQczFZeHIwNnE1WG9lbld5ckdZS2Fxd1hNbHJkZjVIRWVGWUxmVnZ0R2dhbDhqUGw3ZHoxamtIVWZqNmUxVmdkVjhENi8zVmxQSS9nbVdyM2pHemJRZkZrV3BXSHl4ek1KNDJROGJzOGpqL1BOZDdkV05oNHo4T3d5T0IrOFRkSElPc2JkeCtkY3NhYmxlSytLSjd0Zkd4cGN0YVN2UnFyVmRuMS9yeUpOUDFEVGZGMmlOOHF5STQyeXd0MVErbi8xNjRvL0Q3VTdUeE5FTlBsS1dvYnpGdVEyR2pBUFQ2MDN3NTRkMS9TUEY0aWdEUnd4a2VkS1JtTjAvcWZTdlVhNkl4OXZHOVJXYVBHclYzbGxWeHdzMUtFMWUyOXIvci9URVVFS0FUa2djazk2V2lpdXcrZUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vcmtQSHV2NmpvMXJDbW5veUNYNzF4ak8zMit0Uk9haEhtWjBZYkR6eE5WVW9iczYrdVo4WGVFb3ZFRnQ1MEdJNzZOZmtmczQvdW1vL0NIakNMWElCYlhaRWQ4ZzVIUVNEMUh2WFZWUHVWb2VSczFpTXV4SGFTL3I1cG5pZWxhaStoMzBsaHJOb0pyVXR0bnQ1UjkzM0hvZmNWMGQ5OFA3WFVyUVgvQUladWcwY2czTEZJZVBvRDIvR3VqOFhlRVlkZnRqTmJoWTc2TWZJL1p4L2ROY0g0ZDhRM3ZoUFZIdGJ4SDhqZHRtaGJxcDlSWEE0S20rU3BySG96NnVuaVo0eW45WXdiNWFpK0tQUi8xMytSbGFuYjZ0cDhZc2RUU1pJMGJLTEp5b09PcW4vQ3UzK0Yrb1R5VzkxWXVqdERFUTZQMlVucXY5YTdOZnNHdTZhcmxZN3EybEdRR0dSLyt1cE5QMDIwMHUxRnZZUUxERU9jS09wOVQ2MXZUdzdoTlNVdER5OFpuRWNSaFpVS2xPMHIvSy9mMUxORkZGZHA4MEZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSVWNseERDY1N5eG9mOEFhWUNnYVRleHlQaS94ck5vT29SV2xuQUdmaDVHa0J3UjZDdG14dnRNOFg2R3hDaVNOeHRsaWI3MGJmNTZHanhCNGZ0UEVlbjdKTm9rQXpGTXZKVS80VjVaQlBxdmduWHp3VWRUaGxQM0psL3cvbFhGVXFUcHp2TFdMUHBNSmhjUGpjTW8wUGRyUjE5ZjYvQW44UitITHp3cnFTejJ6UDVHN01NeTlWUG9mZXU2OEgrTVk5Y2hXMXZHV08rUWZRU2oxSHY3VnBXTjlwbmkvUTJJVVNSdU5zc1RmZWpiL1BRMTVsNGo4T1huaGJVbG50MmMyNWJkRE12VlQ2SDNyTnAwSDdTbnJGblpDY016aDlWeFh1MW83UDhBcit1cVBWZGMxeTAwSFQydXJ4dlpJeDk1ejZDdVhheDB6NGk2ZXQ1RUdzcnlGZ2twQTNFRDA3WkhvZjhBNjljdFlXZXIrUE5aVnJxWmpGRUFKSmlQbGpYMEE5VFhxK21hWmE2UllSMmRqR0k0a0g0c2U1SjdtdFl5ZGR1NjkwOCt2VHA1WENLaEw5L3ZkYkpkdlA4QXI1bW1hYmI2VHAwVm5acnRpakhHZXBQY24zcTNSUlhXa2tySThDVXBUazVTZDJ3b29vcGtoUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJXTDRzL3RFK0haLzdIL3dCZGpuSFhiM3g3MU1ueXBzMW8wL2ExSXd2YTczWnovaTd4eWJTUnRPMFFoN2svSzhvR2Ruc1BldVhIZy94TnFjSnZaWVhkbUc0Q1dVQjIvQTFWOEthalo2WDRnU2JWWVBNWE8zYzNXTnZYRmUweFN4endyTEM0ZU54bFdVNUJGY0VJL1dieW0va2ZWNHFzOG1VYVdIZ3RkNVBxZU1XR3M2MTRUMUF3eWViR0ZQejI4dWRyRC9QY1Y2RE5iNmI0OThQckttRW1VY04vRkUzcDlLdCtMZkRzR3ZhVEo4b0YxQ3BhR1FEbjZIMk5jSDhPdFJscy9FdjJNaytWY3FWWlNmNGh5RC9PaEowcCt6bHJGaEtwREg0ZDR5aXVXclQxZHV2OWY4QXpZSjlWOEU2K2VDanFjTXArNU12K0g4cTlVc0w3VGZGdWg3L0xFa01ueXlSUDFSdlQvd0N2VHRmOE8yZmlDMEVWMkNycWNwS28rWmF0YVhwZHJvK25wWjJLYklrOWVySDFQdlc5S2pLbkpyN0o1dU96Q2hpNlVLbHJWbDFYOWZkMkg2ZnAxcnBWbXRyWVFyREV2TzBkejZrOXpWbWlpdWxKSldSNGNwU2szS1R1MkZGRkZNa0tLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLSzV6eHhkYWphZUhKSk5MVmljNGxkZXFKM1ArZWxUT1hMRnlOcUZGMTZzYWFkcnUycGkrTS9HWmpadEwwWjkwemZMSktuTzMySHZXNzRNdE5UczlCUk5XbExzeDNScTNMSXZvVFhudmdhNjB5RFh3MnJMbDI0aGtjL0tyZTlkdjR2OEFHTVdody9ackZsbHY1QndPb2pIcWY2Q3VLblVUdldtL2tmU1kzQ1NoeVpmaDZlK3JrK3Z6NkpHYjQxOEZDNVY5UzBtTUNZRE1zS2o3M3VQZXNMd2Y0d2wwU2NXV29GbXMyYkhQV0kvNTdWNkg0WTFDOTFQUW9iblVvZkttYjJ4dkg5N0hhdVo4YStDaGNxK3BhVEdCTUJtV0ZSOTczSHZSVXB0ZnZxUVlURndrbmwrTzFXeWZaK3Y1TTZqV3RkczlMMEo3NTVWWlhUOXlGT2ZNSkhHSzRENGM2VkplYTgrcHlKKzVnQnd4N3VheU5BMEhVZkUxNGxydmtXMnQrSGtmSldJWjVBSHFmU3ZZZE8wNjIwcXdqdExLUFpGR09QVW4xUHFhY09hdk5UYXNrVGlmWlpWUW5ocWN1YWM5L0pmNWxxaWlpdTQrWENpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vNmRhcjIxOWEzalNDMW5qbE1UYlhDTm5hZlEwWEdvdHE2UllvSUJCQkdRZW9ORkZBanpEeHQ0Sk5pWDFQU0k4Mng1bGhVZjZyM0grei9MNmRNUHduL1pzL2lLSTY0N0ZTZmtMSEtzM1lNYTlySUJCQkdRZW9OZVllTnZCSnNTK3A2UkhtMlBNc0tqL0FGWHVQOW4rWDA2ZWRXb2NqOXBCZkkrd3kzTlByRlA2cGlKV2JWbEw5UFg4L1U3L0FGYldMUFE5Tk4xZHVGUURDSXZWejJBcm5QQi9pclUvRUdyWGFUMm8reGdibGtVWThvOWxKNzUvT3VMMGJTOVY4WVhzTUV0eEkxdGJLRmFaemtSTDZEMUpyMXpUTk10ZElzSTdPeGpFY1NEOFdQY2s5elcxT2M2MGxKYVJYNG5uNHZENGJMNkxveTkrckwveVZmNS8xdHZaamlqaUJFU0tnSnlRb3hrMDZpaXVzK2Z2Y0tLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lqcDFybWJ2eDdvOW5xMzJLVjNJQncweWpLcWZTcGxPTWZpWnZSdzlXdTJxVVc3ZGpjMU8wa3Z0TW50b1ptZ2VSQ3F5TDFVMTQ3Rk5xM2d2eEEyNEZaVlB6cVQ4c3kvMUh2MnIyVzB2YmErZ0Uxbk1rMFo2TWpaclA4UmVIYlh4RFlHR2NiSmw1aWxBNVEvNGUxWVZxVHFKU2c5VWVwbHVPamhKU28xNDNoTGZUVkV1aGE3YWE5cDYzTm8zUFNTTS9lUStoclNyeE9HYlZmQlhpQWdncElod3luN2t5ZjRmeXIwZ2VPTktQaDcrMVBNNSs3OW56OCsvKzdqK3RLbGlGSldubzBWajhwblNtcFlmM29TMnQrWC9CT2tvSUJCQkdRZW9OZWRlRTlkMS9YdkZFbHgxc3YrV3FIN2tTOWdQZXZSYTJwMUZVVjBlZGpNSlBCMUZUbTAzYStuUWh0clMzc29mS3RJVWhqem5haTRHYW1vb3JUWTVHMjNkaFJSUlFJS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLNEh4cjQxOG5mcG1rUG1VL0xMS3Y4UHNQZXM2bFNOT04yZGVFd2xYRjFWVHByL2dIYVhrWTFEVEo0YmViYVpVWkJJaCs2ZWxlSHc2WThtdG5UYm1VUVRHUXg3bkJJM1o3L1gxcjB6d0JvMS9wbW15VDM4cnF0eVE2d04vRC90SDBKckErSldqRzExQ0hWcmZoWnZsa3gyY2REK1g4cTQ4UkZ6cHFvMXNmUjVUVWpoY1hVd2taM1QyZm1qQm5zOWY4SVhubUR6YmZuaVdNNWpmQi9MOC9XdW8wVDRtS1FzV3R3N1QwOCtJZnpIK0ZTeStQYlgvaERZak9zZHpmeUlZbWhZWkdSeHViUGIrZGMzb1hndS84Ulc4MTd1UzJpT1RHV1hBa2IyQTZEM3JKYzBKSlVYZnlPNlNwWW1qS1dZd1VMTzNOMzlPdjVub1dxNmJwWGpQU2YzTThjaktNeFRSbkpRKy8rRmVlV1BnVFZyblhHc2JpSXdSUm45NWNFZkx0OVY5U2V3cTNvL2hIeEpaNitzVVJrczFVNWU1UnNydC9xZmF2V0FNQUFuUHY2MXVxYXIrOU5XYS9FOHFwaTU1V25TdzFSVGpKYWYzZjAvcllxYVpwbHJwRmhIWjJNWWppUWZpeDdrbnVhdDBVVjJwSkt5UG1wU2xPVGxKM2JDaWlpbVNGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZjdnJmanpTOUh1RGJvR3U1MSs4c1I0WDJKcVpUakJYa3plaGg2dUlseVVvM1psK04vR0wycnZwT2xraWY3c3NnL2h6Mkh2WERYMmlhcHBNRnZlM2NEeHJOODZPZWNIMzlEM3J1OUwxN3czNGsxK0dlNnN6YjZndkVaa09WYzl2cVIyelhaM3RsYjZoWnlXdDVHSklwQmhsTmNUcGUzdkxtOUQ2V0dQL3N0UW9leXQvTmZkK245ZVJ5L2czeGttc1JMWlg3QkwxQmdFL3dETFVmNDF2NjVwY2VzYU5jV1VnLzFpL0tmUmgwUDUxNVQ0bDhOWGZoZlVGbXQyWnJjdG1HWmVxbjBQdlhjZURmR1NhekV0bmZzRXZVR0FUMGxIK05WU3F0L3VxdTVqanNER0tXT3dUdkhmVHAvWDRIbldpV1ZyL3dBSlJCWjZ5Q3NRbDJTTHV4ejJCUHBtdmNZNDBoaldPSlFpS01LcWpBQTlLNFh4TjRIdU5VOFRSWFZpVmlobTVuZlAzQ080SGNtdTVpajhxRkk4bHRpaGNucWNWV0dwdW01Sm94em5GMDhYR2xVaExXMnE3TWZSUlJYV2ZQaFJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVWelYxNDUwdTExNWROa1pzWjJ2TVB1bzNvYW1VNHgrSm05SEQxYTdhcFJ2YlV5ZkhmaStTeFo5SzA4bEp5UDNzdjkwSHNQZXFYaEx3UFlhbnBpNmhxVXBuTXVjSkcrTnYxUHJYUStMUENjUGlDMSswMnUxYnhWeWpqcElQUTE1L29PdlgzaExWWGltUnZLM2Jab0cvbVBldUNwN3RhOVhWZEQ2ckJwVnN2ZFBBdmxxTGZ1L24rWDNDZUx2RHYvQUFqZXF4aTNkakJLTjhURThnZzlLOVU4TjNzbW8rSExLNm5KTWp4amNUM0k0elhtMnBYbDM0KzhTUlEyY1JTQ1A1VTNmd0wzWTE2dFkya2RoWVEya1AzSVVDRDhLdkR4WHRKU2o4SnpaeFVsOVZvMDYvOEFGM2ZwNStvWGxuQmYya2x0ZHhpU0tRWVpUWG04bnc4MUdEeEpHdGhMdHROMjhYT2VZeDZZOWE5UG9ycHFVWTFMY3g0MkV6Q3ZnMUpVM28rai9NUkYyUnF1UzIwQVpZOG1sb29yVTRBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0s1YlV2SHVtNmZyQ1dKRFNqZGlXVkR3bitOUktjWUs4bWIwTVBWeEVuR2xHN1IxTmVjK052QlJEU2FwcEtFNU82YUZmNWl2UlVkWkVEb2Nxd3lENjBwR1JnOGlsVXB4cVJzemJCNHlyZzZ2dEtmelhjOHc4RmVOVFlzbW02czVOc1RpT1Z2K1dmc2ZiK1ZkUDRzOEp3ZUlMWDdUYTdWdkZYS09Pa2c5RFdENDI4RTdTK3A2Ukh4OTZXRlIrb3F0NEs4YW14Wk5OMVp5YlluRWNyZjhzL1krMzhxNG95NWYzTmJib3o2T3JTVlpMTU12MGt2aWovWDlNeGRBMXE2OEphMDZ6eEVLVHNuaVljNDlxOWhzTCszMUt6anVyT1FTUlNESUk3ZXhyRThSK0VMUHhINWN5eUNDWUVmdmtHZHkvMXJZMHZUTGJTTk9qczdOTnNVWS9FbnVUNzF2UXB6cHR4ZndubVpuaThOaklScXhWcW5YdC9YWXQwVVVWMUhoQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVWako0bDBtODFXVFNWdU16WUlQWUgxQVByVXVTVzVyVHBUcVhjVTNiZnlPYThaK016RVcwdlJuM1ROOHNrcTg3ZlllOWNUcTJnWHVrV2xyY1h5N1RkQXNGUFVZOWZ6cjByUmZBbGxwV3F5M2traHVmbXpDcmo3bjE5VFVQeEtzdnRIaGxiZ0Q1cmFVTitCNFA5SzRLdEtjNHVjOStpUHE4RGo4UGg2MVBEWVplNi9pYjNiZi9CTlh3ZmUvYi9DbGxLVGxsVHkyK3E4VnQxd253dXZmTTB5N3N5ZVlwQTRHZXhIL0FOYXV0MWZXYkxSTEw3VHFFdmxwbmFvQXl6SDBBNzExMHBwMGxKbmc0L0RTaGpaMG9LN3ZvdlhVdkVaR0R5SzRiWC9oMm1vYXFsenAwcVcwY2pablVqcDdqM3JzN084Z3Y3U081dEpCSkZJTXF3cWFxbkNGUldaamg4Vlh3ZFJ1bTdQWmxleHM0OVBzSWJTSGQ1Y0tCVkxISk5XS0tLMFdtaHlTazVOdDdzS0tLS0JCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJYRytNL0dGem9WM0ZhMk1RM2tCMmtkY2pIb0tpYzQwNDgwanB3dUZxWXFxcVZMYzdGbERxVmJvUmcxNUY0dDhLWEhoMjkrMjJUTzlvejVTUUg1b205Q2Y2MTZSNGU4UTJ2aUN3RTBCQ3lxUDNrUlBLbi9BQXJTbmdpdXJkNExpTlpJcEJ0WkdHUVJXVlNuR3ZDNitSMjRQRjFzc3J1TWw1TkhJZURQR2E2cEd0aHFUaGJ0UmhYUEFrSCtOZEhyMW4vYUdnWHR0M2toYmJ4M3hrZnJYbUhpendwUDRidkJlV0pjMmJQbU9RSG1KdlEvME5kdDRJOFJ0cjJsdkRkNE4xYmdCei9mWHNheXBWRzI2VlRjNzhmaEtjWXh4K0RmdTN1MTJad1BnM1hvdkQycVhFOTJHTVRRbFNxOVdZSElGV1lJTlYrSVhpQXl6TVk3ZU0vTTM4RUNlZzlTZjFxN2RmRHEvbThTdkhFVld3a2N2NStmdXJucGp1YTlHMHpUTFhTTENPenNZeEhFZy9GajNKUGMxbFNvemw3ay9oWDRuZmpzeXd0Riszdyt0V1MzL2xYK2Y5ZXE2YnAxdHBPbnhXZGtteUdNWUhjazl5VDZtclZGRmVpa2tySStObEtVNU9VbmRzS0tLS1pJVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVWd1hqTHhtMGJuU3RFWXRPeDJ5U0p6dDloNzFuVXFScHh1enJ3bUVxNHVwN09uOS9ZNm04OFM2UFlYSGtYZC9ESEtEZ3JuT1ByanBVZXI2VHAvaWpTZHBaSkFSbUtaRG5hZnJYbjYvRG5WSk5LYThrbVFYQlhmNUJ5V1A0K3RXdmgzclM2ZTE3QnFGd3NOcXFoZ1pHd0ZiT01EL1BhdVpWcE9YTFVqWk05dVdYVXFkSjE4RlZjcHdldi9BQVA2Wmd1bXFlQzllQkdVZER3ZjRaRnIxYnc5NGh0ZkVGZ0pvQ0ZsVWZ2SWllVlArRlY5UXRkSDhZNmEwVVZ4Rk15L2NraklMSWE4enZkRTEzd3ZmbDRST2dIM1o0TTRZZmgvS3MxellkM2pyRm5WTDJPYlE1YXZ1Vm85K3Y4QVg0SHAzakNlMWc4TFh2MndyaDR5cUtlcGJ0ajhhNC80VzIwaDFHOXVjSHlsaUNFKzVPZjZWazJtbGVJL0YxMm4yeHAyaVhyTE53cWoySCtGZXA2THBGdm9tbVIyZHFPRjVadjd6ZHpWd3ZXcXFwYXlSellqMmVYWUtXRjUrYWMzcmJaRitpaWl1NCtZQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29wamdTUXNvUDNnUmtVRE15MjhSYWZmNnpOcFZ2S3pUeG9XTEwwOUNBZld2TXZGUGhpNjhPYWg5cXQyZDdabjNSeWpxaDlDZjYxSjROZHJIeDlIQ3h5UzhrVEVucjEvcUs5WnU3U0crdFh0N3FNU1JTRERLUlhDbDlacDNlalI5UE9mOEFZMktVYWVzSkpYOHp6cVA0bFNEdzYwTXNKZlVjYkZreDhwR1B2SDM5cXp0RThBYWhyRm45cm5sVzFqZmxBNjVMZStPd3F0NHI4S1QrSGJ6em9RWkxOMnlqL3dCejJOZFZvSHhDdFRvN3JxNTJYTnVueTdSL3JoMng2R3NZKzlQbHJ2WTlLcmVoaHZiWlhHL085ZXJYbGIrckhHUkcvd0RDSGljSVRpV0Z3R0NuS3lLZjhSWHRpTUpZbGJIREFIQnJ5ZlRMUzY4Y2VMM3ZwMDIyeU9Ha0lIQ3FPaS9VNHIxb0RBQUhRVnZoVTBwTmJkRHljK3FLVXFhbGIyaVh2V0RwMG9vb3J0UG13b29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS09uV3M2RHhCcFZ6Zk5adzMwVFhDbkJUZGpuMjlhVGFXNWNhYzVwdUt2WXErTFUxSi9EMHcwYzRtL2l3Zm0yOThlOWVmK0UvR1UraVhIMlRVUzhsb3pZTzdsb3o2MTYzWENlTmZCUXUxZlV0Smp4TU9aWWxIMy9jZTljdGVFNyswZzlqM2NyeE9HY0hoTVRGV2wxOC82Mk9WMUc3aDB6NGdOZnhONWtBdUZuQmovaVU4OGZuMHIwSzA4ZWFCZDRCdS9JWTlwVUkvWHBYbEdtTFl0cUN3Nng1cVFrN1M2SERSL25YWVRmREF5eENYVE5VU1ZHR1U4eE1aSDFGY3RHZFhWd1Z6M014dytDZkpERlNhYVZrK2ovQm5kdE5wbXMyandlZEJkUlNEQlZYQnpYbjl6OE5MczY0STdXVlJwN25KbFkvTWc5TWR6VmEyK0hPdHJxQ0pJOGNVT2ZtblNUb1BZZGMxNm5hd0MxdFlvRlptRWFoUXpISk9PNU5kS2o3ZitKRzFqeEoxbGxidGc2M09wZExiZWZxUTZacGxycEZoSFoyTVlqaVFmaXg3a251YXQwVVYxcEpLeVBBbEtVNU9VbmRzS0tLS1pJVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVWbndhOXBsenFUMkVGM0c5eW5WQWFUYVc1Y2FjNXB1S3ZiY3FlTC90di9DTDNiYWMyMlZWeWNkZHZmSDRWNDdZYWRlYWxKTDloUnBaWWw4d3FwK1lqUFVWNzR5aDFLc01nakJGZVBhakRONE44YkNXRFBscS9tUi83U0hxUDVpdURGdzFVbnNmVlpCaVdxZFNoQkxuM1huNUR0SThiNnhva24yZTczWE1TSERSVDVETHowQjZpdlFORjhaNlRySVZGbSt6em4vbGxMd1Q5RDNyRThjYWhvRXVqeHlTUVIzRjVjUjdvR1RobEJIM2lmNkd1SnMvQzJyMyttRy90TFJuaHpnWSs4M3VCM0ZRcWxTbExsaStaSFRMQzRQSDBmYjFZK3lsZTE5RW0vMS9BN2J4cjRLRjRyNmxwS0FUQWJwWWwvajl4NzFUK0crcGFtYnFUVDJqYVN6akJMTTMvTEkrbi8xcWk4RGFqNGlrMVFXV1hrdEl6KysrMEEvdXg3SHJuMnIwaUtDS0FNSVkwakRNV08xY1pQclcxT0NxU1ZXT2g1K014RlRDMFhnYTlwOW4yL3JvU1VVVVYybnpJVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZJR0RaMmtIQndjR2dEQThiM2Q1WmVGNTViQWxYeUE3RHFxbnFhOGhnVzZoakdvMnp0Kzdrd3pxZVVidG42K3RlOFhkckhlMmN0dE1BMGNxRldCOTY4azBZalFQRmsrbGFvZ2Exbll3VEszM1NEOTFxOC9GUWJtbTNvZlg1SGlJeHcxU0VZM2t0YmQwZHY0UDhZUmE1QUxhN1lKZklPUjJrSHFQZW8vaUhvdjlvNkg5c2lYOTlhZk45VTdqK3RjYjRtOE0zWGhmVUZ2TEJuTm9XekhLcDVqUG9mOEFHdTA4SitMWWZFRnI5aXY5cTNZWGF3UFNVZjQxVVo4NmRHcnVZMThNc1BPT1k0TFdHN1hidjh2eU9GOEdhTGJhOXJnaXY1djNjS2IvQUNzOHlZN2ZTdlpJNDBoaldPSlFpS01LcWpBQTlLOHgwN3d0cWVuK1B3dGlqUlcwTW5tZWVSOHZsbnQ3bnRpdlVLckN4NVl0TmFuUG50WlZxMEpRbmVMVjB1My9BQTRnVUxuQUF5Y25BNjB0RkZkaDg4RkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUJ4ZnhBOFNYV2t3eDJWa3JSdmNLU1p2UWVnOTY0RFRybldiS002aHBzODJ4Vy9lRkczYlQvdEQvQUQrbGV4NnpvMXJybW50YTNpWkhWSEE1UStvcnllNHQ5VThFYTlrZE94SXlreWVocnpjVEdTbnpONmZrZlo1TldvVHd6b1FpdWZxbjlyK3Z3T20wYjRtZ2xZdGJnMm5wNTBRL210VWZIME5wcUMyK3VhVFBITWh4SEtZenlEMVVudlduSG9XZ2VOdFBONXA0K3czbi9MUlVIM1c5MTdqM3JsTlo4SGF2b2djdEdaN1k5Wklja2ZpTzFUVWRYMmRwZTh1NXJoSTRKWXBTcFAyYzFvNHZaLzEwL0k5RThMMzhQaWJ3b3NkNnF5c3ErVE9oNXpqditJcmw1Zmg1cUZ0NGxpT21UYkxQZHZFKzc1b2hucDduMHFINFpQZXJyVTZSUnMxcTBmNzVqMFVqcCtOZXBWMFU0eHIwMDVibzhyRjFxdVY0dXBUb05jc3RiYnBYL1Zma0lvMm9BU1d3TVpQVTB0RkZkaDg0RkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZGRkZBQlJSUlFBVVVVVUFGRkZGQUJSUlJRQVVVVVVBRkZGRkFCUlJSUUFVVVVVQUZaK3M2TmE2NXA3V3Q0bVIxUndPVVBxSzBLS1RTYXN5NFRsVGtwd2RtanhlYUhWZkEzaUFNaEl3ZmxiK0NaUFN2Vk5BMXkyOFFhWXQxYjhFZkxKR2VxTjZWTHJHaldtdVdMV3Q2bVIxVng5NUQ2aW42WHBkcm85Z2xwWXg3SWwvTmo2azl6WFBTcFNwemFUOTA5akhZK2pqS0VaVGphcXV2Um9zUTI4TnVwVzNpU0lFNUlSUU1uMXFTaWl1azhWdHQzWVVVVVVDQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQUNpaWlnQW9vb29BS0tLS0FDaWlpZ0Fvb29vQUtLS0tBQ2lpaWdBb29vb0FLS0tLQVAvL1onIi8+CgogIDx4c2w6dmFyaWFibGUgbmFtZT0iaW1nV2F0ZXJtYXJrQ29udGVudCIKICAgIHNlbGVjdD0iJy85ai80QUFRU2taSlJnQUJBZ0FBWkFCa0FBRC83QUFSUkhWamEza0FBUUFFQUFBQVBBQUEvKzRBRGtGa2IySmxBR1RBQUFBQUFmL2JBSVFBQmdRRUJBVUVCZ1VGQmdrR0JRWUpDd2dHQmdnTERBb0tDd29LREJBTURBd01EQXdRREE0UEVBOE9EQk1URkJRVEV4d2JHeHNjSHg4Zkh4OGZIeDhmSHdFSEJ3Y05EQTBZRUJBWUdoVVJGUm9mSHg4Zkh4OGZIeDhmSHg4Zkh4OGZIeDhmSHg4Zkh4OGZIeDhmSHg4Zkh4OGZIeDhmSHg4Zkh4OGZIeDhmSHg4Zi84QUFFUWdBcndENkF3RVJBQUlSQVFNUkFmL0VBSHNBQVFBREFRRUJBUUFBQUFBQUFBQUFBQUFEQkFVR0FnRUlBUUVCQVFBQUFBQUFBQUFBQUFBQUFBQUFBUUlRQUFJQ0FRSURCZ01HQmdNQkFBQUFBQUFCQWdNRUVRVWhNUkpCVVdGeEV3YWhJaktCa2RGaUl4U3h3ZUZDVW9KeU0wTVZFUUVCQVFFQkFRRUFBQUFBQUFBQUFBQUFBUkVDRWlFeC85b0FEQU1CQUFJUkF4RUFQd0Q5VWdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWd6TXlqRG9kMTB0SXJrbHpiN2tCSHRlZXM3RVYvVDB2cWxGeDU2YVBoOE5BdGkyRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQkZrWmVOaktMdnNWYWsrbUxsMnNEUDhBY2VPcjlybFpIaTZtckl0ZHE1UDRNTEZEMm5reGk3NkpOTFhTeU92M1ArUkl2VHBFMDFxdUtLeUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBREUzelk3OHVieUtiSE9hV25vemZEVDhyN0NOU3NTalB6OEJ6eHJFM1ZKT05sRm11bWo0UFR1QzRod01DM050ZFZVb1JtbDFKVGJXdmx3WUxWNSsxOXpTLzgzNGRUL0FZZWw3YWZiZGxWM3E1alRVZnByaTlVMytidzhBbHJvQ3NnQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQlh6ZHZ4TXlIVGZEVnI2WnJoSmVUQnJtTncyRE13MzZ0T3R0UzRxY2ZxajVwZnhSRzVXL3N2L3dCTDlvbm5QVnZUMDAvcjAvTVZtdEFJQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQXJiam1mczhTZC9RN0hIZ2t1OTkvZ0ZqbEs5NjNkM1NuWGJLVXBOdHdTNm82ZUVYcm9pTll1MGU3TW1QQyttTSs5eGJpL2pxTlR5MHNmM050bHVpbTVVdjg2NGZmSFVxWTBhY3JHdld0TnNiRitWcGhFZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUI4bkNNNHVFa3BSa3RKSjhtbUJ4MjdiZGR0bVhHMmx0Vk45Vk0xelRYOXI4aU55Nm56dDd4Y25DaW5qUWxtUzRUbTRyNWZHTDU4UWtqMWdlMkxiOGYxTWlib2xML3JocHE5TytTNERDMW9iWDdkcnhMdld2a3JaeGY2V2kwUzhYNGxTMXNoQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFoeThXbkt4NTBXcldFbHo3VSt4b0RqYk1iSzI3Y1l3Y0ZPMkVsS3RhYXFhMTRhTHhJMjdhcVVwVnhsT0xoSnBPVUhvMm4zY0NzUFFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBR1p2dTZXNFZLVk1HN0xPVnJXc1kvMUN5SzIyKzVxYmRLOHhLcXprckY5RDgrNGkyTnhOTkpwNnA4VTBWa2JTVGJlaVhGdDh0QUttSnV1RGwyU3JwdFRuRnRkTDROcGRxMTVvTGl4S21xZGtMWlFUc3IxNkpOY1ZyejBDUFlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUQ1T0VMSU9FNHFVSmNIRnJWTURBM0wyeEY2MllMMGZOMHlmRC9BRmY0a3hxZE12RTNMY2RydGRVaytsUDVxTE9YMmR3WE5XTS9kOHZkWnd4Y2F0eGhMVFdDZXJrL0Y5eUJKamIyalpxc0d0VGxwUEprdm5uM2VFU3MydEVJQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQTU3ZFBjRjA3ZjJtM0p1VGZTN1V0VzMzUS9FalVpZmFOdDNiSGw2bCtUcEdUMW5UTFd6WHpiYTBma0MxcFBjTUJXZW04aXRUL0FNZXVPdjhBRXJPTEFGZk4yL0V6SytpK0NscDlNbHdrdkpoWlVXMjdUallFWDZmeldTK3F5WFBUdUJhdWhBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRlhkSGF0dXlIVnI2blE5Tk9majhBc2Nucys0MVlHUksyeXIxRzQ5TVdubzE5NUdyRW1idkc0YmhaNlVFNDF5NFJwcjFiZm5weFlNZWNqWXMvSHhIbFc5RVl4MDZvZFh6TFY2ZVh4QnJYOXFaTjlsRjFVMjVWMU9QcHQ5bXV1cStBaWROMHJJQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQVoxK3diWGRZN0pWZE1uejZHNHAvWUYxRmJmcyt6ZkxHcHh0YTRkTVc1TmY4QUtYNGcrMWs1T1p1RzkzcWlpSFRURjY5UFl2elRaR3Z4MFcyN2ZWZzR5cGh4Zk9jLzhwTXJOcTBFQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBTjZMWHVBNWpjUGM5LzdqVERhalREaHJKYTlmang1SWpVajNSN3RtdEZrVUo5OHEzcDhIci9BQkdubHBZL3VMYTd1RHNkVXU2eGFmRmFyNGxUR2hYZFZiSHFxbkdjZStMVFh3Q1BPUmpVWkZicnZncklQc2Y4Z1B0TkZOTUZYVEJWd1hLTVZvZ1BZQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFEbWZjZXorbko1dEVmMDVQOEFXaXV4dis3eVpHcFVlRG5iVmRpeWh1TlVYYlZINWJFdEpUWGRxdEgxQXNVc1Bick53eXBSeG9lbFNucTNKOVNpdkY5ckM2djArMmR3cnlvL3FxRmY5MXRjbXBKZVhEaU1UWFRWd1ZkY1lKdVhTdE9xVGJiODJ5c3ZRQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSXNyS294YVpYWFM2WVIrOXZ1WGlCbjdUdnJ6NzUxT2h4MDFjWnJpbEhzNnZFTFkxUWo1S01aUmNaSk9NbG8wK1RUQTQzZXRxbGc1R3NFM2oyUFd0OTM1V1J1VnYrM2I2N2R1akdGWHArbSttV2lla24va24yK0pXYTFBZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUNETnpjZkRvZDEwdEV2cGoyeWZjZ1k0M2N0eHljKzMxYk9GY2VFSUw2WS8xSTNJMmRoM2ZicTZZNDBvckhzN1p2Nlp2dmI3UHRDV09nNWxaQUlzbkdweWFaVTNSNm9TNXIrYUE5MVZWMVZ4cnJpb3dpdEl4WEpJRDBBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQm1icnNjTSt5Rm5xeWhLT2lhNXg2ZTNSZGpDeXJkVzM0ZGVMKzJqVkYwOXNXdGRYM3Z4Q2F3OXk5cnRhMjRMMVhOMHk1LzZ2OFNZMU9sSEIzalAyNmZwVFRsWEY2U3BzMVRYbHJ5QzJPc3hNbU9Uand2akdVSXpXcWpKYU1yQ1lBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRUdSZ1llUk9FN3Fvem5CNnhiNS9iM29HcHdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQi8vWiciLz4KCiAgPHhzbDp2YXJpYWJsZSBuYW1lPSJpbWdXYXRlcm1hcmsiIHNlbGVjdD0iY29uY2F0KCdkYXRhOmltYWdlL2pwZWc7YmFzZTY0LCcsJGltZ1dhdGVybWFya0NvbnRlbnQpIi8+CiAgPHhzbDp2YXJpYWJsZSBuYW1lPSJpbWdDYW5jZWxXYXRlcm1hcmsiCiAgICBzZWxlY3Q9ImNvbmNhdCgnZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwnLCRpbWdDYW5jZWxXYXRlcm1hcmtDb250ZW50KSIvPgogIDx4c2w6dGVtcGxhdGUgbWF0Y2g9Ii8iPgogICAgPGh0bWw+CiAgICAgIDxoZWFkPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9OSIvPgogICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgIDwhW0NEQVRBW3ZhciBRUkNvZGU7IWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShhKXt0aGlzLm1vZGU9Yy5NT0RFXzhCSVRfQllURSx0aGlzLmRhdGE9YSx0aGlzLnBhcnNlZERhdGE9W107Zm9yKHZhciBiPVtdLGQ9MCxlPXRoaXMuZGF0YS5sZW5ndGg7ZT5kO2QrKyl7dmFyIGY9dGhpcy5kYXRhLmNoYXJDb2RlQXQoZCk7Zj42NTUzNj8oYlswXT0yNDB8KDE4MzUwMDgmZik+Pj4xOCxiWzFdPTEyOHwoMjU4MDQ4JmYpPj4+MTIsYlsyXT0xMjh8KDQwMzImZik+Pj42LGJbM109MTI4fDYzJmYpOmY+MjA0OD8oYlswXT0yMjR8KDYxNDQwJmYpPj4+MTIsYlsxXT0xMjh8KDQwMzImZik+Pj42LGJbMl09MTI4fDYzJmYpOmY+MTI4PyhiWzBdPTE5MnwoMTk4NCZmKT4+PjYsYlsxXT0xMjh8NjMmZik6YlswXT1mLHRoaXMucGFyc2VkRGF0YT10aGlzLnBhcnNlZERhdGEuY29uY2F0KGIpfXRoaXMucGFyc2VkRGF0YS5sZW5ndGghPXRoaXMuZGF0YS5sZW5ndGgmJih0aGlzLnBhcnNlZERhdGEudW5zaGlmdCgxOTEpLHRoaXMucGFyc2VkRGF0YS51bnNoaWZ0KDE4NyksdGhpcy5wYXJzZWREYXRhLnVuc2hpZnQoMjM5KSl9ZnVuY3Rpb24gYihhLGIpe3RoaXMudHlwZU51bWJlcj1hLHRoaXMuZXJyb3JDb3JyZWN0TGV2ZWw9Yix0aGlzLm1vZHVsZXM9bnVsbCx0aGlzLm1vZHVsZUNvdW50PTAsdGhpcy5kYXRhQ2FjaGU9bnVsbCx0aGlzLmRhdGFMaXN0PVtdfWZ1bmN0aW9uIGkoYSxiKXtpZih2b2lkIDA9PWEubGVuZ3RoKXRocm93IG5ldyBFcnJvcihhLmxlbmd0aCsiLyIrYik7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aCYmMD09YVtjXTspYysrO3RoaXMubnVtPW5ldyBBcnJheShhLmxlbmd0aC1jK2IpO2Zvcih2YXIgZD0wO2Q8YS5sZW5ndGgtYztkKyspdGhpcy5udW1bZF09YVtkK2NdfWZ1bmN0aW9uIGooYSxiKXt0aGlzLnRvdGFsQ291bnQ9YSx0aGlzLmRhdGFDb3VudD1ifWZ1bmN0aW9uIGsoKXt0aGlzLmJ1ZmZlcj1bXSx0aGlzLmxlbmd0aD0wfWZ1bmN0aW9uIG0oKXtyZXR1cm4idW5kZWZpbmVkIiE9dHlwZW9mIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH1mdW5jdGlvbiBuKCl7dmFyIGE9ITEsYj1uYXZpZ2F0b3IudXNlckFnZW50O3JldHVybi9hbmRyb2lkL2kudGVzdChiKSYmKGE9ITAsYU1hdD1iLnRvU3RyaW5nKCkubWF0Y2goL2FuZHJvaWQgKFswLTldXC5bMC05XSkvaSksYU1hdCYmYU1hdFsxXSYmKGE9cGFyc2VGbG9hdChhTWF0WzFdKSkpLGF9ZnVuY3Rpb24gcihhLGIpe2Zvcih2YXIgYz0xLGU9cyhhKSxmPTAsZz1sLmxlbmd0aDtnPj1mO2YrKyl7dmFyIGg9MDtzd2l0Y2goYil7Y2FzZSBkLkw6aD1sW2ZdWzBdO2JyZWFrO2Nhc2UgZC5NOmg9bFtmXVsxXTticmVhaztjYXNlIGQuUTpoPWxbZl1bMl07YnJlYWs7Y2FzZSBkLkg6aD1sW2ZdWzNdfWlmKGg+PWUpYnJlYWs7YysrfWlmKGM+bC5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKCJUb28gbG9uZyBkYXRhIik7cmV0dXJuIGN9ZnVuY3Rpb24gcyhhKXt2YXIgYj1lbmNvZGVVUkkoYSkudG9TdHJpbmcoKS5yZXBsYWNlKC9cJVswLTlhLWZBLUZdezJ9L2csImEiKTtyZXR1cm4gYi5sZW5ndGgrKGIubGVuZ3RoIT1hPzM6MCl9YS5wcm90b3R5cGU9e2dldExlbmd0aDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcnNlZERhdGEubGVuZ3RofSx3cml0ZTpmdW5jdGlvbihhKXtmb3IodmFyIGI9MCxjPXRoaXMucGFyc2VkRGF0YS5sZW5ndGg7Yz5iO2IrKylhLnB1dCh0aGlzLnBhcnNlZERhdGFbYl0sOCl9fSxiLnByb3RvdHlwZT17YWRkRGF0YTpmdW5jdGlvbihiKXt2YXIgYz1uZXcgYShiKTt0aGlzLmRhdGFMaXN0LnB1c2goYyksdGhpcy5kYXRhQ2FjaGU9bnVsbH0saXNEYXJrOmZ1bmN0aW9uKGEsYil7aWYoMD5hfHx0aGlzLm1vZHVsZUNvdW50PD1hfHwwPmJ8fHRoaXMubW9kdWxlQ291bnQ8PWIpdGhyb3cgbmV3IEVycm9yKGErIiwiK2IpO3JldHVybiB0aGlzLm1vZHVsZXNbYV1bYl19LGdldE1vZHVsZUNvdW50OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubW9kdWxlQ291bnR9LG1ha2U6ZnVuY3Rpb24oKXt0aGlzLm1ha2VJbXBsKCExLHRoaXMuZ2V0QmVzdE1hc2tQYXR0ZXJuKCkpfSxtYWtlSW1wbDpmdW5jdGlvbihhLGMpe3RoaXMubW9kdWxlQ291bnQ9NCp0aGlzLnR5cGVOdW1iZXIrMTcsdGhpcy5tb2R1bGVzPW5ldyBBcnJheSh0aGlzLm1vZHVsZUNvdW50KTtmb3IodmFyIGQ9MDtkPHRoaXMubW9kdWxlQ291bnQ7ZCsrKXt0aGlzLm1vZHVsZXNbZF09bmV3IEFycmF5KHRoaXMubW9kdWxlQ291bnQpO2Zvcih2YXIgZT0wO2U8dGhpcy5tb2R1bGVDb3VudDtlKyspdGhpcy5tb2R1bGVzW2RdW2VdPW51bGx9dGhpcy5zZXR1cFBvc2l0aW9uUHJvYmVQYXR0ZXJuKDAsMCksdGhpcy5zZXR1cFBvc2l0aW9uUHJvYmVQYXR0ZXJuKHRoaXMubW9kdWxlQ291bnQtNywwKSx0aGlzLnNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4oMCx0aGlzLm1vZHVsZUNvdW50LTcpLHRoaXMuc2V0dXBQb3NpdGlvbkFkanVzdFBhdHRlcm4oKSx0aGlzLnNldHVwVGltaW5nUGF0dGVybigpLHRoaXMuc2V0dXBUeXBlSW5mbyhhLGMpLHRoaXMudHlwZU51bWJlcj49NyYmdGhpcy5zZXR1cFR5cGVOdW1iZXIoYSksbnVsbD09dGhpcy5kYXRhQ2FjaGUmJih0aGlzLmRhdGFDYWNoZT1iLmNyZWF0ZURhdGEodGhpcy50eXBlTnVtYmVyLHRoaXMuZXJyb3JDb3JyZWN0TGV2ZWwsdGhpcy5kYXRhTGlzdCkpLHRoaXMubWFwRGF0YSh0aGlzLmRhdGFDYWNoZSxjKX0sc2V0dXBQb3NpdGlvblByb2JlUGF0dGVybjpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0tMTs3Pj1jO2MrKylpZighKC0xPj1hK2N8fHRoaXMubW9kdWxlQ291bnQ8PWErYykpZm9yKHZhciBkPS0xOzc+PWQ7ZCsrKS0xPj1iK2R8fHRoaXMubW9kdWxlQ291bnQ8PWIrZHx8KHRoaXMubW9kdWxlc1thK2NdW2IrZF09Yz49MCYmNj49YyYmKDA9PWR8fDY9PWQpfHxkPj0wJiY2Pj1kJiYoMD09Y3x8Nj09Yyl8fGM+PTImJjQ+PWMmJmQ+PTImJjQ+PWQ/ITA6ITEpfSxnZXRCZXN0TWFza1BhdHRlcm46ZnVuY3Rpb24oKXtmb3IodmFyIGE9MCxiPTAsYz0wOzg+YztjKyspe3RoaXMubWFrZUltcGwoITAsYyk7dmFyIGQ9Zi5nZXRMb3N0UG9pbnQodGhpcyk7KDA9PWN8fGE+ZCkmJihhPWQsYj1jKX1yZXR1cm4gYn0sY3JlYXRlTW92aWVDbGlwOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1hLmNyZWF0ZUVtcHR5TW92aWVDbGlwKGIsYyksZT0xO3RoaXMubWFrZSgpO2Zvcih2YXIgZj0wO2Y8dGhpcy5tb2R1bGVzLmxlbmd0aDtmKyspZm9yKHZhciBnPWYqZSxoPTA7aDx0aGlzLm1vZHVsZXNbZl0ubGVuZ3RoO2grKyl7dmFyIGk9aCplLGo9dGhpcy5tb2R1bGVzW2ZdW2hdO2omJihkLmJlZ2luRmlsbCgwLDEwMCksZC5tb3ZlVG8oaSxnKSxkLmxpbmVUbyhpK2UsZyksZC5saW5lVG8oaStlLGcrZSksZC5saW5lVG8oaSxnK2UpLGQuZW5kRmlsbCgpKX1yZXR1cm4gZH0sc2V0dXBUaW1pbmdQYXR0ZXJuOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPTg7YTx0aGlzLm1vZHVsZUNvdW50LTg7YSsrKW51bGw9PXRoaXMubW9kdWxlc1thXVs2XSYmKHRoaXMubW9kdWxlc1thXVs2XT0wPT1hJTIpO2Zvcih2YXIgYj04O2I8dGhpcy5tb2R1bGVDb3VudC04O2IrKyludWxsPT10aGlzLm1vZHVsZXNbNl1bYl0mJih0aGlzLm1vZHVsZXNbNl1bYl09MD09YiUyKX0sc2V0dXBQb3NpdGlvbkFkanVzdFBhdHRlcm46ZnVuY3Rpb24oKXtmb3IodmFyIGE9Zi5nZXRQYXR0ZXJuUG9zaXRpb24odGhpcy50eXBlTnVtYmVyKSxiPTA7YjxhLmxlbmd0aDtiKyspZm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbYl0sZT1hW2NdO2lmKG51bGw9PXRoaXMubW9kdWxlc1tkXVtlXSlmb3IodmFyIGc9LTI7Mj49ZztnKyspZm9yKHZhciBoPS0yOzI+PWg7aCsrKXRoaXMubW9kdWxlc1tkK2ddW2UraF09LTI9PWd8fDI9PWd8fC0yPT1ofHwyPT1ofHwwPT1nJiYwPT1oPyEwOiExfX0sc2V0dXBUeXBlTnVtYmVyOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1mLmdldEJDSFR5cGVOdW1iZXIodGhpcy50eXBlTnVtYmVyKSxjPTA7MTg+YztjKyspe3ZhciBkPSFhJiYxPT0oMSZiPj5jKTt0aGlzLm1vZHVsZXNbTWF0aC5mbG9vcihjLzMpXVtjJTMrdGhpcy5tb2R1bGVDb3VudC04LTNdPWR9Zm9yKHZhciBjPTA7MTg+YztjKyspe3ZhciBkPSFhJiYxPT0oMSZiPj5jKTt0aGlzLm1vZHVsZXNbYyUzK3RoaXMubW9kdWxlQ291bnQtOC0zXVtNYXRoLmZsb29yKGMvMyldPWR9fSxzZXR1cFR5cGVJbmZvOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPXRoaXMuZXJyb3JDb3JyZWN0TGV2ZWw8PDN8YixkPWYuZ2V0QkNIVHlwZUluZm8oYyksZT0wOzE1PmU7ZSsrKXt2YXIgZz0hYSYmMT09KDEmZD4+ZSk7Nj5lP3RoaXMubW9kdWxlc1tlXVs4XT1nOjg+ZT90aGlzLm1vZHVsZXNbZSsxXVs4XT1nOnRoaXMubW9kdWxlc1t0aGlzLm1vZHVsZUNvdW50LTE1K2VdWzhdPWd9Zm9yKHZhciBlPTA7MTU+ZTtlKyspe3ZhciBnPSFhJiYxPT0oMSZkPj5lKTs4PmU/dGhpcy5tb2R1bGVzWzhdW3RoaXMubW9kdWxlQ291bnQtZS0xXT1nOjk+ZT90aGlzLm1vZHVsZXNbOF1bMTUtZS0xKzFdPWc6dGhpcy5tb2R1bGVzWzhdWzE1LWUtMV09Z310aGlzLm1vZHVsZXNbdGhpcy5tb2R1bGVDb3VudC04XVs4XT0hYX0sbWFwRGF0YTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0tMSxkPXRoaXMubW9kdWxlQ291bnQtMSxlPTcsZz0wLGg9dGhpcy5tb2R1bGVDb3VudC0xO2g+MDtoLT0yKWZvcig2PT1oJiZoLS07Oyl7Zm9yKHZhciBpPTA7Mj5pO2krKylpZihudWxsPT10aGlzLm1vZHVsZXNbZF1baC1pXSl7dmFyIGo9ITE7ZzxhLmxlbmd0aCYmKGo9MT09KDEmYVtnXT4+PmUpKTt2YXIgaz1mLmdldE1hc2soYixkLGgtaSk7ayYmKGo9IWopLHRoaXMubW9kdWxlc1tkXVtoLWldPWosZS0tLC0xPT1lJiYoZysrLGU9Nyl9aWYoZCs9YywwPmR8fHRoaXMubW9kdWxlQ291bnQ8PWQpe2QtPWMsYz0tYzticmVha319fX0sYi5QQUQwPTIzNixiLlBBRDE9MTcsYi5jcmVhdGVEYXRhPWZ1bmN0aW9uKGEsYyxkKXtmb3IodmFyIGU9ai5nZXRSU0Jsb2NrcyhhLGMpLGc9bmV3IGssaD0wO2g8ZC5sZW5ndGg7aCsrKXt2YXIgaT1kW2hdO2cucHV0KGkubW9kZSw0KSxnLnB1dChpLmdldExlbmd0aCgpLGYuZ2V0TGVuZ3RoSW5CaXRzKGkubW9kZSxhKSksaS53cml0ZShnKX1mb3IodmFyIGw9MCxoPTA7aDxlLmxlbmd0aDtoKyspbCs9ZVtoXS5kYXRhQ291bnQ7aWYoZy5nZXRMZW5ndGhJbkJpdHMoKT44KmwpdGhyb3cgbmV3IEVycm9yKCJjb2RlIGxlbmd0aCBvdmVyZmxvdy4gKCIrZy5nZXRMZW5ndGhJbkJpdHMoKSsiPiIrOCpsKyIpIik7Zm9yKGcuZ2V0TGVuZ3RoSW5CaXRzKCkrNDw9OCpsJiZnLnB1dCgwLDQpOzAhPWcuZ2V0TGVuZ3RoSW5CaXRzKCklODspZy5wdXRCaXQoITEpO2Zvcig7Oyl7aWYoZy5nZXRMZW5ndGhJbkJpdHMoKT49OCpsKWJyZWFrO2lmKGcucHV0KGIuUEFEMCw4KSxnLmdldExlbmd0aEluQml0cygpPj04KmwpYnJlYWs7Zy5wdXQoYi5QQUQxLDgpfXJldHVybiBiLmNyZWF0ZUJ5dGVzKGcsZSl9LGIuY3JlYXRlQnl0ZXM9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MCxkPTAsZT0wLGc9bmV3IEFycmF5KGIubGVuZ3RoKSxoPW5ldyBBcnJheShiLmxlbmd0aCksaj0wO2o8Yi5sZW5ndGg7aisrKXt2YXIgaz1iW2pdLmRhdGFDb3VudCxsPWJbal0udG90YWxDb3VudC1rO2Q9TWF0aC5tYXgoZCxrKSxlPU1hdGgubWF4KGUsbCksZ1tqXT1uZXcgQXJyYXkoayk7Zm9yKHZhciBtPTA7bTxnW2pdLmxlbmd0aDttKyspZ1tqXVttXT0yNTUmYS5idWZmZXJbbStjXTtjKz1rO3ZhciBuPWYuZ2V0RXJyb3JDb3JyZWN0UG9seW5vbWlhbChsKSxvPW5ldyBpKGdbal0sbi5nZXRMZW5ndGgoKS0xKSxwPW8ubW9kKG4pO2hbal09bmV3IEFycmF5KG4uZ2V0TGVuZ3RoKCktMSk7Zm9yKHZhciBtPTA7bTxoW2pdLmxlbmd0aDttKyspe3ZhciBxPW0rcC5nZXRMZW5ndGgoKS1oW2pdLmxlbmd0aDtoW2pdW21dPXE+PTA/cC5nZXQocSk6MH19Zm9yKHZhciByPTAsbT0wO208Yi5sZW5ndGg7bSsrKXIrPWJbbV0udG90YWxDb3VudDtmb3IodmFyIHM9bmV3IEFycmF5KHIpLHQ9MCxtPTA7ZD5tO20rKylmb3IodmFyIGo9MDtqPGIubGVuZ3RoO2orKyltPGdbal0ubGVuZ3RoJiYoc1t0KytdPWdbal1bbV0pO2Zvcih2YXIgbT0wO2U+bTttKyspZm9yKHZhciBqPTA7ajxiLmxlbmd0aDtqKyspbTxoW2pdLmxlbmd0aCYmKHNbdCsrXT1oW2pdW21dKTtyZXR1cm4gc307Zm9yKHZhciBjPXtNT0RFX05VTUJFUjoxLE1PREVfQUxQSEFfTlVNOjIsTU9ERV84QklUX0JZVEU6NCxNT0RFX0tBTkpJOjh9LGQ9e0w6MSxNOjAsUTozLEg6Mn0sZT17UEFUVEVSTjAwMDowLFBBVFRFUk4wMDE6MSxQQVRURVJOMDEwOjIsUEFUVEVSTjAxMTozLFBBVFRFUk4xMDA6NCxQQVRURVJOMTAxOjUsUEFUVEVSTjExMDo2LFBBVFRFUk4xMTE6N30sZj17UEFUVEVSTl9QT1NJVElPTl9UQUJMRTpbW10sWzYsMThdLFs2LDIyXSxbNiwyNl0sWzYsMzBdLFs2LDM0XSxbNiwyMiwzOF0sWzYsMjQsNDJdLFs2LDI2LDQ2XSxbNiwyOCw1MF0sWzYsMzAsNTRdLFs2LDMyLDU4XSxbNiwzNCw2Ml0sWzYsMjYsNDYsNjZdLFs2LDI2LDQ4LDcwXSxbNiwyNiw1MCw3NF0sWzYsMzAsNTQsNzhdLFs2LDMwLDU2LDgyXSxbNiwzMCw1OCw4Nl0sWzYsMzQsNjIsOTBdLFs2LDI4LDUwLDcyLDk0XSxbNiwyNiw1MCw3NCw5OF0sWzYsMzAsNTQsNzgsMTAyXSxbNiwyOCw1NCw4MCwxMDZdLFs2LDMyLDU4LDg0LDExMF0sWzYsMzAsNTgsODYsMTE0XSxbNiwzNCw2Miw5MCwxMThdLFs2LDI2LDUwLDc0LDk4LDEyMl0sWzYsMzAsNTQsNzgsMTAyLDEyNl0sWzYsMjYsNTIsNzgsMTA0LDEzMF0sWzYsMzAsNTYsODIsMTA4LDEzNF0sWzYsMzQsNjAsODYsMTEyLDEzOF0sWzYsMzAsNTgsODYsMTE0LDE0Ml0sWzYsMzQsNjIsOTAsMTE4LDE0Nl0sWzYsMzAsNTQsNzgsMTAyLDEyNiwxNTBdLFs2LDI0LDUwLDc2LDEwMiwxMjgsMTU0XSxbNiwyOCw1NCw4MCwxMDYsMTMyLDE1OF0sWzYsMzIsNTgsODQsMTEwLDEzNiwxNjJdLFs2LDI2LDU0LDgyLDExMCwxMzgsMTY2XSxbNiwzMCw1OCw4NiwxMTQsMTQyLDE3MF1dLEcxNToxMzM1LEcxODo3OTczLEcxNV9NQVNLOjIxNTIyLGdldEJDSFR5cGVJbmZvOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hPDwxMDtmLmdldEJDSERpZ2l0KGIpLWYuZ2V0QkNIRGlnaXQoZi5HMTUpPj0wOyliXj1mLkcxNTw8Zi5nZXRCQ0hEaWdpdChiKS1mLmdldEJDSERpZ2l0KGYuRzE1KTtyZXR1cm4oYTw8MTB8YileZi5HMTVfTUFTS30sZ2V0QkNIVHlwZU51bWJlcjpmdW5jdGlvbihhKXtmb3IodmFyIGI9YTw8MTI7Zi5nZXRCQ0hEaWdpdChiKS1mLmdldEJDSERpZ2l0KGYuRzE4KT49MDspYl49Zi5HMTg8PGYuZ2V0QkNIRGlnaXQoYiktZi5nZXRCQ0hEaWdpdChmLkcxOCk7cmV0dXJuIGE8PDEyfGJ9LGdldEJDSERpZ2l0OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj0wOzAhPWE7KWIrKyxhPj4+PTE7cmV0dXJuIGJ9LGdldFBhdHRlcm5Qb3NpdGlvbjpmdW5jdGlvbihhKXtyZXR1cm4gZi5QQVRURVJOX1BPU0lUSU9OX1RBQkxFW2EtMV19LGdldE1hc2s6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChhKXtjYXNlIGUuUEFUVEVSTjAwMDpyZXR1cm4gMD09KGIrYyklMjtjYXNlIGUuUEFUVEVSTjAwMTpyZXR1cm4gMD09YiUyO2Nhc2UgZS5QQVRURVJOMDEwOnJldHVybiAwPT1jJTM7Y2FzZSBlLlBBVFRFUk4wMTE6cmV0dXJuIDA9PShiK2MpJTM7Y2FzZSBlLlBBVFRFUk4xMDA6cmV0dXJuIDA9PShNYXRoLmZsb29yKGIvMikrTWF0aC5mbG9vcihjLzMpKSUyO2Nhc2UgZS5QQVRURVJOMTAxOnJldHVybiAwPT1iKmMlMitiKmMlMztjYXNlIGUuUEFUVEVSTjExMDpyZXR1cm4gMD09KGIqYyUyK2IqYyUzKSUyO2Nhc2UgZS5QQVRURVJOMTExOnJldHVybiAwPT0oYipjJTMrKGIrYyklMiklMjtkZWZhdWx0OnRocm93IG5ldyBFcnJvcigiYmFkIG1hc2tQYXR0ZXJuOiIrYSl9fSxnZXRFcnJvckNvcnJlY3RQb2x5bm9taWFsOmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1uZXcgaShbMV0sMCksYz0wO2E+YztjKyspYj1iLm11bHRpcGx5KG5ldyBpKFsxLGcuZ2V4cChjKV0sMCkpO3JldHVybiBifSxnZXRMZW5ndGhJbkJpdHM6ZnVuY3Rpb24oYSxiKXtpZihiPj0xJiYxMD5iKXN3aXRjaChhKXtjYXNlIGMuTU9ERV9OVU1CRVI6cmV0dXJuIDEwO2Nhc2UgYy5NT0RFX0FMUEhBX05VTTpyZXR1cm4gOTtjYXNlIGMuTU9ERV84QklUX0JZVEU6cmV0dXJuIDg7Y2FzZSBjLk1PREVfS0FOSkk6cmV0dXJuIDg7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoIm1vZGU6IithKX1lbHNlIGlmKDI3PmIpc3dpdGNoKGEpe2Nhc2UgYy5NT0RFX05VTUJFUjpyZXR1cm4gMTI7Y2FzZSBjLk1PREVfQUxQSEFfTlVNOnJldHVybiAxMTtjYXNlIGMuTU9ERV84QklUX0JZVEU6cmV0dXJuIDE2O2Nhc2UgYy5NT0RFX0tBTkpJOnJldHVybiAxMDtkZWZhdWx0OnRocm93IG5ldyBFcnJvcigibW9kZToiK2EpfWVsc2V7aWYoISg0MT5iKSl0aHJvdyBuZXcgRXJyb3IoInR5cGU6IitiKTtzd2l0Y2goYSl7Y2FzZSBjLk1PREVfTlVNQkVSOnJldHVybiAxNDtjYXNlIGMuTU9ERV9BTFBIQV9OVU06cmV0dXJuIDEzO2Nhc2UgYy5NT0RFXzhCSVRfQllURTpyZXR1cm4gMTY7Y2FzZSBjLk1PREVfS0FOSkk6cmV0dXJuIDEyO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCJtb2RlOiIrYSl9fX0sZ2V0TG9zdFBvaW50OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1hLmdldE1vZHVsZUNvdW50KCksYz0wLGQ9MDtiPmQ7ZCsrKWZvcih2YXIgZT0wO2I+ZTtlKyspe2Zvcih2YXIgZj0wLGc9YS5pc0RhcmsoZCxlKSxoPS0xOzE+PWg7aCsrKWlmKCEoMD5kK2h8fGQraD49YikpZm9yKHZhciBpPS0xOzE+PWk7aSsrKTA+ZStpfHxlK2k+PWJ8fCgwIT1ofHwwIT1pKSYmZz09YS5pc0RhcmsoZCtoLGUraSkmJmYrKztmPjUmJihjKz0zK2YtNSl9Zm9yKHZhciBkPTA7Yi0xPmQ7ZCsrKWZvcih2YXIgZT0wO2ItMT5lO2UrKyl7dmFyIGo9MDthLmlzRGFyayhkLGUpJiZqKyssYS5pc0RhcmsoZCsxLGUpJiZqKyssYS5pc0RhcmsoZCxlKzEpJiZqKyssYS5pc0RhcmsoZCsxLGUrMSkmJmorKywoMD09anx8ND09aikmJihjKz0zKX1mb3IodmFyIGQ9MDtiPmQ7ZCsrKWZvcih2YXIgZT0wO2ItNj5lO2UrKylhLmlzRGFyayhkLGUpJiYhYS5pc0RhcmsoZCxlKzEpJiZhLmlzRGFyayhkLGUrMikmJmEuaXNEYXJrKGQsZSszKSYmYS5pc0RhcmsoZCxlKzQpJiYhYS5pc0RhcmsoZCxlKzUpJiZhLmlzRGFyayhkLGUrNikmJihjKz00MCk7Zm9yKHZhciBlPTA7Yj5lO2UrKylmb3IodmFyIGQ9MDtiLTY+ZDtkKyspYS5pc0RhcmsoZCxlKSYmIWEuaXNEYXJrKGQrMSxlKSYmYS5pc0RhcmsoZCsyLGUpJiZhLmlzRGFyayhkKzMsZSkmJmEuaXNEYXJrKGQrNCxlKSYmIWEuaXNEYXJrKGQrNSxlKSYmYS5pc0RhcmsoZCs2LGUpJiYoYys9NDApO2Zvcih2YXIgaz0wLGU9MDtiPmU7ZSsrKWZvcih2YXIgZD0wO2I+ZDtkKyspYS5pc0RhcmsoZCxlKSYmaysrO3ZhciBsPU1hdGguYWJzKDEwMCprL2IvYi01MCkvNTtyZXR1cm4gYys9MTAqbH19LGc9e2dsb2c6ZnVuY3Rpb24oYSl7aWYoMT5hKXRocm93IG5ldyBFcnJvcigiZ2xvZygiK2ErIikiKTtyZXR1cm4gZy5MT0dfVEFCTEVbYV19LGdleHA6ZnVuY3Rpb24oYSl7Zm9yKDswPmE7KWErPTI1NTtmb3IoO2E+PTI1NjspYS09MjU1O3JldHVybiBnLkVYUF9UQUJMRVthXX0sRVhQX1RBQkxFOm5ldyBBcnJheSgyNTYpLExPR19UQUJMRTpuZXcgQXJyYXkoMjU2KX0saD0wOzg+aDtoKyspZy5FWFBfVEFCTEVbaF09MTw8aDtmb3IodmFyIGg9ODsyNTY+aDtoKyspZy5FWFBfVEFCTEVbaF09Zy5FWFBfVEFCTEVbaC00XV5nLkVYUF9UQUJMRVtoLTVdXmcuRVhQX1RBQkxFW2gtNl1eZy5FWFBfVEFCTEVbaC04XTtmb3IodmFyIGg9MDsyNTU+aDtoKyspZy5MT0dfVEFCTEVbZy5FWFBfVEFCTEVbaF1dPWg7aS5wcm90b3R5cGU9e2dldDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5udW1bYV19LGdldExlbmd0aDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm51bS5sZW5ndGh9LG11bHRpcGx5OmZ1bmN0aW9uKGEpe2Zvcih2YXIgYj1uZXcgQXJyYXkodGhpcy5nZXRMZW5ndGgoKSthLmdldExlbmd0aCgpLTEpLGM9MDtjPHRoaXMuZ2V0TGVuZ3RoKCk7YysrKWZvcih2YXIgZD0wO2Q8YS5nZXRMZW5ndGgoKTtkKyspYltjK2RdXj1nLmdleHAoZy5nbG9nKHRoaXMuZ2V0KGMpKStnLmdsb2coYS5nZXQoZCkpKTtyZXR1cm4gbmV3IGkoYiwwKX0sbW9kOmZ1bmN0aW9uKGEpe2lmKHRoaXMuZ2V0TGVuZ3RoKCktYS5nZXRMZW5ndGgoKTwwKXJldHVybiB0aGlzO2Zvcih2YXIgYj1nLmdsb2codGhpcy5nZXQoMCkpLWcuZ2xvZyhhLmdldCgwKSksYz1uZXcgQXJyYXkodGhpcy5nZXRMZW5ndGgoKSksZD0wO2Q8dGhpcy5nZXRMZW5ndGgoKTtkKyspY1tkXT10aGlzLmdldChkKTtmb3IodmFyIGQ9MDtkPGEuZ2V0TGVuZ3RoKCk7ZCsrKWNbZF1ePWcuZ2V4cChnLmdsb2coYS5nZXQoZCkpK2IpO3JldHVybiBuZXcgaShjLDApLm1vZChhKX19LGouUlNfQkxPQ0tfVEFCTEU9W1sxLDI2LDE5XSxbMSwyNiwxNl0sWzEsMjYsMTNdLFsxLDI2LDldLFsxLDQ0LDM0XSxbMSw0NCwyOF0sWzEsNDQsMjJdLFsxLDQ0LDE2XSxbMSw3MCw1NV0sWzEsNzAsNDRdLFsyLDM1LDE3XSxbMiwzNSwxM10sWzEsMTAwLDgwXSxbMiw1MCwzMl0sWzIsNTAsMjRdLFs0LDI1LDldLFsxLDEzNCwxMDhdLFsyLDY3LDQzXSxbMiwzMywxNSwyLDM0LDE2XSxbMiwzMywxMSwyLDM0LDEyXSxbMiw4Niw2OF0sWzQsNDMsMjddLFs0LDQzLDE5XSxbNCw0MywxNV0sWzIsOTgsNzhdLFs0LDQ5LDMxXSxbMiwzMiwxNCw0LDMzLDE1XSxbNCwzOSwxMywxLDQwLDE0XSxbMiwxMjEsOTddLFsyLDYwLDM4LDIsNjEsMzldLFs0LDQwLDE4LDIsNDEsMTldLFs0LDQwLDE0LDIsNDEsMTVdLFsyLDE0NiwxMTZdLFszLDU4LDM2LDIsNTksMzddLFs0LDM2LDE2LDQsMzcsMTddLFs0LDM2LDEyLDQsMzcsMTNdLFsyLDg2LDY4LDIsODcsNjldLFs0LDY5LDQzLDEsNzAsNDRdLFs2LDQzLDE5LDIsNDQsMjBdLFs2LDQzLDE1LDIsNDQsMTZdLFs0LDEwMSw4MV0sWzEsODAsNTAsNCw4MSw1MV0sWzQsNTAsMjIsNCw1MSwyM10sWzMsMzYsMTIsOCwzNywxM10sWzIsMTE2LDkyLDIsMTE3LDkzXSxbNiw1OCwzNiwyLDU5LDM3XSxbNCw0NiwyMCw2LDQ3LDIxXSxbNyw0MiwxNCw0LDQzLDE1XSxbNCwxMzMsMTA3XSxbOCw1OSwzNywxLDYwLDM4XSxbOCw0NCwyMCw0LDQ1LDIxXSxbMTIsMzMsMTEsNCwzNCwxMl0sWzMsMTQ1LDExNSwxLDE0NiwxMTZdLFs0LDY0LDQwLDUsNjUsNDFdLFsxMSwzNiwxNiw1LDM3LDE3XSxbMTEsMzYsMTIsNSwzNywxM10sWzUsMTA5LDg3LDEsMTEwLDg4XSxbNSw2NSw0MSw1LDY2LDQyXSxbNSw1NCwyNCw3LDU1LDI1XSxbMTEsMzYsMTJdLFs1LDEyMiw5OCwxLDEyMyw5OV0sWzcsNzMsNDUsMyw3NCw0Nl0sWzE1LDQzLDE5LDIsNDQsMjBdLFszLDQ1LDE1LDEzLDQ2LDE2XSxbMSwxMzUsMTA3LDUsMTM2LDEwOF0sWzEwLDc0LDQ2LDEsNzUsNDddLFsxLDUwLDIyLDE1LDUxLDIzXSxbMiw0MiwxNCwxNyw0MywxNV0sWzUsMTUwLDEyMCwxLDE1MSwxMjFdLFs5LDY5LDQzLDQsNzAsNDRdLFsxNyw1MCwyMiwxLDUxLDIzXSxbMiw0MiwxNCwxOSw0MywxNV0sWzMsMTQxLDExMyw0LDE0MiwxMTRdLFszLDcwLDQ0LDExLDcxLDQ1XSxbMTcsNDcsMjEsNCw0OCwyMl0sWzksMzksMTMsMTYsNDAsMTRdLFszLDEzNSwxMDcsNSwxMzYsMTA4XSxbMyw2Nyw0MSwxMyw2OCw0Ml0sWzE1LDU0LDI0LDUsNTUsMjVdLFsxNSw0MywxNSwxMCw0NCwxNl0sWzQsMTQ0LDExNiw0LDE0NSwxMTddLFsxNyw2OCw0Ml0sWzE3LDUwLDIyLDYsNTEsMjNdLFsxOSw0NiwxNiw2LDQ3LDE3XSxbMiwxMzksMTExLDcsMTQwLDExMl0sWzE3LDc0LDQ2XSxbNyw1NCwyNCwxNiw1NSwyNV0sWzM0LDM3LDEzXSxbNCwxNTEsMTIxLDUsMTUyLDEyMl0sWzQsNzUsNDcsMTQsNzYsNDhdLFsxMSw1NCwyNCwxNCw1NSwyNV0sWzE2LDQ1LDE1LDE0LDQ2LDE2XSxbNiwxNDcsMTE3LDQsMTQ4LDExOF0sWzYsNzMsNDUsMTQsNzQsNDZdLFsxMSw1NCwyNCwxNiw1NSwyNV0sWzMwLDQ2LDE2LDIsNDcsMTddLFs4LDEzMiwxMDYsNCwxMzMsMTA3XSxbOCw3NSw0NywxMyw3Niw0OF0sWzcsNTQsMjQsMjIsNTUsMjVdLFsyMiw0NSwxNSwxMyw0NiwxNl0sWzEwLDE0MiwxMTQsMiwxNDMsMTE1XSxbMTksNzQsNDYsNCw3NSw0N10sWzI4LDUwLDIyLDYsNTEsMjNdLFszMyw0NiwxNiw0LDQ3LDE3XSxbOCwxNTIsMTIyLDQsMTUzLDEyM10sWzIyLDczLDQ1LDMsNzQsNDZdLFs4LDUzLDIzLDI2LDU0LDI0XSxbMTIsNDUsMTUsMjgsNDYsMTZdLFszLDE0NywxMTcsMTAsMTQ4LDExOF0sWzMsNzMsNDUsMjMsNzQsNDZdLFs0LDU0LDI0LDMxLDU1LDI1XSxbMTEsNDUsMTUsMzEsNDYsMTZdLFs3LDE0NiwxMTYsNywxNDcsMTE3XSxbMjEsNzMsNDUsNyw3NCw0Nl0sWzEsNTMsMjMsMzcsNTQsMjRdLFsxOSw0NSwxNSwyNiw0NiwxNl0sWzUsMTQ1LDExNSwxMCwxNDYsMTE2XSxbMTksNzUsNDcsMTAsNzYsNDhdLFsxNSw1NCwyNCwyNSw1NSwyNV0sWzIzLDQ1LDE1LDI1LDQ2LDE2XSxbMTMsMTQ1LDExNSwzLDE0NiwxMTZdLFsyLDc0LDQ2LDI5LDc1LDQ3XSxbNDIsNTQsMjQsMSw1NSwyNV0sWzIzLDQ1LDE1LDI4LDQ2LDE2XSxbMTcsMTQ1LDExNV0sWzEwLDc0LDQ2LDIzLDc1LDQ3XSxbMTAsNTQsMjQsMzUsNTUsMjVdLFsxOSw0NSwxNSwzNSw0NiwxNl0sWzE3LDE0NSwxMTUsMSwxNDYsMTE2XSxbMTQsNzQsNDYsMjEsNzUsNDddLFsyOSw1NCwyNCwxOSw1NSwyNV0sWzExLDQ1LDE1LDQ2LDQ2LDE2XSxbMTMsMTQ1LDExNSw2LDE0NiwxMTZdLFsxNCw3NCw0NiwyMyw3NSw0N10sWzQ0LDU0LDI0LDcsNTUsMjVdLFs1OSw0NiwxNiwxLDQ3LDE3XSxbMTIsMTUxLDEyMSw3LDE1MiwxMjJdLFsxMiw3NSw0NywyNiw3Niw0OF0sWzM5LDU0LDI0LDE0LDU1LDI1XSxbMjIsNDUsMTUsNDEsNDYsMTZdLFs2LDE1MSwxMjEsMTQsMTUyLDEyMl0sWzYsNzUsNDcsMzQsNzYsNDhdLFs0Niw1NCwyNCwxMCw1NSwyNV0sWzIsNDUsMTUsNjQsNDYsMTZdLFsxNywxNTIsMTIyLDQsMTUzLDEyM10sWzI5LDc0LDQ2LDE0LDc1LDQ3XSxbNDksNTQsMjQsMTAsNTUsMjVdLFsyNCw0NSwxNSw0Niw0NiwxNl0sWzQsMTUyLDEyMiwxOCwxNTMsMTIzXSxbMTMsNzQsNDYsMzIsNzUsNDddLFs0OCw1NCwyNCwxNCw1NSwyNV0sWzQyLDQ1LDE1LDMyLDQ2LDE2XSxbMjAsMTQ3LDExNyw0LDE0OCwxMThdLFs0MCw3NSw0Nyw3LDc2LDQ4XSxbNDMsNTQsMjQsMjIsNTUsMjVdLFsxMCw0NSwxNSw2Nyw0NiwxNl0sWzE5LDE0OCwxMTgsNiwxNDksMTE5XSxbMTgsNzUsNDcsMzEsNzYsNDhdLFszNCw1NCwyNCwzNCw1NSwyNV0sWzIwLDQ1LDE1LDYxLDQ2LDE2XV0sai5nZXRSU0Jsb2Nrcz1mdW5jdGlvbihhLGIpe3ZhciBjPWouZ2V0UnNCbG9ja1RhYmxlKGEsYik7aWYodm9pZCAwPT1jKXRocm93IG5ldyBFcnJvcigiYmFkIHJzIGJsb2NrIEAgdHlwZU51bWJlcjoiK2ErIi9lcnJvckNvcnJlY3RMZXZlbDoiK2IpO2Zvcih2YXIgZD1jLmxlbmd0aC8zLGU9W10sZj0wO2Q+ZjtmKyspZm9yKHZhciBnPWNbMypmKzBdLGg9Y1szKmYrMV0saT1jWzMqZisyXSxrPTA7Zz5rO2srKyllLnB1c2gobmV3IGooaCxpKSk7cmV0dXJuIGV9LGouZ2V0UnNCbG9ja1RhYmxlPWZ1bmN0aW9uKGEsYil7c3dpdGNoKGIpe2Nhc2UgZC5MOnJldHVybiBqLlJTX0JMT0NLX1RBQkxFWzQqKGEtMSkrMF07Y2FzZSBkLk06cmV0dXJuIGouUlNfQkxPQ0tfVEFCTEVbNCooYS0xKSsxXTtjYXNlIGQuUTpyZXR1cm4gai5SU19CTE9DS19UQUJMRVs0KihhLTEpKzJdO2Nhc2UgZC5IOnJldHVybiBqLlJTX0JMT0NLX1RBQkxFWzQqKGEtMSkrM107ZGVmYXVsdDpyZXR1cm4gdm9pZCAwfX0say5wcm90b3R5cGU9e2dldDpmdW5jdGlvbihhKXt2YXIgYj1NYXRoLmZsb29yKGEvOCk7cmV0dXJuIDE9PSgxJnRoaXMuYnVmZmVyW2JdPj4+Ny1hJTgpfSxwdXQ6ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9MDtiPmM7YysrKXRoaXMucHV0Qml0KDE9PSgxJmE+Pj5iLWMtMSkpfSxnZXRMZW5ndGhJbkJpdHM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZW5ndGh9LHB1dEJpdDpmdW5jdGlvbihhKXt2YXIgYj1NYXRoLmZsb29yKHRoaXMubGVuZ3RoLzgpO3RoaXMuYnVmZmVyLmxlbmd0aDw9YiYmdGhpcy5idWZmZXIucHVzaCgwKSxhJiYodGhpcy5idWZmZXJbYl18PTEyOD4+PnRoaXMubGVuZ3RoJTgpLHRoaXMubGVuZ3RoKyt9fTt2YXIgbD1bWzE3LDE0LDExLDddLFszMiwyNiwyMCwxNF0sWzUzLDQyLDMyLDI0XSxbNzgsNjIsNDYsMzRdLFsxMDYsODQsNjAsNDRdLFsxMzQsMTA2LDc0LDU4XSxbMTU0LDEyMiw4Niw2NF0sWzE5MiwxNTIsMTA4LDg0XSxbMjMwLDE4MCwxMzAsOThdLFsyNzEsMjEzLDE1MSwxMTldLFszMjEsMjUxLDE3NywxMzddLFszNjcsMjg3LDIwMywxNTVdLFs0MjUsMzMxLDI0MSwxNzddLFs0NTgsMzYyLDI1OCwxOTRdLFs1MjAsNDEyLDI5MiwyMjBdLFs1ODYsNDUwLDMyMiwyNTBdLFs2NDQsNTA0LDM2NCwyODBdLFs3MTgsNTYwLDM5NCwzMTBdLFs3OTIsNjI0LDQ0MiwzMzhdLFs4NTgsNjY2LDQ4MiwzODJdLFs5MjksNzExLDUwOSw0MDNdLFsxMDAzLDc3OSw1NjUsNDM5XSxbMTA5MSw4NTcsNjExLDQ2MV0sWzExNzEsOTExLDY2MSw1MTFdLFsxMjczLDk5Nyw3MTUsNTM1XSxbMTM2NywxMDU5LDc1MSw1OTNdLFsxNDY1LDExMjUsODA1LDYyNV0sWzE1MjgsMTE5MCw4NjgsNjU4XSxbMTYyOCwxMjY0LDkwOCw2OThdLFsxNzMyLDEzNzAsOTgyLDc0Ml0sWzE4NDAsMTQ1MiwxMDMwLDc5MF0sWzE5NTIsMTUzOCwxMTEyLDg0Ml0sWzIwNjgsMTYyOCwxMTY4LDg5OF0sWzIxODgsMTcyMiwxMjI4LDk1OF0sWzIzMDMsMTgwOSwxMjgzLDk4M10sWzI0MzEsMTkxMSwxMzUxLDEwNTFdLFsyNTYzLDE5ODksMTQyMywxMDkzXSxbMjY5OSwyMDk5LDE0OTksMTEzOV0sWzI4MDksMjIxMywxNTc5LDEyMTldLFsyOTUzLDIzMzEsMTY2MywxMjczXV0sbz1mdW5jdGlvbigpe3ZhciBhPWZ1bmN0aW9uKGEsYil7dGhpcy5fZWw9YSx0aGlzLl9odE9wdGlvbj1ifTtyZXR1cm4gYS5wcm90b3R5cGUuZHJhdz1mdW5jdGlvbihhKXtmdW5jdGlvbiBnKGEsYil7dmFyIGM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsYSk7Zm9yKHZhciBkIGluIGIpYi5oYXNPd25Qcm9wZXJ0eShkKSYmYy5zZXRBdHRyaWJ1dGUoZCxiW2RdKTtyZXR1cm4gY312YXIgYj10aGlzLl9odE9wdGlvbixjPXRoaXMuX2VsLGQ9YS5nZXRNb2R1bGVDb3VudCgpO01hdGguZmxvb3IoYi53aWR0aC9kKSxNYXRoLmZsb29yKGIuaGVpZ2h0L2QpLHRoaXMuY2xlYXIoKTt2YXIgaD1nKCJzdmciLHt2aWV3Qm94OiIwIDAgIitTdHJpbmcoZCkrIiAiK1N0cmluZyhkKSx3aWR0aDoiMTAwJSIsaGVpZ2h0OiIxMDAlIixmaWxsOmIuY29sb3JMaWdodH0pO2guc2V0QXR0cmlidXRlTlMoImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvIiwieG1sbnM6eGxpbmsiLCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiksYy5hcHBlbmRDaGlsZChoKSxoLmFwcGVuZENoaWxkKGcoInJlY3QiLHtmaWxsOmIuY29sb3JEYXJrLHdpZHRoOiIxIixoZWlnaHQ6IjEiLGlkOiJ0ZW1wbGF0ZSJ9KSk7Zm9yKHZhciBpPTA7ZD5pO2krKylmb3IodmFyIGo9MDtkPmo7aisrKWlmKGEuaXNEYXJrKGksaikpe3ZhciBrPWcoInVzZSIse3g6U3RyaW5nKGkpLHk6U3RyaW5nKGopfSk7ay5zZXRBdHRyaWJ1dGVOUygiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsImhyZWYiLCIjdGVtcGxhdGUiKSxoLmFwcGVuZENoaWxkKGspfX0sYS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXtmb3IoO3RoaXMuX2VsLmhhc0NoaWxkTm9kZXMoKTspdGhpcy5fZWwucmVtb3ZlQ2hpbGQodGhpcy5fZWwubGFzdENoaWxkKX0sYX0oKSxwPSJzdmciPT09ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSxxPXA/bzptKCk/ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7dGhpcy5fZWxJbWFnZS5zcmM9dGhpcy5fZWxDYW52YXMudG9EYXRhVVJMKCJpbWFnZS9wbmciKSx0aGlzLl9lbEltYWdlLnN0eWxlLmRpc3BsYXk9ImJsb2NrIix0aGlzLl9lbENhbnZhcy5zdHlsZS5kaXNwbGF5PSJub25lIn1mdW5jdGlvbiBkKGEsYil7dmFyIGM9dGhpcztpZihjLl9mRmFpbD1iLGMuX2ZTdWNjZXNzPWEsbnVsbD09PWMuX2JTdXBwb3J0RGF0YVVSSSl7dmFyIGQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW1nIiksZT1mdW5jdGlvbigpe2MuX2JTdXBwb3J0RGF0YVVSST0hMSxjLl9mRmFpbCYmX2ZGYWlsLmNhbGwoYyl9LGY9ZnVuY3Rpb24oKXtjLl9iU3VwcG9ydERhdGFVUkk9ITAsYy5fZlN1Y2Nlc3MmJmMuX2ZTdWNjZXNzLmNhbGwoYyl9O3JldHVybiBkLm9uYWJvcnQ9ZSxkLm9uZXJyb3I9ZSxkLm9ubG9hZD1mLGQuc3JjPSJkYXRhOmltYWdlL2dpZjtiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFVQUFBQUZDQVlBQUFDTmJ5YmxBQUFBSEVsRVFWUUkxMlA0Ly84L3czOEdJQVhESUJLRTBESHhnbGpOQkFBTzlUWEwwWTRPSHdBQUFBQkpSVTVFcmtKZ2dnPT0iLHZvaWQgMH1jLl9iU3VwcG9ydERhdGFVUkk9PT0hMCYmYy5fZlN1Y2Nlc3M/Yy5fZlN1Y2Nlc3MuY2FsbChjKTpjLl9iU3VwcG9ydERhdGFVUkk9PT0hMSYmYy5fZkZhaWwmJmMuX2ZGYWlsLmNhbGwoYyl9aWYodGhpcy5fYW5kcm9pZCYmdGhpcy5fYW5kcm9pZDw9Mi4xKXt2YXIgYj0xL3dpbmRvdy5kZXZpY2VQaXhlbFJhdGlvLGM9Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJELnByb3RvdHlwZS5kcmF3SW1hZ2U7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJELnByb3RvdHlwZS5kcmF3SW1hZ2U9ZnVuY3Rpb24oYSxkLGUsZixnLGgsaSxqKXtpZigibm9kZU5hbWUiaW4gYSYmL2ltZy9pLnRlc3QoYS5ub2RlTmFtZSkpZm9yKHZhciBsPWFyZ3VtZW50cy5sZW5ndGgtMTtsPj0xO2wtLSlhcmd1bWVudHNbbF09YXJndW1lbnRzW2xdKmI7ZWxzZSJ1bmRlZmluZWQiPT10eXBlb2YgaiYmKGFyZ3VtZW50c1sxXSo9Yixhcmd1bWVudHNbMl0qPWIsYXJndW1lbnRzWzNdKj1iLGFyZ3VtZW50c1s0XSo9Yik7Yy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fXZhciBlPWZ1bmN0aW9uKGEsYil7dGhpcy5fYklzUGFpbnRlZD0hMSx0aGlzLl9hbmRyb2lkPW4oKSx0aGlzLl9odE9wdGlvbj1iLHRoaXMuX2VsQ2FudmFzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpLHRoaXMuX2VsQ2FudmFzLndpZHRoPWIud2lkdGgsdGhpcy5fZWxDYW52YXMuaGVpZ2h0PWIuaGVpZ2h0LGEuYXBwZW5kQ2hpbGQodGhpcy5fZWxDYW52YXMpLHRoaXMuX2VsPWEsdGhpcy5fb0NvbnRleHQ9dGhpcy5fZWxDYW52YXMuZ2V0Q29udGV4dCgiMmQiKSx0aGlzLl9iSXNQYWludGVkPSExLHRoaXMuX2VsSW1hZ2U9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaW1nIiksdGhpcy5fZWxJbWFnZS5zdHlsZS5kaXNwbGF5PSJub25lIix0aGlzLl9lbC5hcHBlbmRDaGlsZCh0aGlzLl9lbEltYWdlKSx0aGlzLl9iU3VwcG9ydERhdGFVUkk9bnVsbH07cmV0dXJuIGUucHJvdG90eXBlLmRyYXc9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fZWxJbWFnZSxjPXRoaXMuX29Db250ZXh0LGQ9dGhpcy5faHRPcHRpb24sZT1hLmdldE1vZHVsZUNvdW50KCksZj1kLndpZHRoL2UsZz1kLmhlaWdodC9lLGg9TWF0aC5yb3VuZChmKSxpPU1hdGgucm91bmQoZyk7Yi5zdHlsZS5kaXNwbGF5PSJub25lIix0aGlzLmNsZWFyKCk7Zm9yKHZhciBqPTA7ZT5qO2orKylmb3IodmFyIGs9MDtlPms7aysrKXt2YXIgbD1hLmlzRGFyayhqLGspLG09aypmLG49aipnO2Muc3Ryb2tlU3R5bGU9bD9kLmNvbG9yRGFyazpkLmNvbG9yTGlnaHQsYy5saW5lV2lkdGg9MSxjLmZpbGxTdHlsZT1sP2QuY29sb3JEYXJrOmQuY29sb3JMaWdodCxjLmZpbGxSZWN0KG0sbixmLGcpLGMuc3Ryb2tlUmVjdChNYXRoLmZsb29yKG0pKy41LE1hdGguZmxvb3IobikrLjUsaCxpKSxjLnN0cm9rZVJlY3QoTWF0aC5jZWlsKG0pLS41LE1hdGguY2VpbChuKS0uNSxoLGkpfXRoaXMuX2JJc1BhaW50ZWQ9ITB9LGUucHJvdG90eXBlLm1ha2VJbWFnZT1mdW5jdGlvbigpe3RoaXMuX2JJc1BhaW50ZWQmJmQuY2FsbCh0aGlzLGEpfSxlLnByb3RvdHlwZS5pc1BhaW50ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fYklzUGFpbnRlZH0sZS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLl9vQ29udGV4dC5jbGVhclJlY3QoMCwwLHRoaXMuX2VsQ2FudmFzLndpZHRoLHRoaXMuX2VsQ2FudmFzLmhlaWdodCksdGhpcy5fYklzUGFpbnRlZD0hMX0sZS5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGE/TWF0aC5mbG9vcigxZTMqYSkvMWUzOmF9LGV9KCk6ZnVuY3Rpb24oKXt2YXIgYT1mdW5jdGlvbihhLGIpe3RoaXMuX2VsPWEsdGhpcy5faHRPcHRpb249Yn07cmV0dXJuIGEucHJvdG90eXBlLmRyYXc9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPXRoaXMuX2h0T3B0aW9uLGM9dGhpcy5fZWwsZD1hLmdldE1vZHVsZUNvdW50KCksZT1NYXRoLmZsb29yKGIud2lkdGgvZCksZj1NYXRoLmZsb29yKGIuaGVpZ2h0L2QpLGc9Wyc8dGFibGUgc3R5bGU9ImJvcmRlcjowO2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTsiPiddLGg9MDtkPmg7aCsrKXtnLnB1c2goIjx0cj4iKTtmb3IodmFyIGk9MDtkPmk7aSsrKWcucHVzaCgnPHRkIHN0eWxlPSJib3JkZXI6MDtib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7cGFkZGluZzowO21hcmdpbjowO3dpZHRoOicrZSsicHg7aGVpZ2h0OiIrZisicHg7YmFja2dyb3VuZC1jb2xvcjoiKyhhLmlzRGFyayhoLGkpP2IuY29sb3JEYXJrOmIuY29sb3JMaWdodCkrJzsiPjwvdGQ+Jyk7Zy5wdXNoKCI8L3RyPiIpfWcucHVzaCgiPC90YWJsZT4iKSxjLmlubmVySFRNTD1nLmpvaW4oIiIpO3ZhciBqPWMuY2hpbGROb2Rlc1swXSxrPShiLndpZHRoLWoub2Zmc2V0V2lkdGgpLzIsbD0oYi5oZWlnaHQtai5vZmZzZXRIZWlnaHQpLzI7az4wJiZsPjAmJihqLnN0eWxlLm1hcmdpbj1sKyJweCAiK2srInB4Iil9LGEucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5fZWwuaW5uZXJIVE1MPSIifSxhfSgpO1FSQ29kZT1mdW5jdGlvbihhLGIpe2lmKHRoaXMuX2h0T3B0aW9uPXt3aWR0aDoyNTYsaGVpZ2h0OjI1Nix0eXBlTnVtYmVyOjQsY29sb3JEYXJrOiIjMDAwMDAwIixjb2xvckxpZ2h0OiIjZmZmZmZmIixjb3JyZWN0TGV2ZWw6ZC5IfSwic3RyaW5nIj09dHlwZW9mIGImJihiPXt0ZXh0OmJ9KSxiKWZvcih2YXIgYyBpbiBiKXRoaXMuX2h0T3B0aW9uW2NdPWJbY107InN0cmluZyI9PXR5cGVvZiBhJiYoYT1kb2N1bWVudC5nZXRFbGVtZW50QnlJZChhKSksdGhpcy5fYW5kcm9pZD1uKCksdGhpcy5fZWw9YSx0aGlzLl9vUVJDb2RlPW51bGwsdGhpcy5fb0RyYXdpbmc9bmV3IHEodGhpcy5fZWwsdGhpcy5faHRPcHRpb24pLHRoaXMuX2h0T3B0aW9uLnRleHQmJnRoaXMubWFrZUNvZGUodGhpcy5faHRPcHRpb24udGV4dCl9LFFSQ29kZS5wcm90b3R5cGUubWFrZUNvZGU9ZnVuY3Rpb24oYSl7dGhpcy5fb1FSQ29kZT1uZXcgYihyKGEsdGhpcy5faHRPcHRpb24uY29ycmVjdExldmVsKSx0aGlzLl9odE9wdGlvbi5jb3JyZWN0TGV2ZWwpLHRoaXMuX29RUkNvZGUuYWRkRGF0YShhKSx0aGlzLl9vUVJDb2RlLm1ha2UoKSx0aGlzLl9lbC50aXRsZT1hLHRoaXMuX29EcmF3aW5nLmRyYXcodGhpcy5fb1FSQ29kZSksdGhpcy5tYWtlSW1hZ2UoKX0sUVJDb2RlLnByb3RvdHlwZS5tYWtlSW1hZ2U9ZnVuY3Rpb24oKXsiZnVuY3Rpb24iPT10eXBlb2YgdGhpcy5fb0RyYXdpbmcubWFrZUltYWdlJiYoIXRoaXMuX2FuZHJvaWR8fHRoaXMuX2FuZHJvaWQ+PTMpJiZ0aGlzLl9vRHJhd2luZy5tYWtlSW1hZ2UoKX0sUVJDb2RlLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbigpe3RoaXMuX29EcmF3aW5nLmNsZWFyKCl9LFFSQ29kZS5Db3JyZWN0TGV2ZWw9ZH0oKTtdXT4KICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiPgogICAgICAgICAgYm9keSB7CiAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjsKICAgICAgICAgICAgICBmb250LWZhbWlseTogJ1RhaG9tYScsICJUaW1lcyBOZXcgUm9tYW4iLCBUaW1lcywgc2VyaWY7CiAgICAgICAgICAgICAgZm9udC1zaXplOiA5cHg7CiAgICAgICAgICAgICAgY29sb3I6ICM2NjY2NjY7CiAgICAgICAgICB9CiAgICAgICAgICBoMSwgaDIgewogICAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAzcHg7CiAgICAgICAgICAgICAgcGFkZGluZy10b3A6IDNweDsKICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA1cHg7CiAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTsKICAgICAgICAgICAgICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsKICAgICAgICAgIH0KICAgICAgICAgIGgxIHsKICAgICAgICAgICAgICBmb250LXNpemU6IDEycHg7CiAgICAgICAgICAgICAgdGV4dC10cmFuc2Zvcm06bm9uZTsKICAgICAgICAgIH0KICAgICAgICAgIGgyIHsKICAgICAgICAgICAgICBmb250LXNpemU6IDlweDsKICAgICAgICAgICAgICBjb2xvcjogYnJvd247CiAgICAgICAgICB9CiAgICAgICAgICBoMyB7CiAgICAgICAgICAgICAgZm9udC1zaXplOiA5cHg7CiAgICAgICAgICAgICAgY29sb3I6ICMzMzMzMzM7CiAgICAgICAgICAgICAgdGV4dC1hbGlnbjoganVzdGlmeTsKICAgICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgICAgcGFkZGluZzogMDsKICAgICAgICAgIH0KICAgICAgICAgIGg0IHsKICAgICAgICAgICAgICBmb250LXNpemU6IDEwcHg7CiAgICAgICAgICAgICAgZm9udC1zdHlsZTogYm9sZDsKICAgICAgICAgICAgICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsKICAgICAgICAgICAgICBjb2xvcjogIzAwMDAwMDsKICAgICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgICAgcGFkZGluZzogMDsKICAgICAgICAgIH0KICAgICAgICAgIGhyIHsKICAgICAgICAgICAgICBoZWlnaHQ6MnB4OwogICAgICAgICAgICAgIGNvbG9yOiAjMDAwMDAwOwogICAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjMDAwMDAwOwogICAgICAgICAgfQogICAgICAgICAgcCwgdWwsIG9sIHsKICAgICAgICAgICAgICBtYXJnaW4tdG9wOiAxLjVlbTsKICAgICAgICAgIH0KICAgICAgICAgIHVsLCBvbCB7CiAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDNlbTsKICAgICAgICAgIH0KICAgICAgICAgIGJsb2NrcXVvdGUgewogICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAzZW07CiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAzZW07CiAgICAgICAgICAgICAgZm9udC1zdHlsZTogaXRhbGljOwogICAgICAgICAgfQogICAgICAgICAgYSB7CiAgICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogICAgICAgICAgICAgIGNvbG9yOiAjNzBBMzAwOwogICAgICAgICAgfQogICAgICAgICAgYTpob3ZlciB7CiAgICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgICAgICAgIGNvbG9yOiAjNzBBMzAwOwogICAgICAgICAgfQogICAgICAgICAgI2Rlc3BhdGNoVGFibGUgewogICAgICAgICAgICAgIGJvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTsKICAgICAgICAgICAgICBmb250LXNpemU6OXB4OwogICAgICAgICAgICAgIGZsb2F0OnJpZ2h0OwogICAgICAgICAgICAgIGJvcmRlci1jb2xvcjpncmF5OwogICAgICAgICAgfQogICAgICAgICAgI2V0dG5UYWJsZSB7CiAgICAgICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlOwogICAgICAgICAgICAgIGZvbnQtc2l6ZTo5cHg7CiAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOmdyYXk7CiAgICAgICAgICB9CiAgICAgICAgICAjY3VzdG9tZXJQYXJ0eVRhYmxlIHsKICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDBweDsKICAgICAgICAgICAgICBib3JkZXItc3BhY2luZzo7CiAgICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBpbnNldDsKICAgICAgICAgICAgICBib3JkZXItY29sb3I6IGdyYXk7CiAgICAgICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICAgICAgICAgIH0KICAgICAgICAgICNjdXN0b21lcklEVGFibGUgewogICAgICAgICAgICAgIGJvcmRlci13aWR0aDogMnB4OwogICAgICAgICAgICAgIGJvcmRlci1zcGFjaW5nOjsKICAgICAgICAgICAgICBib3JkZXItc3R5bGU6IGluc2V0OwogICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogZ3JheTsKICAgICAgICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOwogICAgICAgICAgfQogICAgICAgICAgI2N1c3RvbWVySURUYWJsZVRkIHsKICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDJweDsKICAgICAgICAgICAgICBib3JkZXItc3BhY2luZzo7CiAgICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBpbnNldDsKICAgICAgICAgICAgICBib3JkZXItY29sb3I6IGdyYXk7CiAgICAgICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICAgICAgICAgIH0KICAgICAgICAgICNsaW5lVGFibGUgewogICAgICAgICAgICAgIGJvcmRlci13aWR0aDoycHg7CiAgICAgICAgICAgICAgYm9yZGVyLXNwYWNpbmc6OwogICAgICAgICAgICAgIGJvcmRlci1zdHlsZTogaW5zZXQ7CiAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiBibGFjazsKICAgICAgICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOwogICAgICAgICAgfQogICAgICAgICAgI2xpbmVUYWJsZVRkIHsKICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDFweDsKICAgICAgICAgICAgICBwYWRkaW5nOiAxcHg7CiAgICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBpbnNldDsKICAgICAgICAgICAgICBib3JkZXItY29sb3I6IGJsYWNrOwogICAgICAgICAgfQogICAgICAgICAgI2xpbmVUYWJsZVRyIHsKICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDFweDsKICAgICAgICAgICAgICBwYWRkaW5nOiAwcHg7CiAgICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBpbnNldDsKICAgICAgICAgICAgICBib3JkZXItY29sb3I6IGJsYWNrOwogICAgICAgICAgICAgIC1tb3otYm9yZGVyLXJhZGl1czo7CiAgICAgICAgICB9CiAgICAgICAgICAjbGluZVRhYmxlRHVtbXlUZCB7CiAgICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOndoaXRlOwogICAgICAgICAgICAgIHBhZGRpbmc6IDFweDsKICAgICAgICAgICAgICBib3JkZXItc3R5bGU6IGluc2V0OwogICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogYmxhY2s7CiAgICAgICAgICB9CiAgICAgICAgICAjbGluZVRhYmxlQnVkZ2V0VGQgewogICAgICAgICAgICAgIGJvcmRlci13aWR0aDogMnB4OwogICAgICAgICAgICAgIGJvcmRlci1zcGFjaW5nOjBweDsKICAgICAgICAgICAgICBwYWRkaW5nOiAxcHg7CiAgICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBpbnNldDsKICAgICAgICAgICAgICBib3JkZXItY29sb3I6IGJsYWNrOwogICAgICAgICAgICAgIC1tb3otYm9yZGVyLXJhZGl1czo7CiAgICAgICAgICB9CiAgICAgICAgICAjaW5mb1RhYmxlIHsKICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDBweDsKICAgICAgICAgICAgICBib3JkZXItc3BhY2luZzo7CiAgICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBpbnNldDsKICAgICAgICAgICAgICBib3JkZXItY29sb3I6IGJsYWNrOwogICAgICAgICAgICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7CiAgICAgICAgICB9CiAgICAgICAgICAjbm90ZXNUYWJsZSB7CiAgICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiAycHg7CiAgICAgICAgICAgICAgYm9yZGVyLXNwYWNpbmc6OwogICAgICAgICAgICAgIGJvcmRlci1zdHlsZTogaW5zZXQ7CiAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiBibGFjazsKICAgICAgICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOwogICAgICAgICAgfQogICAgICAgICAgI25vdGVzVGFibGVUZCB7CiAgICAgICAgICAgICAgYm9yZGVyLXdpZHRoOiAwcHg7CiAgICAgICAgICAgICAgYm9yZGVyLXNwYWNpbmc6OwogICAgICAgICAgICAgIGJvcmRlci1zdHlsZTogaW5zZXQ7CiAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiBibGFjazsKICAgICAgICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOwogICAgICAgICAgfQogICAgICAgICAgI2luZm9UYWJsZVRkIHsKICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDJweDsKICAgICAgICAgICAgICBib3JkZXItc3BhY2luZzo7CiAgICAgICAgICAgICAgYm9yZGVyLXN0eWxlOiBpbnNldDsKICAgICAgICAgICAgICBib3JkZXItY29sb3I6IGJsYWNrOwogICAgICAgICAgICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7CiAgICAgICAgICB9CiAgICAgICAgICB0YWJsZSB7CiAgICAgICAgICAgICAgYm9yZGVyLXNwYWNpbmc6MHB4OwogICAgICAgICAgfQogICAgICAgICAgI2J1ZGdldENvbnRhaW5lclRhYmxlIHsKICAgICAgICAgICAgICBib3JkZXItd2lkdGg6IDBweDsKICAgICAgICAgICAgICBib3JkZXItc3BhY2luZzogMHB4OwogICAgICAgICAgICAgIGJvcmRlci1zdHlsZTogaW5zZXQ7CiAgICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiBibGFjazsKICAgICAgICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOwogICAgICAgICAgfQogICAgICAgICAgdGQgewogICAgICAgICAgICAgIGJvcmRlci1jb2xvcjpncmF5OwogICAgICAgICAgfQogICAgICAgICAgdWwuZGRyIHsKICAgICAgICAgICAgICBib3JkZXI6MnB4IHNvbGlkIGJsYWNrOwogICAgICAgICAgICAgIGxpc3Qtc3R5bGUtdHlwZTpub25lOwogICAgICAgICAgICAgIGRpc3BsYXk6aW5saW5lLWJsb2NrOwogICAgICAgICAgICAgIHBhZGRpbmc6MDsKICAgICAgICAgICAgICB3aWR0aDo2OTdweDsKICAgICAgICAgICAgICBtYXJnaW46MDsKICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOjE1cHg7CiAgICAgICAgICB9CiAgICAgICAgICB1bC5kZHIgbGkgewogICAgICAgICAgICAgIGZsb2F0OmxlZnQ7CiAgICAgICAgICAgICAgcGFkZGluZzoycHggM3B4OwogICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6MTVweDsKICAgICAgICAgIH0KICAgICAgICAgIHVsLmRkciBsaS50aXRsZSB7CiAgICAgICAgICAgICAgZmxvYXQ6bm9uZTsKICAgICAgICAgICAgICBmb250LXdlaWdodDpib2xkOwogICAgICAgICAgICAgIGJvcmRlci1ib3R0b206MXB4IGRvdHRlZCBncmF5CiAgICAgICAgICB9CiAgICAgICAgICB9PC9zdHlsZT4KICAgICAgICA8dGl0bGU+ZS1Ew7Z2aXogQWzEsW0gQmVsZ2VzaTwvdGl0bGU+CiAgICAgIDwvaGVhZD4KICAgICAgPGJvZHkgc3R5bGU9Im1hcmdpbi1sZWZ0PTAuNmluOyBtYXJnaW4tcmlnaHQ9MC42aW47IG1hcmdpbi10b3A9MC43OWluOyBtYXJnaW4tYm90dG9tPTAuNzlpbiI+CiAgICAgICAgPHhzbDppZiB0ZXN0PSIkc2hvd1dhdGVybWFyayI+CiAgICAgICAgICA8aW1nIGNsYXNzPSJ3YXRlcm1hcmsiIHN0eWxlPSJ3aWR0aDo2NTBweDtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4Oi0xO21hcmdpbi10b3A6MjUwcHg7IgogICAgICAgICAgICBzcmM9InskaW1nV2F0ZXJtYXJrfSIvPgogICAgICAgIDwveHNsOmlmPgogICAgICAgIDx4c2w6aWYgdGVzdD0iJHNob3dDYW5jZWxXYXRlcm1hcmsiPgogICAgICAgICAgPGltZyBzdHlsZT0id2lkdGg6NjMwcHg7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDotMTttYXJnaW4tdG9wOjE2MHB4OyIKICAgICAgICAgICAgc3JjPSJ7JGltZ0NhbmNlbFdhdGVybWFya30iLz4KICAgICAgICA8L3hzbDppZj4KICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iJFhNTCI+CiAgICAgICAgICA8dGFibGUgc3R5bGU9ImJvcmRlci1jb2xvcjpibHVlOyAiIGJvcmRlcj0iMCIgY2VsbHNwYWNpbmc9IjBweCIgd2lkdGg9IjcwMCIKICAgICAgICAgICAgY2VsbHBhZGRpbmc9IjBweCI+CiAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICA8dHIgdmFsaWduPSJ0b3AiPgogICAgICAgICAgICAgICAgPHRkIHdpZHRoPSI0MCUiPgogICAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgICAgICA8aHIvPgogICAgICAgICAgICAgICAgICA8dGFibGUgYWxpZ249ImNlbnRlciIgYm9yZGVyPSIwIiB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9IndpZHRoOjQ2OXB4OyAiIGFsaWduPSJsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6Ym9sZDsgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Ew5xaRU5MRVlFTiBZRVRLxLBMxLAgTcOcRVNTRVNFIELEsExHxLBMRVLEsDwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgIDx0ciBhbGlnbj0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJuMTpDcmVkaXROb3RlL2NhYzpBY2NvdW50aW5nU3VwcGxpZXJQYXJ0eS9jYWM6UGFydHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9ImNhYzpQYXJ0eU5hbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2FjOlBhcnR5TmFtZS9jYmM6TmFtZSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2FjOlBlcnNvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYmM6VGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+JiMxNjA7PC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYmM6Rmlyc3ROYW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2JjOk1pZGRsZU5hbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+JiMxNjA7PC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYmM6RmFtaWx5TmFtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4mIzE2MDs8L3hzbDp0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNiYzpOYW1lU3VmZml4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgPHRyIGFsaWduPSJsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Im4xOkNyZWRpdE5vdGUvY2FjOkFjY291bnRpbmdTdXBwbGllclBhcnR5L2NhYzpQYXJ0eSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPSJsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYWM6UG9zdGFsQWRkcmVzcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYmM6U3RyZWV0TmFtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4mIzE2MDs8L3hzbDp0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNiYzpCdWlsZGluZ05hbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iY2JjOkJ1aWxkaW5nTnVtYmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+IE5vOjwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNiYzpCdWlsZGluZ051bWJlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2JjOlBvc3RhbFpvbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+JiMxNjA7PC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYmM6Q2l0eVN1YmRpdmlzaW9uTmFtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0Pi8gPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNiYzpDaXR5TmFtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4mIzE2MDs8L3hzbDp0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYKICAgICAgICAgICAgICAgICAgICAgICAgdGVzdD0iLy9uMTpDcmVkaXROb3RlL2NhYzpBY2NvdW50aW5nU3VwcGxpZXJQYXJ0eS9jYWM6UGFydHkvY2FjOkNvbnRhY3QvY2JjOlRlbGVwaG9uZSBvciAvL24xOkNyZWRpdE5vdGUvY2FjOkFjY291bnRpbmdTdXBwbGllclBhcnR5L2NhYzpQYXJ0eS9jYWM6Q29udGFjdC9jYmM6VGVsZWZheCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBhbGlnbj0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Im4xOkNyZWRpdE5vdGUvY2FjOkFjY291bnRpbmdTdXBwbGllclBhcnR5L2NhYzpQYXJ0eSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249ImxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2FjOkNvbnRhY3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0iY2JjOlRlbGVwaG9uZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+VGVsOiA8L3hzbDp0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNiYzpUZWxlcGhvbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDppZj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmlmIHRlc3Q9ImNiYzpUZWxlZmF4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4gRmF4OiA8L3hzbDp0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNiYzpUZWxlZmF4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmlmPgogICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaAogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q9Ii8vbjE6Q3JlZGl0Tm90ZS9jYWM6QWNjb3VudGluZ1N1cHBsaWVyUGFydHkvY2FjOlBhcnR5L2NiYzpXZWJzaXRlVVJJIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGFsaWduPSJsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+V2ViIFNpdGVzaTogPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaAogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q9Ii8vbjE6Q3JlZGl0Tm90ZS9jYWM6QWNjb3VudGluZ1N1cHBsaWVyUGFydHkvY2FjOlBhcnR5L2NhYzpDb250YWN0L2NiYzpFbGVjdHJvbmljTWFpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBhbGlnbj0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkUtUG9zdGE6IDwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICAgIDx0ciBhbGlnbj0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJuMTpDcmVkaXROb3RlL2NhYzpBY2NvdW50aW5nU3VwcGxpZXJQYXJ0eS9jYWM6UGFydHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+VmVyZ2kgRGFpcmVzaTogPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYWM6UGFydHlUYXhTY2hlbWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2FjOlRheFNjaGVtZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNiYzpOYW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD4mIzE2MDsgPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2gKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0PSIvL24xOkNyZWRpdE5vdGUvY2FjOkFjY291bnRpbmdTdXBwbGllclBhcnR5L2NhYzpQYXJ0eS9jYWM6UGFydHlJZGVudGlmaWNhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBhbGlnbj0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNiYzpJRC9Ac2NoZW1lSUQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD46IDwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2JjOklEIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgIDxoci8+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPHRkIHdpZHRoPSIyMCUiIGFsaWduPSJjZW50ZXIiIHZhbGlnbj0ibWlkZGxlIj4KICAgICAgICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgICAgICAgPGltZyBzdHlsZT0id2lkdGg6OTFweDsiIGFsaWduPSJtaWRkbGUiIGFsdD0iRS1Nw7xzdGFoc2lsIE1ha2J1eiBMb2dvIgogICAgICAgICAgICAgICAgICAgIHNyYz0iZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwvOWovNFFBWVJYaHBaZ0FBU1VrcUFBZ0FBQUFBQUFBQUFBQUFBUC9zQUJGRWRXTnJlUUFCQUFRQUFBQmtBQUQvNFFNWmFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOTRZWEF2TVM0d0x3QThQM2h3WVdOclpYUWdZbVZuYVc0OUl1Kzd2eUlnYVdROUlsYzFUVEJOY0VObGFHbEllbkpsVTNwT1ZHTjZhMk01WkNJL1BpQThlRHA0YlhCdFpYUmhJSGh0Ykc1ek9uZzlJbUZrYjJKbE9tNXpPbTFsZEdFdklpQjRPbmh0Y0hSclBTSkJaRzlpWlNCWVRWQWdRMjl5WlNBMUxqWXRZekV6TWlBM09TNHhOVGt5T0RRc0lESXdNVFl2TURRdk1Ua3RNVE02TVRNNk5EQWdJQ0FnSUNBZ0lDSStJRHh5WkdZNlVrUkdJSGh0Ykc1ek9uSmtaajBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TVRrNU9TOHdNaTh5TWkxeVpHWXRjM2x1ZEdGNExXNXpJeUkrSUR4eVpHWTZSR1Z6WTNKcGNIUnBiMjRnY21SbU9tRmliM1YwUFNJaUlIaHRiRzV6T25odGNFMU5QU0pvZEhSd09pOHZibk11WVdSdlltVXVZMjl0TDNoaGNDOHhMakF2YlcwdklpQjRiV3h1Y3pwemRGSmxaajBpYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5NFlYQXZNUzR3TDNOVWVYQmxMMUpsYzI5MWNtTmxVbVZtSXlJZ2VHMXNibk02ZUcxd1BTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM2hoY0M4eExqQXZJaUI0YlhCTlRUcEViMk4xYldWdWRFbEVQU0o0YlhBdVpHbGtPalpETkRKQk5FSTJRalZDUkRFeFJUaENRak0wUkVJd1FrWkdNRVF4T0RZMElpQjRiWEJOVFRwSmJuTjBZVzVqWlVsRVBTSjRiWEF1YVdsa09qWkROREpCTkVJMVFqVkNSREV4UlRoQ1FqTTBSRUl3UWtaR01FUXhPRFkwSWlCNGJYQTZRM0psWVhSdmNsUnZiMnc5SWtGa2IySmxJRkJvYjNSdmMyaHZjQ0JEVXpRZ1YybHVaRzkzY3lJK0lEeDRiWEJOVFRwRVpYSnBkbVZrUm5KdmJTQnpkRkpsWmpwcGJuTjBZVzVqWlVsRVBTSXpSRVZFTmtVMU4wRkRSRVZETkVKQk56a3hOVU0yTTBOQ04wUkVOek0wTnlJZ2MzUlNaV1k2Wkc5amRXMWxiblJKUkQwaU0wUkZSRFpGTlRkQlEwUkZRelJDUVRjNU1UVkROak5EUWpkRVJEY3pORGNpTHo0Z1BDOXlaR1k2UkdWelkzSnBjSFJwYjI0K0lEd3ZjbVJtT2xKRVJqNGdQQzk0T25odGNHMWxkR0UrSUR3L2VIQmhZMnRsZENCbGJtUTlJbklpUHo3LzdnQU9RV1J2WW1VQVpNQUFBQUFCLzlzQWhBQUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFRRUJBUUVCQVFFQkFnSUNBZ0lDQWdJQ0FnSURBd01EQXdNREF3TURBUUVCQVFFQkFRSUJBUUlDQWdFQ0FnTURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd1Avd0FBUkNBQm1BR2tEQVJFQUFoRUJBeEVCLzhRQXR3QUFBZ01BQVFVQkFBQUFBQUFBQUFBQUNBa0FCd29HQVFJRUJRc0RBUUFCQkFJREFRQUFBQUFBQUFBQUFBQUdBQVFGQndnSkFRSURDaEFBQUFZQkF3TUNBd1VIQXdRREFBQUFBUUlEQkFVR0J3QVJDQ0VTRXhRSk1TSVZRVkV5SXhid1lYR0JvUmNLa2JIQjBWSXpKRUkwSnhFQUFnRUNCQUlIQkFjR0JBUUhBQUFBQVFJREVRUUFJUklGTVFaQlVXRWlNaE1IY1lFVUNKR2hzY0ZDSXhYdzBWSmlNd2x5VTNNazRZS2lGdEpEZzlOVUpSZi8yZ0FNQXdFQUFoRURFUUEvQU4vR2xoWW1saFltbGhZcHJNbklMRFhINkJKWXN2WkRybEtaT0QrQ0xaeWIwaHB5d1BUYkFsR1ZxdXRnWG5MRktMR01BRWJzbTY2eGhIOE8zWFVqdHUxYmh1MC9rV01aZHFWSnFBQjdTU0FQcHo2TU5iaTh0N1pkVXpVOXgrNEhBNG84a09SR1dhOUxUK0RlUENtTzZ5eUtkUnRrTGwzS3ltSUdUMWdrUXl6bWFqOGJSVUpaTWdweGFEYjgwRHpLVUVZd0ZFREZLVU8vVXArazdWWTBpdnJscEw2dERERkhxb2ErRXlhcVY3QUQxWWJDNHU3Z0ZvVUNSVXlZa2ZUcHA5dUI0WHVISkcxNVhpc05XZjNETWM0OHYxaFdaTm9pQXdqeE5lU1ZaZHlFdFQ1SElVYlZtK1hNcVNGN29idTV2YUJFT0pwQ01JN2J5cTBVVDFoR2ZwekVPTTJZTnRHMW5jWXRuWTI4ZFN6dGNuWFFPSXk1aXJyQ0NSaEhyMGFOWjBhdFdXR3pDNGFjUVBjaldlSGN5clN0SzhLMEZhVnJUT2xNQWh5Y3pueUg0NzVTNUI0OGNjcytURnVuOFk0d3I5dXhpa3dEQU1BWExOL2V2OFR0TExURTQ1ZkJzakZWaU5yVEhNOFBLS3VqTHVWUHB5TDlVVUNwTWpyR0s5aTJQWmQ2c2JPOStHamlpbnVDa3BMRmhESFNVckowRnl4Z2tVTFFkN1FOUkxnQ1B1cEo3YVNTTFdXWlVxdVhpUGRxT29VMUthNTVWTktEQmVST1FPVmRkdHRCeDdFYzlxL0taQ3ZkTGlyZENWamtkeENWU284dXV2UTNlU0plc1FPWnNYcDRxck1wTFJGU2lucjlmc080WFFadFYxVG9HTWdza21OR3oydHJXYTkvU3hKYXhTRldaTG82MEdzUnF6UWh0U2d1VlVFcnAxTUJVMUZYMnE0amRVRTVFakNvQlRJNUVrQmlLRWdBbW5HZzdNY3J4QjdoWEpGeFVhdmRNcjhSWi9JdEZ0R1BxWGxKbmtQaWc3bDcrNmFVVElTRW02cDA3TjRqdVVQVXJ3VTh5d2lGWFhwSVZhZWRwSUdJZnhHVFVUT2RwdVBLdTNXN3ZieDNheDdrazBrUmhaU1FKSTJBZFBOcUY3dGZFUlFudTFxRGptMzNHN0toNUl5MEJVTnFxQjNUbURRRDl1T0dCNEw1UllGNUtSVHFTdzNrbXZXNXpGSDhGaXJKRjFJdTcxRjZYWXFrZGNLUkxwTWJWVm42Ung3UlNldEVEQ1B3M0RxSXR1V3o3bHRUaEwyTXgxRlFhaGdmZUNSWHM0OE1zeGlUdDcyM3VGRFJOVSsvN3dNWC9xTnc2eE5MQ3hOTEN4TkxDeE5MQ3gwSC9ZUDI2NldGaGRlVStXVnR5TGtsYmpqeEhjVkJlN2xtVnFuZU03M2gwaU9NY1hUNlVVOW1wR3AxZUhGeXllNW56SkhWNWd2SWZweU1XSWl4YW9IV2tYVFZNdXhqT3k1ZmdzYkg5WTM0UDVRWFVrS2hpWkZxRkphUkNmS0FaMDhZRlNRdFFUaUhudkpMaVFXMWtRR0p6YkxMcDhMRFBnZUh0d0FZM3pHdVBXcm01NFByZVVzODhuSmVXakpjbktuTFZMWVpEdG1VTVZRbDJQUk0yWEhqVEJzbkZrTkNSdUdiT28yYVQ5ZFkxNk9leFVXcWVSVGlaWWlCQldLZmdidTkwVzI3eVF3YkxHckJiY1BwOGlWby9NaGpua0tKUVRxQzBiZVlVWnFJWGpPYXMwTVVBMVFCbnVTUlY2ZUpRYU15clUrQW52Q2xRTXdHNlQ2cytJY29jME9IOUhjV3lmbXNGOGgxS3JhV2pPMGhWTERYb29YVmdqTEJqbTFHcytKSnFaWlREakhlVnFZNlVlcHdjMlpyTVJaSGpOeWRLUGxtSlUyNHJCdU5oeXp6SEtJRVM3MmJ6RnFtdFdhaWxaRjBUQlNvbGljQmZNakJSOUxLQzhUblZKTkRMZTJTNmlZN21oem9RTXdWTlZyNFdHZWs1aW9PVERLNG9iaGpoeUZ6TkQ1NVlKMkNPdjdDRXBzVkxoQnlnUWtCYUhsQ3FUdWtWaVduV3JSdU0yNENPclQwVzMwNEpFSWh5VkJzbzVhdUZtcmRWT01rNWszS1hiRzJseWpXWlp5dW9hbVFTT0hZS1QzUlZoWFZwMWlyQldBWmdYQXNvVm1Gd0tpU2c0WkEwRkJYcDRkRmFjTXNoanpzbThMdU4rWHJuL2NLK1krSk1YQXo2d1NTazBFNVlXNnlqNnpZbGZZUWtsd2JveWdNMi84QStkUHpOa2lJcHBKcE9rMG5nRjlXa1JjdkZqek52VzNXeHM3U2JUYkZWWFRwVTVMTUp3TXhYK3FBYW5NaXErRWtZVXRsYlRPSkpGcTRKTmFuaVZLSC9wTlByNDRxKzErM2RoR1hrYm5ZcWhLM2pHOXN0MVR5QldVcCt2U3pLUldyN3pJMko0VERFeGFZbjlSeHNySUZzRENsVnhtUmlZN29VR2l5WmpwcGdDeXhWSHR2emh1a1NSUTNLeFQyOFVrYmFXQkFZUnl0TUViU1ZHa3V6YXFDcEI0NUNuayszd3NXWkN5T3dJcU9pcWhhaXRjNkFVd00welRjMTRiemZXOFo4ZHlQckZrM0lHVXJ4a0c2UDMxZnlQQ1lNeGxnK0h3dkg0T3dVeHVzOG9SbFdyZkNZMWdHTWE5U3JVVzk5ZlBXdHFzZElJOUk3dDh6bTRibmJOeTJ0NzNlU3NkakJicEdnRFJtNGxuYVl6emxGelpHa1l1REs2Nlk0U0FkWkNJN1ZrbWhuRVZ1Q1pYY2sxQjBLb1hTdGVnMEZPNkRWbXFjaFVqamxLamNYYys4aFQ2NzNGVnl3VmwralFrbkpZbzVoWTBsSDlOekZMdGF2WUdkVGN5OTFRamFQQ1UrUGFXeVVjbGtXZFRjeTl5WUxNQ3JveUtjZS9hck0wdTk0dDF5clpvc1Z3azlsTXdFOXZSZEkxS1cwSklXYVJnbzdydm9pR3FoUVNJd2MrYXh4N2c3ZHdwS3RkRDUxeU5LbGFCUlhvRld5NDZTQ0JkT0wrWTE3d2prTnZ4MjVveTFRbVhRMnRwanVpY3JxQWRtamppNzI5N0dzWm1Jb09aYXN3Y1AxTUE1a2tZV1dacm9NWDZvUlUwRGtoMkMvY1lFZFJOOXkvRHVOb3U2YkNycHFUVzF1VmJ1S0NVMUpKSVI1b1prYndWb2FyeEFHTzhGN0xheUMxdmFOblFQVVptZ05DcWpLbFJ4NDhjTklBUU1BQ0E3Z1BVQkRmWVEreitJQ0grdWdzbWhOZUl4Tlk3dGM0V0pwWVdPbS9YYlNwMDRXQWE1RVhHOVpWc1QvamxoKzBLVUdPYVJxY3Z5THpvMmNOMnF1SWFFdWdaNkVCVkpCMlBvRWNtMjlpMlVCRlZZREpRMGNLajVVTzRHNURsbXoyOXR0Y1VlOVg2K1pNeC8yOElyV1FodExNU3RkT2c1cUdYdkhnT25FVmROTGRPYldFNlVIamJxNlJrYVZyMkhMQys1cTN3c3ZJWXp3WHhRTTF1SEdXYlozVEd1UFlEak84TWxsV2xaMmdrY2YzcUl6N2wvSnR0Z1VUNHlld3poeEtPMHpPeXZHYzVGZW9kdVRUYWtzemlreXFHMWVLT2JjOStVUmIybmx5eU5jZ0NLU0ErWkVZSW9veVBPTDBRTVJSMWtvQjVYbHZLV3BhcFdDMU9xM05WR2p4QnNtMU14OE5NNkRnUi9GcUM0YS9namovRDRuaFZYODhTQXNPU3JIWkgrUmJyWVltSWN4ZFlKbEN6MTJKZ3NoV2pIRlZrNUtjTGpkcmYzVVllUmxXa2V1bWs5bEg3eDBvSGU1VURRRnUyN3liaEtGaTFwWlJvSTQxSkJmeWxZdEdzamdMNXBqQkNxekNxb3FxTWxHSmEzdDFoV3JVTWhPb2tjTlJGQ1ZCSjAxNGtEaVNUeEp3UkpqRklVeHpDQlNsQVJNWTNRQUFPb2lJL1lBQnFHSGJoeUFUa016ak9oN25mdVBQVE9aZkJlQzdROGcwSVp4NDd6a0tEa25NYStJOGJnZ3Y4QVJxOUtNRlc3cHNkc29CaXVWU0grSUNRUHQycURubm5SclEvcDIxT1ZrVTk1eDBjTWdHVWdqdEIvNDdRUGxFK1UyMjNpS0xudjFFdHhMYVRMV0MyWTVGYWxUSXp3M0lZTi9JNlpEdDhPZVdaNWY1MlRlTGdueWd6YUJVem5EOHZLdDJBb0FCaEQ4SlpycDhOdnUxVkxjNDcraDd0MjRQc1gvd0FPTmxkcDhzWG8wWVZMOHUyMVNQOEFObjZQL1h4VTA3enI1SUtQbTBKV3VRMmZwaVlmcnBzMkxacmxLOXJMdVhLNXdUU1NTYnB6WW5VT1k1Z0FPbjI2VVBOZk5GeTZ4UTNUNmlhY0U2ZmFvd3gzYjBHK1h6bHl5azNIZHRpdFV0b2xKYnYzYlVwL2drWS9RRGg5dnRtWUc1Vno5b3JtVk9SUElia1E5RkpSR1Voc2RJNVh1aTBJUWl5Q2dwRnRpRHVWV0kvTUlLRkh3QjhoUkQ1dTdWemNwYlh2d1ZMemQ3bG1QRUlRdnQ0bzMzWTFSL01qNmwra1VwbjVjOU05aWd0NHhWR25XVzRKTkQvbDNOdUNPQjRQNzhhTU1nNDZ0YTJKY3V0dU9pOUh4RG0vSVVESnVZbkliaW5ScmhCUzlMTkZFbU5qdGFiSnFrck5TWlBJY2liMTJtL0ZxcWNGenQzWkNHYkxYSHQ5L2IvSDJyYnlKYm5hNG5BYVBXUWZMQnpWU2ZDT3dGYThBeWs2aHI0bmlZeHlmQzZVbVlHaHAwOVovWSt3OE1KbHdmeDB4YlM3ZGtlRDVRTW5XTzhReXRVazhaU09MczBSRlp0bWNjMHVjc3pVSmI3VmszT2VUY1ozaXdzYmZqTEd1WVNTNWFuZkpxdHdieG04bFZ6S1M2U0JVa2xyTTNqZUx1OXRJVzJmVGNYK3NTZVpFV1czaEVTdEdzVUVNc1NsSlpJZEJsaGpsa1VoRnBIcUJLd1VGckdqc0xtcXcwcFJzM1lzUXhabVZqVlExZExGUWN6blRpY2ZIYS81RzRyNWZoK0V2SUt4UzkxcHRvWnlMN2gzbit4TEN2S1hPc3dqY0YzbUM4b3k2b3BsZFpsbzBja1pabTlFcEFzRU9RRmR2VklPQU1JN3BhMjI5V0Rjd2JhQXM4ZFBpWXhXaUZtMHE0TEVhdGZFaFFhZml6cVM5dFhrdEpsc1pqVkdyb1BYUVZJeTZ1MCt6RFBkdHZob056OTJKYm94T3YzNldPS0hyeFRHZnNzSllheGhQWEJKcjlVc2F3czY1Uks4VWY4QTJMVGtDeXVrNGFtMXRvbnNZeWlzck91MFNEMmdKZ1Q3amJEdHRxVDJqYi8xSzlXQmlCQUFXY25ocFhNOUlPZkRJOVBWaHRkei9Ed2x4NHprUGJVRHR3b1BNN2ZLK0xwekZHSTVDYXVPQjVxNjJtd004bjhsc25Nb2ZJSEMvUHFlVjZuM1dlbjVScEVSTENaamE3RmxCOUgxU3V0WmQ5VFpGdkNsVldZVEMrLzB4M1ltMURicjZLNTNNSkZkaEVWa3RvUzBkN0EwVFpTUXlGZjZheEI1WEtKT29PbFhpV2drU0lsRTBIbDI0SmlxU0M3VU1UQmh3WUE4U3hDaXBROFNHUGhMSitLL0Z0bGdoQ3pYU3pPV00vbUxKS3FyMjV6TFZwVjE0NnJNWDFobjdxcGpDaVdLSngvUUxOTTR5cmx4dDhzNWlqV0JON01FU2Rna3M1T21paVJNSzM3ZlczVXgyc0FLYmJBS0l0WHE1Q3FublNLMGtpcks2SWdmeTlLVldvVUVrbVZ0TFFXK3FSeldkK0p5eUZTZElJVlNWQkpwcXFjK09DODBPNGVEQ212ZE01a253RmpsUEdOSmtTb1pNeUt5Y0plb1JVVEZldVZnM2UzZXl4aUdJWVNPSFFnWkZ1YnBzZmN3RDh1Z0xubm1QOUhzUGhyYzB2SlJRZGd5cWMxSTZlR016dms3OUNUNm84NURtRGVJdzNMRzNTS1dCUDhBVWx6MHIzWm9wQUFRRHFBWmE1RUhPbUszTHVSVm5heThPeGNuT1VWRkRPMXhQM0tMcktqM0hVT2NkekhPY3dpSWlJOVJIV00xM2NNMGxLNTlQMWRtUG9FNVUyQ0d5dDBPbWlLb0NpcE5BQU9uVWE4T25BZjJLWmRlVkdNakUxM2tySUxKdFdyUnVrWmR5NWRMbjhhYVNTYWU1MUZGRGpzQUFIeDE0VzF1MDhxUUo0bU5CKzFjU0hOVy93QnJzRzNTWGx5Mm0zalFsalFuSUN2UXJIZ09nSEdsVDJzUGErajZkSGx6cm5WaTEvVXljY2FjVkNVS2IwTkpoMFNlclYzS3IrVDlTOENmY29vSWZsL2hBUTY2eUI1UDVTZzJpQVgxNy9YcFU4ZTd3L2hjZy9SalJoOHpYeklieDZuY3hIazdsWnYvQUtzeUdOUlJENXJFMHArYmF4T21mODlPM0JqV3ozb2NIOGVjcHdOTGg4UnZaYkY0eWhvZVZ2Nk1zM2J2ZkdncUxVWmlQaXpzMVBVUjVUbUE0Z0t5WmhUM0VBRWRnSHRKNmwyZHJ1UzJTUmFyUXRRdnFZZG5oOHNuNjhTZTBmSUp6WHZuSUVuTkY1ZitUdndoMXJiaUdGdzFhTUFaaGZLZ3lQSFJsMVZ4b3pwVnVyOTZyRUhiS3U5UmtJT3dSYktXakhhQmdPbXV5Zm9FY05sU21EL3VUVUQvQUYxYTBNeVR4TE5IbWpDbzloeHJxM1hicnZhTnhtMnkrR202Z2tLTUtnMFljYzFKQjl4STdjTC9BT2VYRWFpWk1qWmJQQjZ2V3JMWmFiWEkxeGM2bGZMbE0wckZ0L3ExRlN0NTRkeGxLWGdLbmRiV1dvWTZoc2cyVjdJUmNDM1l1YmJIdWxZaVJXY3NEZzBNZGNwY3gzZGhJdTFDU1NPQ1J6b2VORmVXTjVORmZLRFBHbXVReFJLcnlGaEN3RXNZV1Fhc0RlNFdVY3ltZWdMQUNvSklWZ0swMVVCTkFHYW9GTlFPbHFqTEZOVW5GZVcrWW5GUzBVemsxYy8wcHl6dE1MU09RR1BtN0MxVWR3R0JyeEdNL0xqaXlZOXBFQkZSRjRvTU5WYnhGTHg4cTFuRFNqcHk0STlhcVNUcnlMb3BQNzY4MjNZTi9TNDJDUFhzVVVqdzZ5cmd5MEpxWkpDV1IyMHNyS1l3cTZhZmxxRG40SkRMZTJaUzlJRjB3RFVxTzc3QUtFQ29JenFhOUp3Ym5DYmtRKzVMOGY2emViVEZwMXJLY0JJVHVOODJVdllDTDB6TCtQcFZ6V2J2Q3JJQjh5RFZ4SXNmWHNCSC93QXNhOGJxaHVVNGFGdVk5cWoyamRwTGVBNnJRNldROVlLZzA0azVFa1ptcEFCNmNQTnV1dmlyWldiS1FaSDNaZFE0MHdXbW9QRDdDdE9WT2E2ckhjczhSMW0zaEt2YVJ4NHFzZG5Pd3d0ZWpGWjZmdFdXc3EzYU93Rnh4b2tMQXBtSWFTc1ZqdGxua0ZJMG01U2c1YmdjNWt5bDhwRG5aZHJuazJLVVJJUGlMMm9SMk9sVWpnRFNUT3g2RUNLNWIvRGxVOElhNW5YNDVTM2doNGdjU1pBQW9IYVdJQTQ5dE1IS2hsU01zR1ZrOFJ4ckNNY3lrTlRZMjkzK0xzVHVUaDdKWElpd3JxcFVDVGdZVmV0UFlHN1Iwak53VW0wa0hEV1dTK2pQR1NSVEZWT3NBRUZ6WXZGWWZxRGxoRzBoU01xQVZZcVB6QXphZ3lFS3lGUVVPc01lRk01UHpRMHZraWxRdFRYaUs4S0NsRG1EWFBLbUxtMUhZOXNlaHM5aGphblhacXpUSzVXc1ZBeGp5VmtIQjkrMUZveVFPdXVjZTBwamZLbVFSK0E2OHBwWTRJMm5rOENBayt6RWh0VzIzTzc3bEJ0ZG1OVjFjU3FpaklWWmpRWmtnRDJrZ2RaeGd6NXQ4bFpqTTJVTWdaVWszYWgvcmtvNmphdzNPYzRrWVZkazRYUmgycUpEQVVVd0Z0c29jQUFBOGloaDFpcHpadmN1N2JrOTJmQVRSUjFBVUhIU0NmZUs0K2tiNWNmU3EwOU8rUTl2NWF0VjB5ckdIbU5UM3BHSWRtSTgyUUE1MG9yYWNxZ0N0TUtZbnBZeWFUcCs1T0luTUJqOXh1b2lPdy9mdm9KSGVJN2NaVlRPdGxiZ2RBSDJmVGhtL3RFY05sczY1SVZ6WmNvVlNRZ0s5SUdqYVd6ZHBGTzBlUzRBQm5Vb2RNKzRLRmowejdKZE5nT08vd0Jtcms5TytYVExKK3BUcjNRUnB6K25nMzJqR3BmNTVQWE43UlArd2RubG83cVRPZFBBVkdrZCszTmFpdWFTWlZ6eHFMOXh0dzU0OGUzMWtOMVh5S00zRXFXRXJVbzZiRTJXVGpaeCtremY3bVQrWXBWRUZCS0kvWnZxeStkN2g5djVhbGtnNDBDMTdDUjExOW1NSFBrKzJTMDV4K1lEYkxQY1FIaUJsbFVaanZKRTdLZTZ5Y0RRNW1sZWpHRXpQbVFGYmkvaVl5TEZSeWNTSnMyaUNaRENvczZkTEpsQXBTaUFDSmpHMkFOWXhSTkplWFNCUlZ5MzMrN0gwQzc1SmI4c2JCTTl3ZEtyQ1NlSjhLOGN0ZlVlR1BvVmUyT1d5eHZGbkZOY3RTaTZrdEIwbUVadWdYRWZJUlFqUklmQ2JjUjZvRk1CQis0UTFseHkra2tPMlF4U1pIUjJmZGo1bC9XRzhzOXg1KzNHK3MvNlV0d3hCNzNSUmZ4QUhPblVNTVhFcFRGRXBnQXhUQUpURk1BQ0JnRU5oQVFIb0lDR3B3WmNNVmJoTGRMeFpUZUUzSnBTM0hwZWNweW5TRnJISEViZWtJdkVPTWVOMks0elAxdnB4V1M3bEw5UnQ4dDV4eVJPU3FVQkV5ODBWbEtFVlhqd2N1eXRqb0x1d3NxNDNDNDVvMkw0Y1MyaVhLcDVoUW1lVzVtTnVqMUFPa3d3Ukl2bU9pYWtJREZWMUFxdUlWSWtzYnJYcGtNWk9tdmNWRjFrY2M5VE1UUUUwUENwcG1jWEZqNG45Z3ZjOXk5ajVFQVpVUG1uaUNKenpYR1JOa285dG1qREJvekgrVGlzRzVQeXdkMjJsU2NMSk94QXBSTTRaS0ttRXgxaDFGWGJmcWZKMXRJby9NMjkzVnlUeEVyaWxCMmR3ZEo0bkxwVU5iYmRwRUhnbUFQdlZhL3Y2c05EMEZZbXNJRHMyUnNOUHVUbk5IKy8wUmEzMUd5MXlPd3B4bmpyUlRmMVlTZnhhNTQrY2RKL2tUQlgyR2RVU09rN2l6bVlISjhLMFBIdVk4cWE3Q1Nmb3V4T1ZOQlFEVzNhMmU2bllkdm0ycDQxdWJTMnVKUXI2Tk1xelR4UXZFUklRaFZrbmJXckVoa0RMVFBBeXNrSnVwZmlGWXJLeUNvclZTcXN3YkxNRUZCUWpnYUhESHVJRmJ3dklLM0xLZU91UUdTZVRsbGsyY0ZRNWZJMlZKbUlrNSt2MXlBVms3SENVV05aVitpNDZpSXVQYk9iU3U2V1VOSEhrWHFxcEJlT1Z6SXBBa0Y4eFQ3aW9pc0x1emdzWUZMT0k0bFlLek5SV2tKZVNSaVRvQUExYUZvZENyVTFtTE5JZTlMSEkwckdncXhGUUJVZ1pCUjA5VlQwazB3YjJoakQ3Q3dQZHZ5NnRpM2lGYTQyUGMrbmw4anYyRktaOXB4SXFMUjg0VFdsekpHM0FTbUpISW5EY1BoM2FDdWZkeU5oc0VnWHh5MFgzVkZlZzlIMjR5eitUTGtsT2NmV3V4a3VGcmFXS3ZNZjhYbHVFR1RvZUlKcUs4T0I2TUx1WHBvemlTUWpDSEh4Tmt3N3Z0RHVFVGIvQUIvbnRyRm02bDF2a2NoOTlNZlJoeXhhQ0cyRWg4UkErd2R1QjlUcjhuZkxkV0tEQ3BtV2tyTk54MEsyVFRMM0dGWis1U1E3Z0FBM01DWUtkdzlQZ0d2WGE3UjcyOWp0MDhURWZ0eEhSMjRHL1U3bW1EbGpsbTczaVkwanQ0UzNBbk9sQU1rYzVtZzhKeHNqd2Z5QTR2ZTNEVktSaDY1UWx4ZjJTdlVxdnZwQWF2Q05aQm8yY1NUQkpjNTNTcDNpQzR2bkN2Y3FZQkowS1l2WFdTUzh3Ykp5dEdtMTNSWU9pOUFjMXFBYThHcFhqeE9ORU1ub1g2cy9NVmMzSFA4QXNVY2IyZDFPMU5jbHNsQ3JhU0JXU0ZqcElwVXhyWGlLOGNXRm1uM1h1Qi9KTEUxMHhCZUs1bEJTdFcrR2N4YndGcTAzUmNOQlVUTjRIelU1cEFRVGRzbFJLb21iN0RGL2xwcmY4OGNwN3BZU1djN1Bva1duaGs5dlFCMGpyd1RjamZLQjh4L3B6emJaYzE3SkJiSnVWckxxVStmWk4yRVVlWjF6QjRsVFRqVENKdUllRE9FV1JPWUVMU2FKTDVSeUZaaXJTOHBWMjF0ck1QSDF1TGJ3emRkNHM0a0Zta281WGNPRzZKZnl6ZUh0RTRCMEQ0NkMrVXR2NWRrM2NKWnNaSmVJeWtXZ0ZUWE0wT01tdm1rNXI5YzdQMDMrTDVwald6c25ZTEtBMWhNR0owZ0tER21zQUU4UUJXdWZERzNmRGRGUm8xV1p4NkpTbEVFQ0FQYUd4UjZCc0FCc0d3QjIvZHErN2VOVWpCSEduN3YzWTAzYm5jdGRYVE8zaXFmMjRERndhOThSK0ZJYzk2cmpOSE0rTWNrejg3ZG9HN3hzTXdyOVJuc1o0TXdSa3E3VnFkYlRqMldhdUsxa0hrSEgyU2g0d3QwdXpmR0sxT1dQUmszU0RZZlRPRHFGU1RMWUhLVjFlamJwN0tKWW50R1lzNlN6M0VVYnJwQTc4ZHN5U1NvcEZUM2lxazk0VXFjUkc0UnhHWkpHTENRRElxcU13UFlYQkNrK3lwNk1mdHl1Z25HTDhyZTFaa0JhdzNDMVMxVzVJdThPek5xdng0WTkzbW9MUGVMYlBBUEFzNnRkaUlLRUpLTDI2TGhqckpzMmJacVV5SGFSSXBTbEFQUFpybUs2MmpmSWdzY1lsU0psV1BWb1h5MmRpRjFGbUk0VUxNVDBrazQ4cjFDbDVhTXhaaUMyWnBVNURqU2dyN0JodEc0ZnNBNkE4VGVvWVZwd0tnYS9JNWs1L0t6a1V5ZjJtbGM5TDVZNisrZXQwbDMwQ2piOEs0emlFbjBZc1lCTzBVa29NWFRZVEYyTUxkUTVOOWpDQW1mTUR6eDdQdDNsc1JETGJzckFIeGFYVnN4MGdFcVIyanN4Q2JZRU04MnJObEsweTRWQkgxNGFab014T1k2RHY5bjdmNzZXRjBkdU00UHY3M1F5Q0hIdWpsV01VcXp5NVdaWkR1MktjR3JlSmpVam1MLzh0aGRHMis3cnFtL1ZtNklqdGJUb090aDd0R1hEdEhUamFqL2JRMktLNDNYbUhlbUg1a1Myc1lOVGxyOCtvcHFBenAvQ2ZhTVpITG03TTZuNUZVUi9DcWNvYjdDSUFYY051Z2lIVGIrUTZ4L2NsbUpISEc2N2JZeEZab3Y3Y2NFWjdZMUQvdVR6Z29CWERVcnBsVXp1clFzVlFvblRJckhwOXJVVEJ2MDdsRGh0djAzMi9kcXdmVHl6K0kzbFpXR2FodnJVOW80WXdQOEFubzVyZlpQUytTMFJxUGRUeGdtbGFxazBiRVUwTjJaMUI5dUhKOHEvYkM1bDVZemJkY254ZVM2YTNpTGxMZ3ZCUXhVNVV4b3VDSVJOdEdNVmU1c1pJRG9OaUFCZ0tPMisralhmT1F0eDNYY0h2ak5wRFVvTkNtZ0FBL3pCMWRXTVdQUno1MCtSUFRma2l6NVQvVE5jMFdzczN4RndLczhqT1RwK0JsQXFXT1FjZ2RGT0dFV1h6OVpVQ1J0OVpsWk5oSXVhdkt5RUE0azJTUWtRZE9XSzZyUmRSRGNwRGR2bFRNQWJnQTlOVXhmUXlXZHk5b1dxVU5LMEE2and6KzNHMS9rN2RiUG03bCt5NWlpajhyNHVMV0YxTTFNeUJtUWxlRmZDUFpnMC9ZM2gzOWc1aVdPMkZLWXhxelZsa1UzQWxFZGxwcHdabW9rVTRkd0FZN2NUQ1A3ZzFadnBaYmg5d2ttSThJL2VPdnR4cncvdUo4d05IeWxZN05YS1dWNmovRG9JTmRQU1J3MURHKzJESVlrV3pBLzQvQ1R1L2pzQWYwMjFrTW5oR05KTG1yazlaeDdiWGJIWENRK2NQR3lOaDg1VE9Xbjk0bGs2L215R3ZzZlpvaHI3Y1dSdWFZMUpwTjQyd2ZpdTJQeVcvR0x0WnBqOFY2N2lpS1hpenpNUS9kbWNMU1pVenVXZTdSdmFYS3U5UFB0Uzdja1MrZmFOR1ZZN25GWTZpc3M4cUFwTm5KUnBuRGVXNkFBUjFDdjNtZ2R3dHdsd1ppeDBTQnFqeUdscFZVVTVyNGNsRk5RUFR4R1E1N3pLcE1MUnNjY0E2alhIOG5KcFNIdUU4V2JFd2NURGQyMGtuUHJjamt1TTRBTlpOTXN5d2F0R0hxQlJhdlZGWFRKb21Wc1pRUVNLQVFXMnl6M3Y2bGNTQlZLMjFEU2hHVlFPR1JKcG1WeUpxMU04ZDc1QXIyNmlyRFVUbmwxSDl2b3czL1FWaWJ3cm5qc3NHT3ZjdzU2NHRjbTlPMXkxUk9QWEphcUlHSDVYU0tOZWY0aXZLallkeEFSWldDcnMxSEFiYmdMNUxmb0lhTnQ2Q1M4bjdWZEExa1JyaFg3UHpPNy9BTks5QTl2YkRXZjVlNVR4ZGlVK2ovamhqdGZ1MVJ0anljWVZpelFjKzdyRWthSHNiYUlsR2tndkJ5NUNkNTR1V1NiS3FIWVAweUR1WkZVQ25LQTlRMERKSWoxMEVHbUNhNjI2K3NvMGx1NG5qamxCS0UvaUFwV25zcVBwR09VZnc2ZnYvbis4TmR0UXBYRExHVjcvQUNEQWN0c3JjZEhadTRHcTlOdXJVcGhFT3dGMHBXRlVNWC90N2pKcWdQOEFBTlVmNnVFaWV5WS93eS9iSGpjRi9iQkt2dEhOTVA0L2lMRS9WZFl5MldEY1pPVEVRK0t5L3dEcHViYlZHdjNXb01iZ3JiSzJXblZobS9zVXhDVXB5K3VpeXBRRTdLbU5SU0ticU95OHVraWNkOWg2Q1g0L0RwcTNQU2tLMTlJZUpDajl2ck9OVmY4QWNYdUpGNVlzSXdlNlo1SzhQNWV6RzZlMkdpYXhqbWNzcjVOQk5LdjFlUWt6TEtGTHNtVm5IbldBdzdsSHQ2azFmYzdMRGFQS2NsVlNUalRkeS9hVGJyekRhYmZDTlVzMXdpS01oNGlCU3RSOUpJOW94ODQvUGt5RWcwbnA5VXBFM2RtbjVTWlhLVWZ3cVNMcHk5T1hmb0lnQjFSMWh6dU1qWEU1bDZXSisydlpqNm5PU2JKTnMyRzIyNkx1eFc4S0lPbklLS2NTVDBkSlB0dzNYL0hkb2huc3ZsUzVySUFKWDFraUl0c3NKUU1QaFpNblN5eENpTyt4ZkljTjloMWRucFhabExPUzRZY1NQdDl2M1kxRS93QnczbUEzUE5GcHRkZTdESEpYMmtJZjRSMTlaeHRKYWs4YlpBZ0IwS21VUDRkUCtOWE5qVjBhazF4NU91T25DeFhPU010NHp3L0dSa3prKzhWdWh4RXpNdHE5R1Nsb2xHc1F3ZHpUdEJ3NWJScWJ0NGRKRDFLemRtcWNwUk1HNVV6RDltdkdhNHQ3VUI1MjBnbW5UOTJKZmFOajNUZlpuZzJxRXpTb2hZZ0ZSa09yVVJVOVFGU2VnSEFFOHNIYU9TZWEvdHk0a2pWVVg3T0J1bVZ1VFZpS2djRkUwNGZIT09IdFZxTDFReFJFaDJybXpaQklkSTI0aDVtNWR2czFZUEwzbDIvS0c4WGpMVnBGZ1JEWCtjaHV2b2RlUHU3QTdjRWVUZGJhRVpHTm4xZG1RL2RobmU0L2NQOEFUL3JvRnhOWVZCejZVUHg3NUE4UXVjN2RNNkZVcGx3ZThidVFzaWtBK0dNd3BuaDNHTVl1M3pCOXdLbENVSEpzYkZ2SFp4Nkp0MXpxZFJUQXBqcmxaVjNYYU53NVpDNnJ1NGpWb2M2VVpDV2JQSVowWGlRQm43RENia1RhM2NGOS93Q1VyZC82cWRaNitBeHhIanBqeUo0czh1SmVzVzIzWVhvcU9XbkZ6Tml4aEV5YmdjazUraHBtYWMzSDZ6ZFVBajJzZUVyVEpLUU0wajNDN3Q2NmRBNGRKb2lra1lpUTB6WTI2N1R1UnM1R0NsaVFncG00RlNTYVZBcC9NYW5nTVpWYzdiM2NlbzNJcTcvWVFOT2JVcTEwNFlLdHV6bFVSVlZ0RFNheG4rVWpLZ05XTlN4dzR6K25YL2ZjZjM2TEJ3eGpmWHJ4bkYveUlhUzdjWXV3Umtwb2ozSTFpNlRjSEtMQVVmeW1rL0hNaGJDWWRoQUFNOFlnSFVRNmpxbi9BRmN0QysyMjk1U29qZGdmK2JRQjA5blZqYUovYkk1aml0T2VkNTVhbE9kM2JSU0tPMkVUc1RrcDRBOUxBWjhDY1pEcklUZVFXVUxzWDFCTzh2VURmakRmL25XUFJwV3ZIRzhDMUpNQVhxL2ZoajNzZDJ0bFZ1Y2JpRWVnSGZjS2k4WXN4RXdGQUhFZTVSZmg4VEFBaWNwUis4ZXVyVDlMSjBoM1JvZnhFZnZ4ck0vdUhiRk5kOGdXKzV4K0NDZGllSDRtakhTdzdlQVBER3g3M0M3MkZCNFM1am1VMWdSY3ZxZjlDWW5NWUNpTHFjY05vOUlDN2lYYzRnNEhiWWQvdTFkZk5kMThKeTdQS0RtVUFIdkk3RGpWYjhzdkw0NWk5YjlqMitRVmpGeXp0N0VpZHY0bDZSMEd2Vmo1OUdmMzRJc21iTURDQUpvS0tpVUJFZHZsRUNnSTlSM0VSKy9XSjg3YXBWSUdZUDdzZlN2dDZlVHRydDA2QjltTlJ2OEFqMTQvQ0k0OXNMQVpNM2tzMWltSmc1ekFQVlB2OU1nSUdINGxFaVlnR3NqL0FFOHQvSzJTSnorS3BKOS90OTMxNDBEL0FEdWI4ZHo5WEx1QUhLQUtuMHFLL2hIMyszR25vQTJBQUQ3UDNmOEFHckl5clhHRVdPZ2pzQWp2OWdpSDhnMXhrdzdNYzRSenl5eU55UXR2S09wWU1MaktuWmF3ZFk3bFRsNUd0M0RFVHkvNHhrYWZMeW8xeXpITGxkQ0diUmxReUxSQ1Y1eEpCSHVnWFZFWlk0Q1lXellxMmc3Y2JqYzMzZExTTlE5bXpBVTd0RFVEOFI3d0lQVWNaVWNoYkZ5QmFlbmMyL1hNN1czTml4TXdsQXVDMGRISVg4b01ZWkZkYUNyTHBGUlVWcmdnT0huWm56bGp5cDVlb2tJdlFJRDZSeEp3QThLSUhhdTZ4aTk2ckk1anNzU3FRZlRyc0xKbEZRakVGQ2JodEFBVGNERk9Hcnc1b2lqMmJZZHY1YkhkM0dKWGU0R2ZGaUdqQjRxYUt4SGRZK0VhZ0RRRER1d2Q3MituM0p6cVNSdTU5WWJ0NnVJOW1HajdEOS85TkFXV0p6TEZiWml4VFRzNTRyeURoN0lNYW5MMHJKVlNuS2JaR0J3Mk1wR1RyQlppc3MyVTZHYnZtZ3FnczNXS0pUb3Jwa09RUU1VQkIzdDE3UHQxNUhld0VpYU5xNVpWNkNPQjRna0hJNUhoanduZ1M0aWFLVHdIOXZ0d2pIR05jc1ZrUmxlTmVaYTNMNUE1dThCWStOUXhXM0Myc3FDNDVUNENSdEVISzRqeUYrclh4UEdTT1pPYXl6UnNLYWFvcXB2bVN5UzMvd0J6ckllb0d3UVhxdzg0YlREcXRMaXBDYWlDakxrOVN6WjFjTWEwNDFBeUtrbm5wUHozZWJCTEx5amZYWXN0c3VQNmt2bENiVFJXMGpRRVpqcXFFcUdHblZxTlFDTU5KNGRaK21zeTFtYmliVllhOWU3blNKYVJoN3Zkc2ZRenVLeGduYVRQMW5UcWlWVjlLTzFIdG9jVWxnNmJzM2traW1WczRYSVlSQkZYdVJLSGJUZVBkUTZaVzF5cnhhbEJ4NEFBVXlHVlJXdkh0dy85UXVXSU5odjFtc29EYldFd0dpTXVYWUJWVUZtTE1YR3MxYWpCYVYwMEJCQTRiN25lQmo4aHVHV1lhVXlhZzduNCtDTmFxeW1BZHgvcmRiVUpLTmdUK1lvOTZoVzV5YkIxRUIyKzNiVVp6anRuNnRzTTFzQjN3TlE5b0lQV09pdlRURmdmSzU2Zy93RDV2NjBiUnYwamFiUnBqRkpsWHV5S3kwL3B5SE1rQ3FyWFBJNCtlRkp5aUpTZzJkaVpCNnlVVWF1RWxRRXB5S0lITVJRaHdOc0pUa01VUUVCK0FockVXUkdqYlEvakdQcDJzNysxdWJlTzdpYjhtUlF3eVBBanRBUDBnWXNQaWRseERDWExMQ21UQ1BBU2pveTd4RGFYTVUreFJpcEp3Umk4QlFSMzJUS2t0M0QrNHVpUGxLLy9BRTdmSUptL2lwN2E5SEE5T01iL0FKbitUWWVlL1M3ZE5yaEZaL0kxeG1weVpTR0p6ZU1IS3VSTk96R3hEM25NeFE3RGh2am1KTElKbGE1SXRWZmVKT0NLRDQxWStKWkZuQ3FmTCtOTlUvakg0aDFINERxNy9VcStST1hVaVU1eU1Pam9VcWVycXhxZStRTGt5NnZ2V3VlK1phdlkyckFpb0djaVNDdmpIRFQyL2ZqRXBtKzB4OHhJckN4Y0VXUkFoRUV4RHVEY2Z3OU53MzJNSS9jRysyc2RGL09uQi9EVWZkamVQZmsyRzBORStUQ00xK2ozNDNlK3pkajhLYnhXeE16TTI5T3Qram9wMHVYc0VnbVZmSW5lbU9ZUGgzR0l1WGZmcU9zc3VVclg0YmFJVUhBSjl1WTZUMFkrYVQ1Z3Q3YmUvVXJjNzROcVJyZ2poVHdnRCtGZWtIb3c1amZwdjhQMi9mdG9wTmZmaWllR0FiNW44aTZ0akt1UitNbzNOQ2VIY3ZaRmN4c2ZScldXbHJaQWpxcS9jVE1hemlYOTRoa202N2VNcU5pbUhLRVFkMDRNZ1h2ZS9sbktjdmNXRzNYY0liZFZ0eEw1VjFKNEcwbHFVSXJsU21ZTk0vYU9HTFQ5TmVUNzdlTG1UZjU5cy9VdVhiSUh6b3pPTGVwWlcwMGJVSEpRalhSUVFhYVNRR3dEVndZM1BqL2pwSGo5aWlCcjFhNTU4N1pkMnBaNE9oMjIwMmJIT04yZytyajhrOGpJeUptanBoVXE3R3hDeWo5UkpFamIxVXl1azJLcW9vVWh0SFBwNXkvYndMSnpQdTBZWGJMYWhrN3g3enRsSFFLMVJSbURaQ2xhQTVWMGlucWx6bEx6RHVjZXlXRndaOXVpcUlXS0JDb1lMNWdPcEZkcVUwNm5OU0ZyeE5TM0RCT0dhZHg2dy9qM0N0Q2JHYlZQSGRhWTE2TUZVcGZWUGxFQU12SnpNaWN2UmFWbnBWZGQ2N1UrS3Jsd29jZXB0Uis3YmpjYnZ1TXU1WEovTmtJcnc0QUJWR1FBeVVBVm9LMHFjQ0Z0YnBiUUxCSDRGSDJtcDYrazR0clVmajN4Tkw3TUxBSWMwK0ljbm54dFM4dFlZdEtPS09XK0NuRDJid1psVVVUcVJ5aG5wQ0p6Mk5zaU5HeGZVMkhHRjRZbE0xZnMrNERJSE9Wd2w4NUJJb1VjdDc4dTJNOWp1S2Vic2R6UVRSMXBXbGRMQmxCY2FTZFZGSXI5R0kyL3NXdU5NOEIwM2NacXA0OVhRVFRvNmNDL3hDdFdMdVJHY0hNNWtBdVFPUG5NUGo1Q0JYc2c4VFNXUkd2VXVxbmR5SzBoWjhpVVdBaVc3WnJrU2daVWZQa1ZUeXgxWHFSeUpvRkVxQys1MVdYTWZKc2UwM01XODJyR2JhSkttR1h3MXlHcXFhaXdwbUtzQUR4RktnWU1kdTlTZDB1T1hYNVFjS29rMGlZRUJta0tzR1FsdEhkb1FLQldHVkFjcTFMakh2TE92WmR5MWxTbFJMQ1Avcy9qdFJ0VEhtVjVDVGoyMERaTW12a1dDcjJod3FieDAyZHZuMFExZUhLNjhiZFpFRmc4ZmxCUURKNkRiZmNVdTdwNDlJK0ZTbEhyNGlSVWlsQVJRNEw5NTVCdU9YTmkyL2NtbVorWWJrdXpXd1FWaFZHb3JhdzdLd1phTndGQ1NwcVFjSWg1RmV3MWlMSkY4c3VUOGJaUnVEZXUzK1pmMmhtd3JpTmFrYTgxQ1hlS3Uxa29WNGtnZnpSL21VTUtZOTV3MkhiZnBxdmIzMDIydTV1M3ZBMlVqVjRNZXc1K2FQc0dNeWVWZm54OVJPV2RodGVYTHFFdkpheEJOV3EyV29HWTd2NmUxTWovQUJNZXM0SEV2K1BYQ0M1UVUvdWprMGdwSEtZcGl4bGYzS1lwZ0VERk42Y0FBeFRCdUdteSttVzNxS3EyWTZhTi93QzdpZHVQN2dQT2x6R1k1YmFxa1ovbVFaL1J0d3cwSE92dGN1T1MyQThJNDN2MlpNbUlEZzJ0S1FFVXN5WlFSMWJJWXlMZHUzbFp3amhtb0FTTFprMUtpVVVoS1VTZkVCSHJvajNqazJIZUxPQzJ1WHloQnBrZW1uVTY5WFdjVWw2WGZOUHZIcFR6TnVtL2N2MmxMamRUSHJIbXg1YU5mK1phVEExOHduSlVwVHA2Rmd1djhlcUFjU0NhcHNuWktXU1NkcHE5aWtiWHdCVXBGQ25NVTQrbTNBREVEcU8zVGZVQkY2WmJaQ1JLR3JROVQ1NS82dUxsdi9uODUzM0cyZUNhM3ByVWl1dTN5cjdOdUdOU1hGWEZ3WWl4bkExZGZ1U1FnSWFOaWtsbHUxTVJiUmJGSm1tb3IybElRb2lSQUJOOW0rclNzNEJhd0pFUENvcFg2dXM0MTdjeTdwSnZXN3kzeC9xU3V6VTdXTmVwZnNHS215Tno4eGpFWm1tdUxOZmR1NGZQRDFvc3pwZzJxS1VRcTB2TVN0ZFpTMVBjUmpuMVNBVHJHeHZaQVd6YnNVUktkVmk3N3pwa1JBeDR5ZmZyWDR4dHJoYi9BSDlLY0RrU3VvWjAwbkk5ZE1XQnMvcEJ6Qy9LOEhxRnVVUS83UUoxTXdlT3BWWmpDNEtpVVNyM3dRU0VMZElIVGdKM0ZyczJBbTFBeVR5c3JFWm0vd0J3UzFQN2ZYK01HSEtVV09ISnJtdldvckp5ZXBaSGYwNlQvUmt6VTZqS0pxUFZaVndrRWJFTmlpZEpVeXBUcWlUOGk4bFh1K0wrcTcrL2xXdHRWcEo2QStXQ0RwN2lPTlphZ0dRT2dHcmRBdzA5VS9VYmw3YnA3bmxUMHNyRnlyZHBFR2ovQURHRXJJQXhJYTZqTTBlbVN0ZThvZW1YZDRueHhFNHVXZkY4amNjOVorc0xISVhLN002TEpUSU5vWXBpTmF4OVdtK3ppSHd6aXdpNlpYVEdnMWRjeGpuVlUvOEFabEh4anVWaEF2Z1JSSXVaZVlJdHdFZTJiWW5rN0ZiRWlOS2xqbWFsaXpBUFJqbUF4SkZmY0tUMjZ5YUN0emNIVmR5WnNlSHVvRFQ2Qmc1OUN1SlRFMHNMRTBzTEUwcWRPRmdNT1dQQ1RHWEtWT3VXMWVUc0dLczhZM1VPK3hIeUV4dzYra1pJb0VnQUxDVnFEc2dsYldXcFBGRnpldGhwRXE3RjBVdy9LUlRaUXBIc1hNbDNzb2UyQUV1MlRmMVlqUUJ4UWltclNXWGorSGowMXhIWHUzUlhiTEw0WjA4TFptbnVxQWZmaFEvSTFqbGluVjFqajMzRU1VVDdtdHdjNU9UdGI1OWNSc2ZJMjJuS3kwL1dYZE1rTGZ5QndhRUxLdWFWWXpRRHhNQWt5Tm56SnU4U0tacXNnS2FZbmM3bnlUeTl6bENyY3NTaUhkQ3RSYXNIWXJRZDZrc2pxcjFDNnVKcFhpT0dEdmtQMVg1ajlPdHdNOTRueE8yeVVFZzFJbXZUWFJRckc3SnBMZEFvd3lZRWNDTHdSa2JLcEpKM044VGNoNFF6OXc5eC9pT3lSK044ZDRzdEVGWUxVczhxTk1yVExIVlZuSXQ2Q1ZycjE5a3JPcStQS0hWZEMzRnVtUWl5Q2JwVHZDdnIzWU9adVc3OW9MbU1pMGpGQW41ZlZRVWNGcTU5NDBKSEVWcmxpeUg1bTlMK2RlWFVhK1V3YzV6ekZwcnBtdVd5ODNVVDVTcXNOQkYrV29BQnJUSURQQkdPZVlPUnNjMjdDbU1NdzhlbjQzYkpjVldIbGluYWRLSm9VYXV5RnBzYktBVGc0cVNzN2VPSllwMnRwdlFkeXpGRmNydEJxUVROMDNRaVVvdFR1bHhETEZCTkRSM3JVaHVIVHdwbWVqanh3eGc5TzlrM2ZhYjNlOW0zTW0ydFdVS3JRSHZsbTBrbGpJQ2k1YWdTaEpVaW9CcU1ka1I3aE5TdUNMVWFyajIyUkptWEk2azRGbjBiQkdNSkh5RXQ2a3NSdllZeHpCMkF6Rk9NVlNqQVdLNU1zNE1ra29ReDJ4dThBRG0yM3VLNXI1WUpBZFFld05XaDRkbkQ2OGNidDZRYmxzWmorTm5Vck5ieVNJUW96TVdqVXVVaE5QekY3eEFQOHVQVWN2OEFQSExER09lTWMwWEEySFZiM1M1aXR4OXNtM3pXbDJPYkNVY1JsNmdJNnlVVXRxWXRsS3hUcHVhcUQ1eXJHdVpWWnExU1dSTXFxb0taT3cvWGM3bmRJYnlOTEdQV2hGVG1vNnNzd2Z1K25EMzA5NWI5UHQyNVp1OXc1cnZ2aGR4amJTaE1jejBxRzd3RWJxcDZCUWhqMGtVeFd1Y1d1Ym5VdG5kbnl6enppekNIRUd4MVdYaHE0eW5ibkIxYTBvU0tVclg1K21UMGRKVmRDdTJVeVJUdDNVZktNRlpneDNnQVVpYWFxYXBnRnhhY3Q4eTh4WGt0Z3FzOWpNVUNLQW1YQW1yQmxJN3d6MXNCMGNNZTBQUFhwcHlQdFd6N3J5OWFsdWRiUTNIeEUzbVhGSERsa1FtT1pIaEZJbklIbEtjNk14RENocGpBRnh5eGVxcFRxWHdheFdhMjJhdVVsYkhNcjdpUElTbXpOTm9xZEtQWUgwdWxGWXVoSmxCVzU1Y2FRYmx5UVdDQ1BoaGZJM0tDcXlmemRsbDJISnV5Y294S2VhNXZNM0tKYWkxQVlGd2FGUVpJM2RWcFhyekFwcUZTQlVmTzNxRHVmUEc2WEUyMVIvRDdWT3ltbFZjQWhBSE5XampZNm0xRWlnRlR3UEhETmVNWERTajhlSDlpeUpNV0d3NWs1RFpBUWJreVpueklTcEhkd3NaVURHT2xDUURGSWZwRkVwVEZRK3plSWkwMFVOaWxNdVpkVVBLTEhmOEFtZTczdEk3UkZFVzBRWlF3aWgwQWdBOS9Tck5VaXZlclRnTUNsanQwTm5XWHhYRGVKczgvZFVnZTdCamFHZ0FNaGlSeE5MQ3hOTEN4TkxDeE5MQ3hOTEN4K0svZzlPdDZydytsOFNucVBQMmVEd2RnK1h6ZVQ1UEY0OSs3ZnB0OGRMQ3doN2t6RSt5dE41WGNNSlcwUXRRNUdMTG1CN09jTEcyV25lWVdzbDV6ZGhyU2h4WHI5bFdOTUE0LzhmMXBvbzQzMjdPbTJyUTJCL1VlUGJxN2FwZmJhOEg4Z2RYOFpFbFBxd05YUzdFMC9mYlRjVjZwRG5sMVpZNS9SZU1PZlY0OXMvNDkrNXB6VGdZVlFvR1pRbktUakRLWkFWUVNFVENnbWMrVk1lWWt5SnNVTndONnQ2b2NTN2JpSFFkTkpkNDJlSTAzWFo0SlpPa3gzWVhQcHloRlByeDJqdHBTZjl0Y2tITGpIN0tlTDNZc2h2Z1gzTVFSQnVUM0JzQm5ZRmVDbU1nVGhZdytxS1B1MDVSY0tORTh4a1JMTjdmTVl1L2QzOU5lYTc3eUhrUnNUYXEvL01uOTJKRTJuTUhUZDkvL0FFbzhjVXQzR1hrWVJtczl6eDdsbkxXV2lTRk9aZUo0emNZVFVKZFlnRk1LeVpWS05SOHYzanRNbnVCZlN1a3pnTzNhTysydlZONTJLVnFiVnMwRVVuVzkyR0ZlaitzS1lZRzJrVWY3aTVMTC9wMDZ2NFRpcjhKUW5zNlFHVkdVZFpiZ3RkOC9wUEErbHozT3hwbVpsZTNNdjhERFVHL0tHdFZXQkpOZDRDSi9valFqcnI4M1RiVC9BSGgvVWlUYkdOMG5sN1hwR1NHM1BkcUtVMEV5VTRjT2pqbGpwWnJzYXVCRzJxYnJJa0gyNVlla3o5SjZWdDZIMC9vZkFsNlAwbmo5TDZieGw4SHAvRCtWNFBIdDI5dnk5dTIycXJPcXZlOFdDTVVwbHd4NU91TWM0bWxoWW1saFltbGhZLy9aIi8+CgogICAgICAgICAgICAgICAgICA8aDEgYWxpZ249ImNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OmJvbGQ7ICI+CiAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+ZS1Ew5ZWxLBaIEFMSU0gQkVMR0VTxLA8L3hzbDp0ZXh0PgogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9oMT4KICAgICAgICAgICAgICAgICAgPCEtLSA8ZGl2IGlkPSJ3ZXRzaWduYXR1cmVpbWFnZSI+IC0tPgogICAgICAgICAgICAgICAgICA8IS0tIDxpbWcgd2lkdGg9IjkwIj4gLS0+CiAgICAgICAgICAgICAgICAgIDwhLS0gPHhzbDphdHRyaWJ1dGUgbmFtZT0ic3JjIj4gLS0+CiAgICAgICAgICAgICAgICAgIDwhLS0gPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiRpbWdTaWduIi8+IC0tPgogICAgICAgICAgICAgICAgICA8IS0tIDwveHNsOmF0dHJpYnV0ZT4gLS0+CiAgICAgICAgICAgICAgICAgIDwhLS0gPHhzbDphdHRyaWJ1dGUgbmFtZT0iYWx0Ii8+IC0tPgogICAgICAgICAgICAgICAgICA8IS0tIDwvaW1nPiAtLT4KICAgICAgICAgICAgICAgICAgPCEtLSA8L2Rpdj4gLS0+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPHRkIHdpZHRoPSI0MCUiIGFsaWduPSJsZWZ0IiB2YWxpZ249InRvcCI+CiAgICAgICAgICAgICAgICAgIDxici8+CiAgICAgICAgICAgICAgICAgIDx0YWJsZSB3aWR0aD0iMTAwJSI+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPSJyaWdodCIgdmFsaWduPSJ0b3AiPiA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPSJyaWdodCIgdmFsaWduPSJ0b3AiIHdpZHRoPSIyMCUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJxcmNvZGUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0icXJ2YWx1ZSIgc3R5bGU9InZpc2liaWxpdHk6IGhpZGRlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Im4xOkNyZWRpdE5vdGUvY2JjOlVVSUQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXJjb2RlID0gbmV3IFFSQ29kZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgicXJjb2RlIiksIHsKICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA6IDE1MCwKICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgOiAxNTAKICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbWFrZUNvZGUgKG1zZykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbFRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidGV4dCIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBxcmNvZGUubWFrZUNvZGUobXNnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VDb2RlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJxcnZhbHVlIikuaW5uZXJIVE1MKTsKICAgICAgICAgICAgICAgICAgICAgICAgPC9zY3JpcHQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgPHRyIHN0eWxlPSJoZWlnaHQ6MTE4cHg7ICIgdmFsaWduPSJ0b3AiPgogICAgICAgICAgICAgICAgPHRkIHdpZHRoPSI0MCUiIGFsaWduPSJyaWdodCIgdmFsaWduPSJib3R0b20iPgogICAgICAgICAgICAgICAgICA8dGFibGUgaWQ9ImN1c3RvbWVyUGFydHlUYWJsZSIgYWxpZ249ImxlZnQiIGJvcmRlcj0iMCI+CiAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgPHRyIHN0eWxlPSJoZWlnaHQ6NzFweDsgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoci8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGFsaWduPSJjZW50ZXIiIGJvcmRlcj0iMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgc3R5bGU9IndpZHRoOjQ2OXB4OyAiIGFsaWduPSJsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXdlaWdodDpib2xkOyAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+RMOWVsSwWiBTQVRBTiBLxLDFnsSwL0tVUlVMVcWeIELEsExHxLBMRVLEsDwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdD0ibjE6Q3JlZGl0Tm90ZS9jYWM6QWNjb3VudGluZ0N1c3RvbWVyUGFydHkvY2FjOlBhcnR5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJQYXJ0eV9UaXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJQYXJ0eVR5cGUiPk9USEVSPC94c2w6d2l0aC1wYXJhbT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q9Im4xOkNyZWRpdE5vdGUvY2FjOkFjY291bnRpbmdDdXN0b21lclBhcnR5L2NhYzpQYXJ0eSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9IlBhcnR5X0FkcmVzcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6d2l0aC1wYXJhbSBuYW1lPSJQYXJ0eVR5cGUiPk9USEVSPC94c2w6d2l0aC1wYXJhbT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iUGFydHlfT3RoZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9IlBhcnR5VHlwZSI+T1RIRVI8L3hzbDp3aXRoLXBhcmFtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmNhbGwtdGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxoci8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgIDxici8+CiAgICAgICAgICAgICAgICA8L3RkPgoKICAgICAgICAgICAgICAgIDx0ZCB3aWR0aD0iNjAlIiBhbGlnbj0iY2VudGVyIiB2YWxpZ249ImJvdHRvbSIgY29sc3Bhbj0iMyI+CiAgICAgICAgICAgICAgICAgIDx0YWJsZSBib3JkZXI9IjIiIGhlaWdodD0iMTMiIGlkPSJkZXNwYXRjaFRhYmxlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6Ym9sZDsgIj4KICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Ew5ZWxLBaIEFMSU0gQkVMR0VTxLAgQsSwTEfEsExFUsSwPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgPHRyIHN0eWxlPSJoZWlnaHQ6MTNweDsgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPSJsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6Ym9sZDsgIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5CZWxnZSBOdW1hcmFzxLE6PC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9Im4xOkNyZWRpdE5vdGUvY2JjOklEIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICA8dHIgc3R5bGU9ImhlaWdodDoxM3B4OyAiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249ImxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXdlaWdodDpib2xkOyAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkTDvHplbmxlbm1lIFRhcmloaTo8L3hzbDp0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPSJsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0ibjE6Q3JlZGl0Tm90ZS9jYmM6SXNzdWVEYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzIHNlbGVjdD0iLiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgIDx0ciBzdHlsZT0iaGVpZ2h0OjEzcHg7ICI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0ibGVmdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OmJvbGQ7ICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+RG9zeWEgTm8txZ51YmUgS29kdTo8L3hzbDp0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPSJsZWZ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q9Ii8vY2FjOlBheW1lbnRNZWFucy9jYWM6UGF5ZWVGaW5hbmNpYWxBY2NvdW50L2NhYzpGaW5hbmNpYWxJbnN0aXR1dGlvbkJyYW5jaC9jYWM6RmluYW5jaWFsSW5zdGl0dXRpb24vY2JjOk5hbWUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICA8dHIgc3R5bGU9ImhlaWdodDoxM3B4OyAiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249ImxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXdlaWdodDpib2xkOyAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PsSwc3RhdGlzdGlrIE5vLihsYXIpOjwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgYWxpZ249ImxlZnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdD0iLy9jYWM6QWRkaXRpb25hbERvY3VtZW50UmVmZXJlbmNlW2NiYzpEb2N1bWVudFR5cGVDb2RlID0gJ0lTVEFUSVNUSUtOTyddIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjYmM6SUQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICA8dHIgYWxpZ249ImxlZnQiPgogICAgICAgICAgICAgICAgPHRhYmxlIGlkPSJldHRuVGFibGUiPgogICAgICAgICAgICAgICAgICA8dHIgc3R5bGU9ImhlaWdodDoxM3B4OyI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGFsaWduPSJsZWZ0IiB2YWxpZ249InRvcCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6Ym9sZDsgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkVUVE46PC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBhbGlnbj0ibGVmdCIgd2lkdGg9IjI0MHB4Ij4KICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJuMTpDcmVkaXROb3RlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNiYzpVVUlEIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICA8ZGl2IGlkPSJsaW5lVGFibGVBbGlnbmVyIj4KICAgICAgICAgICAgPHNwYW4+CiAgICAgICAgICAgICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+CiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGJyLz4KICAgICAgICA8L3hzbDpmb3ItZWFjaD4KCiAgICAgICAgPCEtLSBidXJheWEgLS0+CiAgICAgICAgPHRhYmxlIGlkPSJpbmZvVGFibGUiIHdpZHRoPSI4NTBweCI+CiAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICA8Yj4KICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXNpemU6MTBwdDsgY29sb3I6YmxhY2s7IgogICAgICAgICAgICAgICAgICA+JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7CiAgICAgICAgICAgICAgICAgICYjMTYwOyYjMTYwOyYjMTYwOyYjMTYwOyYjMTYwOyYjMTYwOyYjMTYwOyYjMTYwOyYjMTYwOyYjMTYwOyYjMTYwOwogICAgICAgICAgICAgICAgICAmIzE2MDsmIzE2MDsmIzE2MDsmIzE2MDsmIzE2MDsmIzE2MDsmIzE2MDsmIzE2MDsmIzE2MDsmIzE2MDsmIzE2MDsmIzE2MDsKICAgICAgICAgICAgICAgICAgJiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7U0FUSU4gQUxJTkFOIETDllbEsFpFL0VGRUtUxLBGRSBBxLBUCiAgICAgICAgICAgICAgICAgIELEsExHxLBMRVI8L3NwYW4+CiAgICAgICAgICAgICAgPC9iPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgICA8YnIvPgogICAgICAgICAgICAgIDxici8+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgICAgIDx0ciBpZD0iYnVkZ2V0Q29udGFpbmVyVHIiPgogICAgICAgICAgICAgICAgICAgIDx0ZC8+CiAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJsaW5lVGFibGVCdWRnZXRUZCIgd2lkdGg9IjE1MHB4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXdlaWdodDpib2xkOyAiPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+RMO2dml6L0VmZWt0aWZpbmluIE1pa3RhcsSxIC8gQmlyaW1pPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHN0eWxlPSJ3aWR0aDo4MnB4OyAiIGFsaWduPSJyaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0ibjE6Q3JlZGl0Tm90ZS9jYWM6TGVnYWxNb25ldGFyeVRvdGFsL2NiYzpQYXlhYmxlQW1vdW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDpjYWxsLXRlbXBsYXRlIG5hbWU9IkN1cnJfVHlwZSIvPgogICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgPHRyIGlkPSJidWRnZXRDb250YWluZXJUciI+CiAgICAgICAgICAgICAgICAgICAgPHRkLz4KICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImxpbmVUYWJsZUJ1ZGdldFRkIiB3aWR0aD0iMTgwcHgiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OmJvbGQ7ICI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5VeWd1bGFuYW4gS3VyPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHN0eWxlPSJ3aWR0aDo4MXB4OyAiIGFsaWduPSJyaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9uMTpDcmVkaXROb3RlL2NhYzpQYXltZW50RXhjaGFuZ2VSYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNiYzpDYWxjdWxhdGlvblJhdGUiLz4KICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDx0ciBpZD0iYnVkZ2V0Q29udGFpbmVyVHIiPgogICAgICAgICAgICAgICAgICAgIDx0ZC8+CiAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJsaW5lVGFibGVCdWRnZXRUZCIgd2lkdGg9IjE1MHB4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXdlaWdodDpib2xkOyAiPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+VEwgS2FyxZ/EsWzEscSfxLE8L3hzbDp0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJsaW5lVGFibGVCdWRnZXRUZCIgc3R5bGU9IndpZHRoOjgycHg7ICIgYWxpZ249InJpZ2h0Ij4KICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIvL24xOkNyZWRpdE5vdGUvY2FjOkxlZ2FsTW9uZXRhcnlUb3RhbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2YKICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q9ImZvcm1hdC1udW1iZXIoY2JjOlBheWFibGVBbW91bnQgKiAvL24xOkNyZWRpdE5vdGUvY2FjOlBheW1lbnRFeGNoYW5nZVJhdGUvY2JjOkNhbGN1bGF0aW9uUmF0ZSwgJyMjIy4jIzAsMDAnLCAnZXVyb3BlYW4nKSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+IDwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2YKICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q9Ii8vbjE6Q3JlZGl0Tm90ZS9jYWM6UGF5bWVudEV4Y2hhbmdlUmF0ZS9jYmM6VGFyZ2V0Q3VycmVuY3lDb2RlIi8+CiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8dHIgaWQ9ImJ1ZGdldENvbnRhaW5lclRyIj4KICAgICAgICAgICAgICAgICAgICA8dGQvPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHdpZHRoPSIxNTBweCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6Ym9sZDsgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkFCRCBEb2xhcsSxIEthcsWfxLFsxLHEn8SxPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHN0eWxlPSJ3aWR0aDo4MnB4OyAiIGFsaWduPSJyaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9uMTpDcmVkaXROb3RlL2NhYzpMZWdhbE1vbmV0YXJ5VG90YWwiPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0PSJmb3JtYXQtbnVtYmVyKGNiYzpQYXlhYmxlQW1vdW50ICogLy9uMTpDcmVkaXROb3RlL2NhYzpQcmljaW5nRXhjaGFuZ2VSYXRlL2NiYzpDYWxjdWxhdGlvblJhdGUsICcjIyMuIyMwLDAwJywgJ2V1cm9wZWFuJykiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiBVU0Q8L3hzbDp0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgPHRyIGlkPSJidWRnZXRDb250YWluZXJUciI+CiAgICAgICAgICAgICAgICAgICAgPHRkLz4KICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImxpbmVUYWJsZUJ1ZGdldFRkIiB3aWR0aD0iMTUwcHgiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OmJvbGQ7ICI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5CU01WPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHN0eWxlPSJ3aWR0aDo4MnB4OyAiIGFsaWduPSJyaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9jYWM6UHJpY2luZ0V4Y2hhbmdlUmF0ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjYmM6VGFyZ2V0Q3VycmVuY3lCYXNlUmF0ZSIvPgogICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdD0iLy9uMTpDcmVkaXROb3RlLy9jYWM6VGF4VG90YWwvY2FjOlRheFN1YnRvdGFsL2NhYzpUYXhDYXRlZ29yeS9jYWM6VGF4U2NoZW1lIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJjYmM6VGF4VHlwZUNvZGU9JzAwMjEnICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PiA8L3hzbDp0ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSIuLi8uLi9jYmM6VGF4QW1vdW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJDdXJyX1R5cGUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICAgICAgPC94c2w6aWY+CiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8dHIgaWQ9ImJ1ZGdldENvbnRhaW5lclRyIj4KICAgICAgICAgICAgICAgICAgICA8dGQvPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHdpZHRoPSIxNTBweCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6Ym9sZDsgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PlRvcGxhbSBUdXRhcjwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImxpbmVUYWJsZUJ1ZGdldFRkIiBzdHlsZT0id2lkdGg6ODJweDsgIiBhbGlnbj0icmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaAogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q9Im4xOkNyZWRpdE5vdGUvY2FjOkxlZ2FsTW9uZXRhcnlUb3RhbC9jYmM6TGluZUV4dGVuc2lvbkFtb3VudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6Y2FsbC10ZW1wbGF0ZSBuYW1lPSJDdXJyX1R5cGUiLz4KICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgPHRkIGlkPSJub3Rlc1RhYmxlVGQxIiBoZWlnaHQ9IjEwMCI+CiAgICAgICAgICAgICAgICA8dGFibGU+CiAgICAgICAgICAgICAgICAgIDx0ciBpZD0iYnVkZ2V0Q29udGFpbmVyVHIiPgogICAgICAgICAgICAgICAgICAgIDx0ZC8+CiAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJsaW5lVGFibGVCdWRnZXRUZCIgd2lkdGg9IjE1MHB4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXdlaWdodDpib2xkOyAiPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+QWl0IE9sZHXEn3UgRmF0dXJhIE5vPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHN0eWxlPSJ3aWR0aDo4MXB4OyAiIGFsaWduPSJyaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdD0iLy9jYWM6QWRkaXRpb25hbERvY3VtZW50UmVmZXJlbmNlW2NiYzpEb2N1bWVudFR5cGVDb2RlID0gJ0ZBVFVSQU5PJ10iPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2JjOklEIi8+CiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8dHIgaWQ9ImJ1ZGdldENvbnRhaW5lclRyIj4KICAgICAgICAgICAgICAgICAgICA8dGQvPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHdpZHRoPSIxODBweCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6Ym9sZDsgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkdlbGRpxJ9pIMOcbGtlPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHN0eWxlPSJ3aWR0aDo4MXB4OyAiIGFsaWduPSJyaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9jYWM6SXNzdWVyUGFydHkvY2FjOlBvc3RhbEFkZHJlc3MvY2FjOkNvdW50cnkiPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2JjOk5hbWUiLz4KICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDx0ciBpZD0iYnVkZ2V0Q29udGFpbmVyVHIiPgogICAgICAgICAgICAgICAgICAgIDx0ZC8+CiAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJsaW5lVGFibGVCdWRnZXRUZCIgd2lkdGg9IjE1MHB4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXdlaWdodDpib2xkOyAiPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+R2VsacWfIE5lZGVuaTwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImxpbmVUYWJsZUJ1ZGdldFRkIiBzdHlsZT0id2lkdGg6ODJweDsgIiBhbGlnbj0icmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaAogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q9Ii8vY2FjOkFkZGl0aW9uYWxEb2N1bWVudFJlZmVyZW5jZVtjYmM6RG9jdW1lbnRUeXBlQ29kZSA9ICdHRUxJU05FREVOSSddIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNiYzpJRCIvPgogICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgPHRyIGlkPSJidWRnZXRDb250YWluZXJUciI+CiAgICAgICAgICAgICAgICAgICAgPHRkLz4KICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImxpbmVUYWJsZUJ1ZGdldFRkIiB3aWR0aD0iMTUwcHgiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OmJvbGQ7ICI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Hw7xtcsO8ayBCZXlhbm5hbWVsZXJpbmluIFRhcmloaTwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImxpbmVUYWJsZUJ1ZGdldFRkIiBzdHlsZT0id2lkdGg6ODFweDsgIiBhbGlnbj0icmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaAogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q9Ii8vY2FjOkFkZGl0aW9uYWxEb2N1bWVudFJlZmVyZW5jZVtjYmM6RG9jdW1lbnRUeXBlQ29kZSA9ICdHQlRBUklISSddIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNiYzpJc3N1ZURhdGUiLz4KICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDx0ciBpZD0iYnVkZ2V0Q29udGFpbmVyVHIiPgogICAgICAgICAgICAgICAgICAgIDx0ZC8+CiAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJsaW5lVGFibGVCdWRnZXRUZCIgd2lkdGg9IjE4MHB4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXdlaWdodDpib2xkOyAiPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+R8O8bXLDvGsgQmV5YW5uYW1lc2kgTm8uPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHN0eWxlPSJ3aWR0aDo4MnB4OyAiIGFsaWduPSJyaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdD0iLy9jYWM6QWRkaXRpb25hbERvY3VtZW50UmVmZXJlbmNlW2NiYzpEb2N1bWVudFR5cGVDb2RlID0gJ0dCTk8nXSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjYmM6SUQiLz4KICAgICAgICAgICAgICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDx0ciBpZD0iYnVkZ2V0Q29udGFpbmVyVHIiPgogICAgICAgICAgICAgICAgICAgIDx0ZC8+CiAgICAgICAgICAgICAgICAgICAgPHRkIGlkPSJsaW5lVGFibGVCdWRnZXRUZCIgd2lkdGg9IjE1MHB4Ij4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPSJmb250LXdlaWdodDpib2xkOyAiPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnRleHQ+RMO2dml6IEJleWFuIFR1dGFuYcSfxLEgVGFyaWhpPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHN0eWxlPSJ3aWR0aDo4MnB4OyAiIGFsaWduPSJyaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdD0iLy9jYWM6QWRkaXRpb25hbERvY3VtZW50UmVmZXJlbmNlW2NiYzpEb2N1bWVudFR5cGVDb2RlID0gJ0RCVFRBUklIJ10iPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2JjOklzc3VlRGF0ZSIvPgogICAgICAgICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgPHRyIGlkPSJidWRnZXRDb250YWluZXJUciI+CiAgICAgICAgICAgICAgICAgICAgPHRkLz4KICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImxpbmVUYWJsZUJ1ZGdldFRkIiB3aWR0aD0iMTgwcHgiPgogICAgICAgICAgICAgICAgICAgICAgPHNwYW4gc3R5bGU9ImZvbnQtd2VpZ2h0OmJvbGQ7ICI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dGV4dD5Ew7Z2aXogQmV5YW4gVHV0YW5hxJ/EsSBTYXnEsXPEsTwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImxpbmVUYWJsZUJ1ZGdldFRkIiBzdHlsZT0id2lkdGg6ODFweDsgIiBhbGlnbj0icmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaAogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q9Ii8vY2FjOkFkZGl0aW9uYWxEb2N1bWVudFJlZmVyZW5jZVtjYmM6RG9jdW1lbnRUeXBlQ29kZSA9ICdEQlRTQVlJJ10iPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2JjOklEIi8+CiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8dHIgaWQ9ImJ1ZGdldENvbnRhaW5lclRyIj4KICAgICAgICAgICAgICAgICAgICA8dGQvPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHdpZHRoPSIxNTBweCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6Ym9sZDsgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkfDvG1yw7xrIE3DvGTDvHJsw7zEn8O8IFRleWlkIFlhesSxc8SxIFRhcmloaTwveHNsOnRleHQ+CiAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgaWQ9ImxpbmVUYWJsZUJ1ZGdldFRkIiBzdHlsZT0id2lkdGg6ODJweDsgIiBhbGlnbj0icmlnaHQiPgogICAgICAgICAgICAgICAgICAgICAgPHhzbDpmb3ItZWFjaAogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3Q9Ii8vY2FjOkFkZGl0aW9uYWxEb2N1bWVudFJlZmVyZW5jZVtjYmM6RG9jdW1lbnRUeXBlQ29kZSA9ICdHTVRZVEFSSUgnXSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjYmM6SXNzdWVEYXRlIi8+CiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8dHIgaWQ9ImJ1ZGdldENvbnRhaW5lclRyIj4KICAgICAgICAgICAgICAgICAgICA8dGQvPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHdpZHRoPSIxNTBweCI+CiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6Ym9sZDsgIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHhzbDp0ZXh0PkfDvG1yw7xrIE3DvGTDvHJsw7zEn8O8IFRleWlkIFlhesSxc8SxIFNhecSxc8SxPC94c2w6dGV4dD4KICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBpZD0ibGluZVRhYmxlQnVkZ2V0VGQiIHN0eWxlPSJ3aWR0aDo4MnB4OyAiIGFsaWduPSJyaWdodCI+CiAgICAgICAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdD0iLy9jYWM6QWRkaXRpb25hbERvY3VtZW50UmVmZXJlbmNlW2NiYzpEb2N1bWVudFR5cGVDb2RlID0gJ0dNVFlTQVlJJ10iPgogICAgICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2JjOklEIi8+CiAgICAgICAgICAgICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICA8L3RyPgoKICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgPC90YWJsZT4KICAgICAgICA8YnIvPgogICAgICAgIDxici8+CiAgICAgICAgPGJyLz4KICAgICAgICA8YnIvPgogICAgICAgIDxici8+CiAgICAgICAgPGJyLz4KICAgICAgICA8YnIvPgogICAgICAgIDx0YWJsZSBpZD0iaW5mb1RhYmxlIiBib3JkZXI9IjIiIHdpZHRoPSI3MDAiIGFsaWduPSJsZWZ0Ij4KICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgPHRyIGFsaWduPSJsZWZ0Ij4KICAgICAgICAgICAgICA8dGQgaWQ9ImluZm9UYWJsZVRkIiBoZWlnaHQ9IjEwMCI+CiAgICAgICAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iLy9uMTpDcmVkaXROb3RlL2NiYzpOb3RlIj4KICAgICAgICAgICAgICAgICAgPHhzbDppZiB0ZXN0PSJwb3NpdGlvbigpJmx0Oz0gMSI+CiAgICAgICAgICAgICAgICAgICAgPGI+JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7JiMxNjA7IE5vdDogPC9iPgogICAgICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuIi8+CiAgICAgICAgICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgICAgICAgPC94c2w6aWY+CiAgICAgICAgICAgICAgICAgIDx4c2w6aWYgdGVzdD0icG9zaXRpb24oKSZndDsgMSI+CiAgICAgICAgICAgICAgICAgICAgPGIgc3R5bGU9InZpc2liaWxpdHk6IGhpZGRlbjsiPiYjMTYwOyYjMTYwOyYjMTYwOyYjMTYwOyYjMTYwOyBOb3Q6IDwvYj4KICAgICAgICAgICAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iLiIvPgogICAgICAgICAgICAgICAgICAgIDxici8+CiAgICAgICAgICAgICAgICAgIDwveHNsOmlmPgogICAgICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CgogICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICAgIDwvYm9keT4KICAgIDwvaHRtbD4KICA8L3hzbDp0ZW1wbGF0ZT4KCiAgPHhzbDp0ZW1wbGF0ZSBtYXRjaD0iLy9jYmM6SXNzdWVEYXRlIj4KICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoLiw5LDIpIi8+LTx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJzdWJzdHJpbmcoLiw2LDIpIgogICAgICAvPi08eHNsOnZhbHVlLW9mIHNlbGVjdD0ic3Vic3RyaW5nKC4sMSw0KSIvPgogIDwveHNsOnRlbXBsYXRlPgoKICA8eHNsOnRlbXBsYXRlIG5hbWU9IlBhcnR5X1RpdGxlIj4KICAgIDx4c2w6cGFyYW0gbmFtZT0iUGFydHlUeXBlIi8+CiAgICA8dGQgc3R5bGU9IndpZHRoOjQ2OXB4OyAiIGFsaWduPSJsZWZ0Ij4KICAgICAgPHhzbDppZiB0ZXN0PSJjYWM6UGFydHlOYW1lIj4KICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2FjOlBhcnR5TmFtZS9jYmM6TmFtZSIvPgogICAgICAgIDxici8+CiAgICAgIDwveHNsOmlmPgogICAgICA8eHNsOmlmIHRlc3Q9ImNhYzpQYXJ0eUxlZ2FsRW50aXR5Ij4KICAgICAgICA8c3BhbiBzdHlsZT0iZm9udC13ZWlnaHQ6Ym9sZDsgIj4KICAgICAgICAgIDx4c2w6dGV4dD5WS046ID8/PC94c2w6dGV4dD4KICAgICAgICA8L3NwYW4+CiAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNhYzpQYXJ0eUxlZ2FsRW50aXR5L2NiYzpDb21wYW55SUQiLz4KICAgICAgICA8YnIvPgogICAgICA8L3hzbDppZj4KICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNhYzpQZXJzb24iPgogICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYmM6VGl0bGUiPgogICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+CiAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNiYzpGaXJzdE5hbWUiPgogICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+CiAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNiYzpNaWRkbGVOYW1lIj4KICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4KICAgICAgICAgIDx4c2w6dGV4dD4mIzE2MDsgPC94c2w6dGV4dD4KICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2JjOkZhbWlseU5hbWUiPgogICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+CiAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNiYzpOYW1lU3VmZml4Ij4KICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4KICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICA8eHNsOmlmIHRlc3Q9IiRQYXJ0eVR5cGU9J1RBWEZSRUUnIj4KICAgICAgICAgIDxici8+CiAgICAgICAgICA8eHNsOnRleHQ+UGFzYXBvcnQgTm86IDwveHNsOnRleHQ+CiAgICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iY2FjOklkZW50aXR5RG9jdW1lbnRSZWZlcmVuY2UvY2JjOklEIi8+CiAgICAgICAgICA8YnIvPgogICAgICAgICAgPHhzbDp0ZXh0PsOcbGtlc2k6IDwveHNsOnRleHQ+CiAgICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2JjOk5hdGlvbmFsaXR5SUQiPgogICAgICAgICAgICA8eHNsOmNhbGwtdGVtcGxhdGUgbmFtZT0iQ291bnRyeSI+CiAgICAgICAgICAgICAgPHhzbDp3aXRoLXBhcmFtIG5hbWU9IkNvdW50cnlUeXBlIj4KICAgICAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuIi8+CiAgICAgICAgICAgICAgPC94c2w6d2l0aC1wYXJhbT4KICAgICAgICAgICAgPC94c2w6Y2FsbC10ZW1wbGF0ZT4KICAgICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgIDwveHNsOmlmPgoKICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICA8L3RkPgogIDwveHNsOnRlbXBsYXRlPgogIDx4c2w6dGVtcGxhdGUgbmFtZT0iUGFydHlfQWRyZXNzIj4KICAgIDx4c2w6cGFyYW0gbmFtZT0iUGFydHlUeXBlIi8+CiAgICA8dGQgc3R5bGU9IndpZHRoOjQ2OXB4OyAiIGFsaWduPSJsZWZ0Ij4KICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNhYzpQb3N0YWxBZGRyZXNzIj4KICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2JjOlN0cmVldE5hbWUiPgogICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+CiAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNiYzpCdWlsZGluZ05hbWUiPgogICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYmM6QnVpbGRpbmdOdW1iZXIiPgogICAgICAgICAgPHhzbDp0ZXh0PiBObzo8L3hzbDp0ZXh0PgogICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+CiAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgPGJyLz4KICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2JjOlJvb20iPgogICAgICAgICAgPHhzbDp0ZXh0PkthcMSxIE5vOjwveHNsOnRleHQ+CiAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+CiAgICAgICAgICA8eHNsOnRleHQ+JiMxNjA7PC94c2w6dGV4dD4KICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICA8YnIvPgogICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYmM6UG9zdGFsWm9uZSI+CiAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+CiAgICAgICAgICA8eHNsOnRleHQ+JiMxNjA7PC94c2w6dGV4dD4KICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2JjOkNpdHlTdWJkaXZpc2lvbk5hbWUiPgogICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgICAgPHhzbDp0ZXh0Pi8gPC94c2w6dGV4dD4KICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2JjOkNpdHlOYW1lIj4KICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4KICAgICAgICAgIDx4c2w6dGV4dD4mIzE2MDs8L3hzbDp0ZXh0PgogICAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICAgIDx4c2w6aWYgdGVzdD0iJFBhcnR5VHlwZSE9J09USEVSJyI+CiAgICAgICAgICA8YnIvPgogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9ImNhYzpDb3VudHJ5L2NiYzpOYW1lIi8+CiAgICAgICAgICA8YnIvPgogICAgICAgIDwveHNsOmlmPgogICAgICA8L3hzbDpmb3ItZWFjaD4KICAgIDwvdGQ+CiAgPC94c2w6dGVtcGxhdGU+CiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJDb3VudHJ5Ij4KICAgIDx4c2w6cGFyYW0gbmFtZT0iQ291bnRyeVR5cGUiLz4KICAgIDx4c2w6Y2hvb3NlPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdBRiciPkFmZ2FuaXN0YW48L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdERSciPkFsbWFueWE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdBRCciPkFuZG9ycmE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdBTyciPkFuZ29sYTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0FHJyI+QW50aWd1YSB2ZSBCYXJidWRhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nQVInIj5BcmphbnRpbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0FMJyI+QXJuYXZ1dGx1azwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0FXJyI+QXJ1YmE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdBVSciPkF2dXN0cmFseWE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdBVCciPkF2dXN0dXJ5YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0FaJyI+QXplcmJheWNhbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0JTJyI+QmFoYW1hbGFyPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nQkgnIj5CYWhyZXluPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nQkQnIj5CYW5nbGFkZcWfPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nQkInIj5CYXJiYWRvczwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0VIJyI+QmF0xLEgU2FocmEgKE1BKTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0JFJyI+QmVsw6dpa2E8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdCWiciPkJlbGl6ZTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0JKJyI+QmVuaW48L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdCTSciPkJlcm11ZGE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdCWSciPkJleWF6IFJ1c3lhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nQlQnIj5CaHV0YW48L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdBRSciPkJpcmxlxZ9payBBcmFwIEVtaXJsaWtsZXJpPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nVVMnIj5CaXJsZcWfaWsgRGV2bGV0bGVyPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nR0InIj5CaXJsZcWfaWsgS3JhbGzEsWs8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdCTyciPkJvbGl2eWE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdCQSciPkJvc25hLUhlcnNlazwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0JXJyI+Qm90c3ZhbmE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdCUiciPkJyZXppbHlhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nQk4nIj5CcnVuZXk8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdCRyciPkJ1bGdhcmlzdGFuPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nQkYnIj5CdXJraW5hIEZhc288L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdCSSciPkJ1cnVuZGk8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdURCciPsOHYWQ8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdLWSciPkNheW1hbiBBZGFsYXLEsTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0dJJyI+Q2ViZWxpdGFyxLFrIChHQik8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdDWiciPsOHZWsgQ3VtaHVyaXlldGk8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdEWiciPkNlemF5aXI8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdESiciPkNpYnV0aTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0NOJyI+w4dpbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0RLJyI+RGFuaW1hcmthPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nQ0QnIj5EZW1va3JhdGlrIEtvbmdvIEN1bWh1cml5ZXRpPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nVEwnIj5Eb8SfdSBUaW1vcjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0RPJyI+RG9taW5payBDdW1odXJpeWV0aTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0RNJyI+RG9taW5pa2E8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdFQyciPkVrdmFkb3I8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdHUSciPkVrdmF0b3IgR2luZXNpPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nU1YnIj5FbCBTYWx2YWRvcjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0lEJyI+RW5kb25lenlhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nRVInIj5Fcml0cmU8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdBTSciPkVybWVuaXN0YW48L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdNRiciPkVybWnFnyBNYXJ0aW4gKEZSKTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0VFJyI+RXN0b255YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0VUJyI+RXRpeW9weWE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdGSyciPkZhbGtsYW5kIEFkYWxhcsSxPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nRk8nIj5GYXJvZSBBZGFsYXLEsSAoREspPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTUEnIj5GYXM8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdGSiciPkZpamk8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdDSSciPkZpbGRpxZ9pIFNhaGlsaTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1BIJyI+RmlsaXBpbmxlcjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0ZJJyI+RmlubGFuZGl5YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0ZSJyI+RnJhbnNhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nR0YnIj5GcmFuc8SxeiBHdXlhbmFzxLEgKEZSKTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1BGJyI+RnJhbnPEsXogUG9saW5lenlhc8SxIChGUik8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdHQSciPkdhYm9uPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nR00nIj5HYW1iaXlhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nR0gnIj5HYW5hPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nR04nIj5HaW5lPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nR1cnIj5HaW5lIEJpc3NhdTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0dEJyI+R3JlbmFkYTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0dMJyI+R3LDtm5sYW5kIChESyk8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdHUCciPkd1YWRlbG91cGUgKEZSKTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0dUJyI+R3VhdGVtYWxhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nR0cnIj5HdWVybnNleSAoR0IpPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nWkEnIj5Hw7xuZXkgQWZyaWthPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nS1InIj5Hw7xuZXkgS29yZTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0dFJyI+R8O8cmNpc3RhbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0dZJyI+R3V5YW5hPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nSFQnIj5IYWl0aTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0lOJyI+SGluZGlzdGFuPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nSFInIj5IxLFydmF0aXN0YW48L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdOTCciPkhvbGxhbmRhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nSE4nIj5Ib25kdXJhczwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0hLJyI+SG9uZyBLb25nIChDTik8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdWRyciPsSwbmdpbGl6IFZpcmppbiBBZGFsYXLEsTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0lRJyI+SXJhazwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0lSJyI+xLByYW48L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdJRSciPsSwcmxhbmRhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nRVMnIj7EsHNwYW55YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0lMJyI+xLBzcmFpbDwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1NFJyI+xLBzdmXDpzwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0NIJyI+xLBzdmnDp3JlPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nSVQnIj7EsHRhbHlhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nSVMnIj7EsHpsYW5kYTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0pNJyI+SmFtYWlrYTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0pQJyI+SmFwb255YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0pFJyI+SmVyc2V5IChHQik8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdLSCciPkthbWJvw6d5YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0NNJyI+S2FtZXJ1bjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0NBJyI+S2FuYWRhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTUUnIj5LYXJhZGHEnzwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1FBJyI+S2F0YXI8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdLWiciPkthemFraXN0YW48L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdLRSciPktlbnlhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nQ1knIj5LxLFicsSxczwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0tHJyI+S8SxcmfEsXppc3RhbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0tJJyI+S2lyaWJhdGk8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdDTyciPktvbG9tYml5YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0tNJyI+S29tb3JsYXI8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdDRyciPktvbmdvIEN1bWh1cml5ZXRpPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nS1YnIj5Lb3NvdmEgKFJTKTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0NSJyI+S29zdGEgUmlrYTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0NVJyI+S8O8YmE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdLVyciPkt1dmV5dDwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0tQJyI+S3V6ZXkgS29yZTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0xBJyI+TGFvczwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0xTJyI+TGVzb3RvPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTFYnIj5MZXRvbnlhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTFInIj5MaWJlcnlhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTFknIj5MaWJ5YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0xJJyI+TGlodGVuxZ90YXluPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTFQnIj5MaXR2YW55YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0xCJyI+TMO8Ym5hbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0xVJyI+TMO8a3NlbWJ1cmc8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdIVSciPk1hY2FyaXN0YW48L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdNRyciPk1hZGFnYXNrYXI8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdNTyciPk1ha2FvIChDTik8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdNSyciPk1ha2Vkb255YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J01XJyI+TWFsYXZpPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTVYnIj5NYWxkaXZsZXI8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdNWSciPk1hbGV6eWE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdNTCciPk1hbGk8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdNVCciPk1hbHRhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nSU0nIj5NYW4gQWRhc8SxIChHQik8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdNSCciPk1hcnNoYWxsIEFkYWxhcsSxPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTVEnIj5NYXJ0aW5pcXVlIChGUik8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdNVSciPk1hdXJpdGl1czwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1lUJyI+TWF5b3R0ZSAoRlIpPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTVgnIj5NZWtzaWthPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nRk0nIj5NaWtyb25lenlhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nRUcnIj5NxLFzxLFyPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTU4nIj5Nb8Sfb2xpc3RhbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J01EJyI+TW9sZG92YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J01DJyI+TW9uYWtvPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTVInIj5Nb3JpdGFueWE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdNWiciPk1vemFtYmlrPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTU0nIj5NeWFubWFyPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTkEnIj5OYW1pYnlhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTlInIj5OYXVydTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J05QJyI+TmVwYWw8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdORSciPk5pamVyPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTkcnIj5OaWplcnlhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTkknIj5OaWthcmFndWE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdOTyciPk5vcnZlw6c8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdDRiciPk9ydGEgQWZyaWthIEN1bWh1cml5ZXRpPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nVVonIj7DlnpiZWtpc3RhbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1BLJyI+UGFraXN0YW48L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdQVyciPlBhbGF1PC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nUEEnIj5QYW5hbWE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdQRyciPlBhcHVhIFllbmkgR2luZTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1BZJyI+UGFyYWd1YXk8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdQRSciPlBlcnU8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdQTCciPlBvbG9ueWE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdQVCciPlBvcnRla2l6PC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nUFInIj5Qb3J0byBSaWtvIChVUyk8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdSRSciPlLDqXVuaW9uIChGUik8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdSTyciPlJvbWFueWE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdSVyciPlJ1YW5kYTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1JVJyI+UnVzeWE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdCTCciPlNhaW50IEJhcnRow6lsZW15IChGUik8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdLTiciPlNhaW50IEtpdHRzIHZlIE5ldmlzPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTEMnIj5TYWludCBMdWNpYTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1BNJyI+U2FpbnQgUGllcnJlIHZlIE1pcXVlbG9uIChGUik8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdWQyciPlNhaW50IFZpbmNlbnQgdmUgR3JlbmFkaW5sZXI8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdXUyciPlNhbW9hPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nU00nIj5TYW4gTWFyaW5vPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nU1QnIj5Tw6NvIFRvbcOpIHZlIFByw61uY2lwZTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1NOJyI+U2VuZWdhbDwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1NDJyI+U2V5xZ9lbGxlcjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1NMJyI+U2llcnJhIExlb25lPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nQ0wnIj7FnmlsaTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1NHJyI+U2luZ2FwdXI8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdSUyciPlPEsXJiaXN0YW48L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdTSyciPlNsb3Zha3lhIEN1bWh1cml5ZXRpPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nU0knIj5TbG92ZW55YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1NCJyI+U29sb21vbiBBZGFsYXLEsTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1NPJyI+U29tYWxpPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nU1MnIj5Tb3V0aCBTdWRhbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1NKJyI+U3BpdHNiZXJnZW4gKE5PKTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0xLJyI+U3JpIExhbmthPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nU0QnIj5TdWRhbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1NSJyI+U3VyaW5hbTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1NZJyI+U3VyaXllPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nU0EnIj5TdXVkaSBBcmFiaXN0YW48L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdTWiciPlN2YXppbGFuZDwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1RKJyI+VGFjaWtpc3RhbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1RaJyI+VGFuemFueWE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdUSCciPlRheWxhbmQ8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdUVyciPlRheXZhbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1RHJyI+VG9nbzwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1RPJyI+VG9uZ2E8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdUVCciPlRyaW5pZGFkIHZlIFRvYmFnbzwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1ROJyI+VHVudXM8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdUUiciPlTDvHJraXllPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nVE0nIj5Uw7xya21lbmlzdGFuPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nVEMnIj5UdXJrcyB2ZSBDYWljb3M8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdUViciPlR1dmFsdTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1VHJyI+VWdhbmRhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nVUEnIj5Va3JheW5hPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nT00nIj5VbW1hbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0pPJyI+w5xyZMO8bjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1VZJyI+VXJ1Z3VheTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1ZVJyI+VmFudWF0dTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1ZBJyI+VmF0aWthbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1ZFJyI+VmVuZXp1ZWxhPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nVk4nIj5WaWV0bmFtPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nV0YnIj5XYWxsaXMgdmUgRnV0dW5hIChGUik8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdZRSciPlllbWVuPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTkMnIj5ZZW5pIEthbGVkb255YSAoRlIpPC94c2w6d2hlbj4KICAgICAgPHhzbDp3aGVuIHRlc3Q9IiRDb3VudHJ5VHlwZT0nTlonIj5ZZW5pIFplbGFuZGE8L3hzbDp3aGVuPgogICAgICA8eHNsOndoZW4gdGVzdD0iJENvdW50cnlUeXBlPSdDViciPlllxZ9pbCBCdXJ1biBBZGFsYXLEsTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J0dSJyI+WXVuYW5pc3RhbjwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1pNJyI+WmFtYml5YTwveHNsOndoZW4+CiAgICAgIDx4c2w6d2hlbiB0ZXN0PSIkQ291bnRyeVR5cGU9J1pXJyI+WmltYmFidmU8L3hzbDp3aGVuPgogICAgICA8eHNsOm90aGVyd2lzZT4KICAgICAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iJENvdW50cnlUeXBlIi8+CiAgICAgIDwveHNsOm90aGVyd2lzZT4KICAgIDwveHNsOmNob29zZT4KCiAgPC94c2w6dGVtcGxhdGU+CiAgPHhzbDp0ZW1wbGF0ZSBuYW1lPSJQYXJ0eV9PdGhlciI+CiAgICA8eHNsOnBhcmFtIG5hbWU9IlBhcnR5VHlwZSIvPgogICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNhYzpQZXJzb24vY2JjOk5hdGlvbmFsaXR5SUQiPgogICAgICA8dHIgYWxpZ249ImxlZnQiPgogICAgICAgIDx0ZD4KICAgICAgICAgIDx4c2w6dGV4dD5VeXJ1xJ91OiA8L3hzbDp0ZXh0PgogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4iLz4KICAgICAgICA8L3RkPgogICAgICA8L3RyPgogICAgPC94c2w6Zm9yLWVhY2g+CiAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2JjOldlYnNpdGVVUkkiPgogICAgICA8dHIgYWxpZ249ImxlZnQiPgogICAgICAgIDx0ZD4KICAgICAgICAgIDx4c2w6dGV4dD5XZWIgU2l0ZXNpOiA8L3hzbDp0ZXh0PgogICAgICAgICAgPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9Ii4iLz4KICAgICAgICA8L3RkPgogICAgICA8L3RyPgogICAgPC94c2w6Zm9yLWVhY2g+CiAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2FjOkNvbnRhY3QvY2JjOkVsZWN0cm9uaWNNYWlsIj4KICAgICAgPHRyIGFsaWduPSJsZWZ0Ij4KICAgICAgICA8dGQ+CiAgICAgICAgICA8eHNsOnRleHQ+RS1Qb3N0YTogPC94c2w6dGV4dD4KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSIuIi8+CiAgICAgICAgPC90ZD4KICAgICAgPC90cj4KICAgIDwveHNsOmZvci1lYWNoPgogICAgPHhzbDpmb3ItZWFjaCBzZWxlY3Q9ImNhYzpDb250YWN0Ij4KICAgICAgPHhzbDppZiB0ZXN0PSJjYmM6VGVsZXBob25lIG9yIGNiYzpUZWxlZmF4Ij4KICAgICAgICA8dHIgYWxpZ249ImxlZnQiPgogICAgICAgICAgPHRkIHN0eWxlPSJ3aWR0aDo0NjlweDsgIiBhbGlnbj0ibGVmdCI+CiAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYmM6VGVsZXBob25lIj4KICAgICAgICAgICAgICA8eHNsOnRleHQ+VGVsOiA8L3hzbDp0ZXh0PgogICAgICAgICAgICAgIDx4c2w6YXBwbHktdGVtcGxhdGVzLz4KICAgICAgICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICAgICAgICAgIDx4c2w6Zm9yLWVhY2ggc2VsZWN0PSJjYmM6VGVsZWZheCI+CiAgICAgICAgICAgICAgPHhzbDp0ZXh0PiBGYXg6IDwveHNsOnRleHQ+CiAgICAgICAgICAgICAgPHhzbDphcHBseS10ZW1wbGF0ZXMvPgogICAgICAgICAgICA8L3hzbDpmb3ItZWFjaD4KICAgICAgICAgICAgPHhzbDp0ZXh0PiYjMTYwOzwveHNsOnRleHQ+CiAgICAgICAgICA8L3RkPgogICAgICAgIDwvdHI+CiAgICAgIDwveHNsOmlmPgogICAgPC94c2w6Zm9yLWVhY2g+CiAgICA8eHNsOmlmIHRlc3Q9IiRQYXJ0eVR5cGUhPSdUQVhGUkVFJyBhbmQgJFBhcnR5VHlwZSE9J0VYUE9SVCciPgogICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2FjOlBhcnR5VGF4U2NoZW1lL2NhYzpUYXhTY2hlbWUvY2JjOk5hbWUiPgogICAgICAgIDx0ciBhbGlnbj0ibGVmdCI+CiAgICAgICAgICA8dGQ+CiAgICAgICAgICAgIDx4c2w6dGV4dD5WZXJnaSBEYWlyZXNpOiA8L3hzbDp0ZXh0PgogICAgICAgICAgICA8eHNsOmFwcGx5LXRlbXBsYXRlcy8+CiAgICAgICAgICA8L3RkPgogICAgICAgIDwvdHI+CiAgICAgIDwveHNsOmZvci1lYWNoPgogICAgICA8eHNsOmZvci1lYWNoIHNlbGVjdD0iY2FjOlBhcnR5SWRlbnRpZmljYXRpb24iPgogICAgICAgIDx0ciBhbGlnbj0ibGVmdCI+CiAgICAgICAgICA8dGQ+CiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjYmM6SUQvQHNjaGVtZUlEIi8+CiAgICAgICAgICAgIDx4c2w6dGV4dD46IDwveHNsOnRleHQ+CiAgICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJjYmM6SUQiLz4KICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgPC94c2w6Zm9yLWVhY2g+CiAgICA8L3hzbDppZj4KICA8L3hzbDp0ZW1wbGF0ZT4KICA8eHNsOnRlbXBsYXRlIG5hbWU9IkN1cnJfVHlwZSI+CiAgICA8eHNsOnZhbHVlLW9mIHNlbGVjdD0iZm9ybWF0LW51bWJlciguLCAnIyMjLiMjMCwwMCcsICdldXJvcGVhbicpIi8+CiAgICA8eHNsOmlmIHRlc3Q9IkBjdXJyZW5jeUlEIj4KICAgICAgPHhzbDp0ZXh0PiA8L3hzbDp0ZXh0PgogICAgICA8eHNsOmNob29zZT4KICAgICAgICA8eHNsOndoZW4gdGVzdD0iQGN1cnJlbmN5SUQgPSAnVFJMJyBvciBAY3VycmVuY3lJRCA9ICdUUlknIj4KICAgICAgICAgIDx4c2w6dGV4dD5UTDwveHNsOnRleHQ+CiAgICAgICAgPC94c2w6d2hlbj4KICAgICAgICA8eHNsOm90aGVyd2lzZT4KICAgICAgICAgIDx4c2w6dmFsdWUtb2Ygc2VsZWN0PSJAY3VycmVuY3lJRCIvPgogICAgICAgIDwveHNsOm90aGVyd2lzZT4KICAgICAgPC94c2w6Y2hvb3NlPgogICAgPC94c2w6aWY+CiAgPC94c2w6dGVtcGxhdGU+CjwveHNsOnN0eWxlc2hlZXQ+";
    }

    public class Issuerparty
    {
        public Postaladdress postalAddress = new Postaladdress();
    }

    public class Postaladdress
    {
        public Country country = new Country();
    }

    public class Country
    {
        public string identificationCode = "BG";
        public string name = "BULGARISTAN";
    }

    public class Paymentmean
    {
        public string paymentCodeListId { get; set; }
        public string paymentCode { get; set; }
        public string instructionNote { get; set; }
        public Payeefinancialaccount payeeFinancialAccount { get; set; }
        public Payerfinancialaccount payerFinancialAccount { get; set; }

        //public string paymentCodeListId = "UN/4461";
        //public string paymentCode = "ZZZ";
        //public string instructionNote = "AÇIKLAMA";
        //public Payeefinancialaccount payeeFinancialAccount = new Payeefinancialaccount();
        //public Payerfinancialaccount payerFinancialAccount = new Payerfinancialaccount();

    }

    public class Payeefinancialaccount
    {
        public Financialinstitutionbranch financialInstitutionBranch = new Financialinstitutionbranch();
    }

    public class Financialinstitutionbranch
    {
        public Financialinstitution financialInstitution = new Financialinstitution();
    }

    public class Financialinstitution
    {
        public string id { get; set; }
    }

    public class Payerfinancialaccount
    {
        public Financialinstitutionbranch1 financialInstitutionBranch = new Financialinstitutionbranch1();
    }

    public class Financialinstitutionbranch1
    {
        public Financialinstitution1 financialInstitution = new Financialinstitution1();
    }

    public class Financialinstitution1
    {
        public string id { get; set; }
    }

}
